(base) matthew@Satsuki-UPC:~/Thesis/Efficient-3DCNNs$ ./runme.sh 
start all test
start bs8
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.1', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.994 (4.994)	Data 4.282 (4.282)	
[2/123]	Time 0.016 (2.505)	Data 0.000 (2.141)	
[3/123]	Time 0.014 (1.674)	Data 0.000 (1.427)	
[4/123]	Time 0.015 (1.260)	Data 0.001 (1.071)	
[5/123]	Time 0.014 (1.010)	Data 0.000 (0.857)	
[6/123]	Time 0.014 (0.844)	Data 0.000 (0.714)	
[7/123]	Time 0.015 (0.726)	Data 0.001 (0.612)	
[8/123]	Time 0.015 (0.637)	Data 0.000 (0.536)	
[9/123]	Time 0.016 (0.568)	Data 0.001 (0.476)	
[10/123]	Time 0.018 (0.513)	Data 0.001 (0.429)	
[11/123]	Time 0.016 (0.468)	Data 0.001 (0.390)	
[12/123]	Time 0.016 (0.430)	Data 0.001 (0.357)	
[13/123]	Time 0.016 (0.398)	Data 0.000 (0.330)	
[14/123]	Time 0.025 (0.372)	Data 0.000 (0.306)	
[15/123]	Time 0.024 (0.348)	Data 0.003 (0.286)	
[16/123]	Time 0.023 (0.328)	Data 0.001 (0.268)	
[17/123]	Time 0.014 (0.310)	Data 0.001 (0.253)	
[18/123]	Time 0.015 (0.293)	Data 0.000 (0.239)	
[19/123]	Time 0.016 (0.279)	Data 0.003 (0.226)	
[20/123]	Time 0.015 (0.265)	Data 0.001 (0.215)	
[21/123]	Time 0.016 (0.254)	Data 0.002 (0.205)	
[22/123]	Time 0.015 (0.243)	Data 0.001 (0.195)	
[23/123]	Time 0.014 (0.233)	Data 0.001 (0.187)	
[24/123]	Time 0.015 (0.224)	Data 0.001 (0.179)	
[25/123]	Time 0.014 (0.215)	Data 0.001 (0.172)	
[26/123]	Time 0.014 (0.208)	Data 0.001 (0.166)	
[27/123]	Time 0.015 (0.200)	Data 0.001 (0.159)	
[28/123]	Time 0.014 (0.194)	Data 0.001 (0.154)	
[29/123]	Time 0.015 (0.188)	Data 0.001 (0.148)	
[30/123]	Time 0.015 (0.182)	Data 0.001 (0.144)	
[31/123]	Time 0.014 (0.176)	Data 0.001 (0.139)	
[32/123]	Time 0.029 (0.172)	Data 0.001 (0.135)	
[33/123]	Time 0.015 (0.167)	Data 0.001 (0.131)	
[34/123]	Time 0.862 (0.188)	Data 0.849 (0.152)	
[35/123]	Time 0.052 (0.184)	Data 0.012 (0.148)	
[36/123]	Time 0.021 (0.179)	Data 0.007 (0.144)	
[37/123]	Time 0.185 (0.179)	Data 0.171 (0.145)	
[38/123]	Time 0.058 (0.176)	Data 0.044 (0.142)	
[39/123]	Time 0.029 (0.172)	Data 0.002 (0.138)	
[40/123]	Time 0.028 (0.169)	Data 0.006 (0.135)	
[41/123]	Time 0.170 (0.169)	Data 0.157 (0.136)	
[42/123]	Time 0.014 (0.165)	Data 0.001 (0.132)	
[43/123]	Time 0.015 (0.162)	Data 0.001 (0.129)	
[44/123]	Time 0.166 (0.162)	Data 0.152 (0.130)	
[45/123]	Time 0.027 (0.159)	Data 0.002 (0.127)	
[46/123]	Time 0.018 (0.156)	Data 0.001 (0.124)	
[47/123]	Time 0.017 (0.153)	Data 0.003 (0.122)	
[48/123]	Time 0.068 (0.151)	Data 0.054 (0.120)	
[49/123]	Time 0.015 (0.148)	Data 0.001 (0.118)	
[50/123]	Time 0.618 (0.158)	Data 0.603 (0.127)	
[51/123]	Time 0.187 (0.158)	Data 0.171 (0.128)	
[52/123]	Time 0.045 (0.156)	Data 0.012 (0.126)	
[53/123]	Time 0.034 (0.154)	Data 0.005 (0.124)	
[54/123]	Time 0.172 (0.154)	Data 0.142 (0.124)	
[55/123]	Time 0.142 (0.154)	Data 0.128 (0.124)	
[56/123]	Time 0.038 (0.152)	Data 0.008 (0.122)	
[57/123]	Time 0.018 (0.149)	Data 0.003 (0.120)	
[58/123]	Time 0.041 (0.147)	Data 0.025 (0.118)	
[59/123]	Time 0.039 (0.146)	Data 0.003 (0.116)	
[60/123]	Time 0.039 (0.144)	Data 0.025 (0.115)	
[61/123]	Time 0.021 (0.142)	Data 0.007 (0.113)	
[62/123]	Time 0.023 (0.140)	Data 0.008 (0.111)	
[63/123]	Time 0.019 (0.138)	Data 0.003 (0.110)	
[64/123]	Time 0.036 (0.136)	Data 0.022 (0.108)	
[65/123]	Time 0.088 (0.136)	Data 0.060 (0.108)	
[66/123]	Time 0.655 (0.144)	Data 0.641 (0.116)	
[67/123]	Time 0.271 (0.145)	Data 0.256 (0.118)	
[68/123]	Time 0.031 (0.144)	Data 0.003 (0.116)	
[69/123]	Time 0.042 (0.142)	Data 0.007 (0.115)	
[70/123]	Time 0.108 (0.142)	Data 0.093 (0.114)	
[71/123]	Time 0.063 (0.141)	Data 0.049 (0.113)	
[72/123]	Time 0.028 (0.139)	Data 0.002 (0.112)	
[73/123]	Time 0.021 (0.138)	Data 0.006 (0.110)	
[74/123]	Time 0.173 (0.138)	Data 0.159 (0.111)	
[75/123]	Time 0.042 (0.137)	Data 0.014 (0.110)	
[76/123]	Time 0.037 (0.135)	Data 0.022 (0.109)	
[77/123]	Time 0.025 (0.134)	Data 0.007 (0.107)	
[78/123]	Time 0.016 (0.132)	Data 0.001 (0.106)	
[79/123]	Time 0.019 (0.131)	Data 0.001 (0.105)	
[80/123]	Time 0.031 (0.130)	Data 0.002 (0.103)	
[81/123]	Time 0.030 (0.129)	Data 0.005 (0.102)	
[82/123]	Time 0.943 (0.138)	Data 0.928 (0.112)	
[83/123]	Time 0.021 (0.137)	Data 0.003 (0.111)	
[84/123]	Time 0.032 (0.136)	Data 0.003 (0.110)	
[85/123]	Time 0.040 (0.135)	Data 0.006 (0.108)	
[86/123]	Time 0.117 (0.134)	Data 0.088 (0.108)	
[87/123]	Time 0.041 (0.133)	Data 0.026 (0.107)	
[88/123]	Time 0.029 (0.132)	Data 0.014 (0.106)	
[89/123]	Time 0.015 (0.131)	Data 0.001 (0.105)	
[90/123]	Time 0.074 (0.130)	Data 0.061 (0.104)	
[91/123]	Time 0.050 (0.129)	Data 0.017 (0.103)	
[92/123]	Time 0.040 (0.128)	Data 0.026 (0.103)	
[93/123]	Time 0.030 (0.127)	Data 0.000 (0.101)	
[94/123]	Time 0.047 (0.127)	Data 0.000 (0.100)	
[95/123]	Time 0.032 (0.126)	Data 0.001 (0.099)	
[96/123]	Time 0.029 (0.125)	Data 0.005 (0.098)	
[97/123]	Time 0.042 (0.124)	Data 0.029 (0.098)	
[98/123]	Time 0.570 (0.128)	Data 0.555 (0.102)	
[99/123]	Time 0.123 (0.128)	Data 0.104 (0.102)	
[100/123]	Time 0.024 (0.127)	Data 0.001 (0.101)	
[101/123]	Time 0.022 (0.126)	Data 0.001 (0.100)	
[102/123]	Time 0.242 (0.127)	Data 0.227 (0.102)	
[103/123]	Time 0.015 (0.126)	Data 0.000 (0.101)	
[104/123]	Time 0.015 (0.125)	Data 0.000 (0.100)	
[105/123]	Time 0.016 (0.124)	Data 0.001 (0.099)	
[106/123]	Time 0.015 (0.123)	Data 0.000 (0.098)	
[107/123]	Time 0.016 (0.122)	Data 0.000 (0.097)	
[108/123]	Time 0.019 (0.121)	Data 0.001 (0.096)	
[109/123]	Time 0.015 (0.120)	Data 0.000 (0.095)	
[110/123]	Time 0.015 (0.119)	Data 0.000 (0.094)	
[111/123]	Time 0.023 (0.118)	Data 0.001 (0.093)	
[112/123]	Time 0.016 (0.117)	Data 0.001 (0.093)	
[113/123]	Time 0.023 (0.116)	Data 0.008 (0.092)	
[114/123]	Time 0.355 (0.119)	Data 0.341 (0.094)	
[115/123]	Time 0.040 (0.118)	Data 0.016 (0.093)	
[116/123]	Time 0.053 (0.117)	Data 0.040 (0.093)	
[117/123]	Time 0.013 (0.116)	Data 0.000 (0.092)	
[118/123]	Time 0.127 (0.117)	Data 0.115 (0.092)	
[119/123]	Time 0.013 (0.116)	Data 0.000 (0.091)	
[120/123]	Time 0.012 (0.115)	Data 0.000 (0.091)	
[121/123]	Time 0.012 (0.114)	Data 0.000 (0.090)	
[122/123]	Time 0.012 (0.113)	Data 0.000 (0.089)	
[123/123]	Time 0.012 (0.112)	Data 0.000 (0.089)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.1', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.362 (4.362)	Data 3.542 (3.542)	
[2/123]	Time 0.020 (2.191)	Data 0.000 (1.771)	
[3/123]	Time 0.017 (1.467)	Data 0.000 (1.181)	
[4/123]	Time 0.018 (1.104)	Data 0.000 (0.886)	
[5/123]	Time 0.018 (0.887)	Data 0.000 (0.709)	
[6/123]	Time 0.019 (0.742)	Data 0.001 (0.591)	
[7/123]	Time 0.020 (0.639)	Data 0.001 (0.506)	
[8/123]	Time 0.024 (0.562)	Data 0.001 (0.443)	
[9/123]	Time 0.030 (0.503)	Data 0.004 (0.394)	
[10/123]	Time 0.025 (0.455)	Data 0.001 (0.355)	
[11/123]	Time 0.028 (0.416)	Data 0.001 (0.323)	
[12/123]	Time 0.058 (0.387)	Data 0.003 (0.296)	
[13/123]	Time 0.052 (0.361)	Data 0.012 (0.274)	
[14/123]	Time 0.063 (0.340)	Data 0.016 (0.256)	
[15/123]	Time 0.048 (0.320)	Data 0.001 (0.239)	
[16/123]	Time 0.040 (0.303)	Data 0.000 (0.224)	
[17/123]	Time 0.051 (0.288)	Data 0.009 (0.211)	
[18/123]	Time 0.083 (0.276)	Data 0.017 (0.200)	
[19/123]	Time 0.058 (0.265)	Data 0.011 (0.190)	
[20/123]	Time 0.061 (0.255)	Data 0.017 (0.182)	
[21/123]	Time 0.048 (0.245)	Data 0.001 (0.173)	
[22/123]	Time 0.065 (0.237)	Data 0.000 (0.165)	
[23/123]	Time 0.048 (0.229)	Data 0.001 (0.158)	
[24/123]	Time 0.041 (0.221)	Data 0.001 (0.152)	
[25/123]	Time 0.058 (0.214)	Data 0.013 (0.146)	
[26/123]	Time 0.050 (0.208)	Data 0.007 (0.141)	
[27/123]	Time 0.056 (0.202)	Data 0.013 (0.136)	
[28/123]	Time 0.027 (0.196)	Data 0.001 (0.131)	
[29/123]	Time 0.025 (0.190)	Data 0.001 (0.127)	
[30/123]	Time 0.026 (0.185)	Data 0.001 (0.122)	
[31/123]	Time 0.046 (0.180)	Data 0.003 (0.119)	
[32/123]	Time 0.059 (0.176)	Data 0.016 (0.115)	
[33/123]	Time 0.057 (0.173)	Data 0.012 (0.112)	
[34/123]	Time 0.151 (0.172)	Data 0.090 (0.112)	
[35/123]	Time 0.641 (0.186)	Data 0.597 (0.126)	
[36/123]	Time 0.079 (0.183)	Data 0.016 (0.122)	
[37/123]	Time 0.080 (0.180)	Data 0.001 (0.119)	
[38/123]	Time 0.041 (0.176)	Data 0.013 (0.116)	
[39/123]	Time 0.067 (0.173)	Data 0.024 (0.114)	
[40/123]	Time 0.038 (0.170)	Data 0.001 (0.111)	
[41/123]	Time 0.059 (0.167)	Data 0.015 (0.109)	
[42/123]	Time 0.046 (0.164)	Data 0.006 (0.106)	
[43/123]	Time 0.059 (0.162)	Data 0.015 (0.104)	
[44/123]	Time 0.060 (0.160)	Data 0.015 (0.102)	
[45/123]	Time 0.063 (0.157)	Data 0.012 (0.100)	
[46/123]	Time 0.054 (0.155)	Data 0.012 (0.098)	
[47/123]	Time 0.047 (0.153)	Data 0.006 (0.096)	
[48/123]	Time 0.057 (0.151)	Data 0.015 (0.095)	
[49/123]	Time 0.077 (0.149)	Data 0.018 (0.093)	
[50/123]	Time 0.707 (0.161)	Data 0.631 (0.104)	
[51/123]	Time 0.059 (0.159)	Data 0.001 (0.102)	
[52/123]	Time 0.044 (0.156)	Data 0.001 (0.100)	
[53/123]	Time 0.249 (0.158)	Data 0.180 (0.101)	
[54/123]	Time 0.040 (0.156)	Data 0.001 (0.100)	
[55/123]	Time 0.053 (0.154)	Data 0.015 (0.098)	
[56/123]	Time 0.051 (0.152)	Data 0.015 (0.097)	
[57/123]	Time 0.051 (0.150)	Data 0.008 (0.095)	
[58/123]	Time 0.049 (0.149)	Data 0.016 (0.094)	
[59/123]	Time 0.055 (0.147)	Data 0.005 (0.092)	
[60/123]	Time 0.054 (0.146)	Data 0.012 (0.091)	
[61/123]	Time 0.061 (0.144)	Data 0.007 (0.089)	
[62/123]	Time 0.044 (0.143)	Data 0.001 (0.088)	
[63/123]	Time 0.071 (0.141)	Data 0.013 (0.087)	
[64/123]	Time 0.043 (0.140)	Data 0.001 (0.085)	
[65/123]	Time 0.056 (0.139)	Data 0.012 (0.084)	
[66/123]	Time 0.602 (0.146)	Data 0.559 (0.092)	
[67/123]	Time 0.055 (0.144)	Data 0.011 (0.090)	
[68/123]	Time 0.057 (0.143)	Data 0.014 (0.089)	
[69/123]	Time 0.089 (0.142)	Data 0.013 (0.088)	
[70/123]	Time 0.054 (0.141)	Data 0.001 (0.087)	
[71/123]	Time 0.061 (0.140)	Data 0.006 (0.086)	
[72/123]	Time 0.082 (0.139)	Data 0.009 (0.085)	
[73/123]	Time 0.038 (0.138)	Data 0.001 (0.083)	
[74/123]	Time 0.051 (0.136)	Data 0.013 (0.083)	
[75/123]	Time 0.080 (0.136)	Data 0.018 (0.082)	
[76/123]	Time 0.045 (0.134)	Data 0.006 (0.081)	
[77/123]	Time 0.074 (0.134)	Data 0.016 (0.080)	
[78/123]	Time 0.079 (0.133)	Data 0.007 (0.079)	
[79/123]	Time 0.055 (0.132)	Data 0.001 (0.078)	
[80/123]	Time 0.052 (0.131)	Data 0.001 (0.077)	
[81/123]	Time 0.052 (0.130)	Data 0.008 (0.076)	
[82/123]	Time 0.617 (0.136)	Data 0.555 (0.082)	
[83/123]	Time 0.047 (0.135)	Data 0.012 (0.081)	
[84/123]	Time 0.064 (0.134)	Data 0.014 (0.080)	
[85/123]	Time 0.064 (0.133)	Data 0.006 (0.079)	
[86/123]	Time 0.043 (0.132)	Data 0.006 (0.079)	
[87/123]	Time 0.084 (0.132)	Data 0.015 (0.078)	
[88/123]	Time 0.038 (0.131)	Data 0.001 (0.077)	
[89/123]	Time 0.060 (0.130)	Data 0.017 (0.076)	
[90/123]	Time 0.064 (0.129)	Data 0.020 (0.076)	
[91/123]	Time 0.076 (0.128)	Data 0.004 (0.075)	
[92/123]	Time 0.079 (0.128)	Data 0.000 (0.074)	
[93/123]	Time 0.044 (0.127)	Data 0.001 (0.073)	
[94/123]	Time 0.033 (0.126)	Data 0.001 (0.072)	
[95/123]	Time 0.039 (0.125)	Data 0.001 (0.072)	
[96/123]	Time 0.046 (0.124)	Data 0.001 (0.071)	
[97/123]	Time 0.043 (0.123)	Data 0.000 (0.070)	
[98/123]	Time 0.293 (0.125)	Data 0.266 (0.072)	
[99/123]	Time 0.055 (0.124)	Data 0.000 (0.072)	
[100/123]	Time 0.058 (0.124)	Data 0.000 (0.071)	
[101/123]	Time 0.080 (0.123)	Data 0.028 (0.070)	
[102/123]	Time 0.026 (0.122)	Data 0.000 (0.070)	
[103/123]	Time 0.025 (0.121)	Data 0.000 (0.069)	
[104/123]	Time 0.063 (0.121)	Data 0.035 (0.069)	
[105/123]	Time 0.021 (0.120)	Data 0.001 (0.068)	
[106/123]	Time 0.024 (0.119)	Data 0.000 (0.067)	
[107/123]	Time 0.024 (0.118)	Data 0.000 (0.067)	
[108/123]	Time 0.027 (0.117)	Data 0.001 (0.066)	
[109/123]	Time 0.025 (0.116)	Data 0.000 (0.066)	
[110/123]	Time 0.024 (0.116)	Data 0.001 (0.065)	
[111/123]	Time 0.019 (0.115)	Data 0.001 (0.064)	
[112/123]	Time 0.020 (0.114)	Data 0.000 (0.064)	
[113/123]	Time 0.029 (0.113)	Data 0.000 (0.063)	
[114/123]	Time 0.230 (0.114)	Data 0.215 (0.065)	
[115/123]	Time 0.016 (0.113)	Data 0.000 (0.064)	
[116/123]	Time 0.016 (0.112)	Data 0.000 (0.063)	
[117/123]	Time 0.016 (0.112)	Data 0.000 (0.063)	
[118/123]	Time 0.016 (0.111)	Data 0.000 (0.062)	
[119/123]	Time 0.016 (0.110)	Data 0.000 (0.062)	
[120/123]	Time 0.040 (0.109)	Data 0.023 (0.062)	
[121/123]	Time 0.016 (0.109)	Data 0.000 (0.061)	
[122/123]	Time 0.016 (0.108)	Data 0.000 (0.061)	
[123/123]	Time 0.016 (0.107)	Data 0.000 (0.060)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.01', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.689 (4.689)	Data 4.039 (4.039)	
[2/123]	Time 0.014 (2.351)	Data 0.000 (2.019)	
[3/123]	Time 0.014 (1.572)	Data 0.000 (1.346)	
[4/123]	Time 0.015 (1.183)	Data 0.000 (1.010)	
[5/123]	Time 0.014 (0.949)	Data 0.000 (0.808)	
[6/123]	Time 0.014 (0.793)	Data 0.000 (0.673)	
[7/123]	Time 0.015 (0.682)	Data 0.001 (0.577)	
[8/123]	Time 0.018 (0.599)	Data 0.000 (0.505)	
[9/123]	Time 0.015 (0.534)	Data 0.001 (0.449)	
[10/123]	Time 0.022 (0.483)	Data 0.001 (0.404)	
[11/123]	Time 0.015 (0.440)	Data 0.001 (0.368)	
[12/123]	Time 0.038 (0.407)	Data 0.005 (0.337)	
[13/123]	Time 0.029 (0.378)	Data 0.002 (0.312)	
[14/123]	Time 0.020 (0.352)	Data 0.006 (0.290)	
[15/123]	Time 0.028 (0.331)	Data 0.010 (0.271)	
[16/123]	Time 0.026 (0.312)	Data 0.001 (0.254)	
[17/123]	Time 0.036 (0.295)	Data 0.009 (0.240)	
[18/123]	Time 0.020 (0.280)	Data 0.006 (0.227)	
[19/123]	Time 0.049 (0.268)	Data 0.012 (0.215)	
[20/123]	Time 0.038 (0.256)	Data 0.015 (0.205)	
[21/123]	Time 0.018 (0.245)	Data 0.001 (0.196)	
[22/123]	Time 0.027 (0.235)	Data 0.011 (0.187)	
[23/123]	Time 0.037 (0.227)	Data 0.017 (0.180)	
[24/123]	Time 0.029 (0.218)	Data 0.015 (0.173)	
[25/123]	Time 0.014 (0.210)	Data 0.001 (0.166)	
[26/123]	Time 0.020 (0.203)	Data 0.001 (0.160)	
[27/123]	Time 0.027 (0.196)	Data 0.001 (0.154)	
[28/123]	Time 0.028 (0.190)	Data 0.009 (0.149)	
[29/123]	Time 0.022 (0.184)	Data 0.004 (0.144)	
[30/123]	Time 0.020 (0.179)	Data 0.001 (0.139)	
[31/123]	Time 0.024 (0.174)	Data 0.010 (0.135)	
[32/123]	Time 0.028 (0.169)	Data 0.014 (0.131)	
[33/123]	Time 0.015 (0.165)	Data 0.001 (0.127)	
[34/123]	Time 0.421 (0.172)	Data 0.407 (0.135)	
[35/123]	Time 0.032 (0.168)	Data 0.006 (0.132)	
[36/123]	Time 0.864 (0.188)	Data 0.850 (0.152)	
[37/123]	Time 0.033 (0.183)	Data 0.016 (0.148)	
[38/123]	Time 0.034 (0.179)	Data 0.003 (0.144)	
[39/123]	Time 0.025 (0.176)	Data 0.000 (0.140)	
[40/123]	Time 0.027 (0.172)	Data 0.002 (0.137)	
[41/123]	Time 0.015 (0.168)	Data 0.001 (0.134)	
[42/123]	Time 0.018 (0.164)	Data 0.005 (0.131)	
[43/123]	Time 0.034 (0.161)	Data 0.020 (0.128)	
[44/123]	Time 0.033 (0.158)	Data 0.007 (0.125)	
[45/123]	Time 0.226 (0.160)	Data 0.212 (0.127)	
[46/123]	Time 0.032 (0.157)	Data 0.018 (0.125)	
[47/123]	Time 0.025 (0.154)	Data 0.011 (0.122)	
[48/123]	Time 0.067 (0.153)	Data 0.053 (0.121)	
[49/123]	Time 0.109 (0.152)	Data 0.093 (0.120)	
[50/123]	Time 0.035 (0.149)	Data 0.013 (0.118)	
[51/123]	Time 0.018 (0.147)	Data 0.002 (0.116)	
[52/123]	Time 1.007 (0.163)	Data 0.993 (0.133)	
[53/123]	Time 0.016 (0.161)	Data 0.001 (0.130)	
[54/123]	Time 0.016 (0.158)	Data 0.001 (0.128)	
[55/123]	Time 0.017 (0.155)	Data 0.002 (0.126)	
[56/123]	Time 0.016 (0.153)	Data 0.002 (0.123)	
[57/123]	Time 0.027 (0.151)	Data 0.003 (0.121)	
[58/123]	Time 0.026 (0.148)	Data 0.001 (0.119)	
[59/123]	Time 0.030 (0.146)	Data 0.001 (0.117)	
[60/123]	Time 0.026 (0.144)	Data 0.011 (0.115)	
[61/123]	Time 0.498 (0.150)	Data 0.469 (0.121)	
[62/123]	Time 0.015 (0.148)	Data 0.001 (0.119)	
[63/123]	Time 0.033 (0.146)	Data 0.018 (0.118)	
[64/123]	Time 0.017 (0.144)	Data 0.000 (0.116)	
[65/123]	Time 0.028 (0.142)	Data 0.001 (0.114)	
[66/123]	Time 0.016 (0.140)	Data 0.001 (0.112)	
[67/123]	Time 0.030 (0.139)	Data 0.016 (0.111)	
[68/123]	Time 0.716 (0.147)	Data 0.703 (0.120)	
[69/123]	Time 0.020 (0.146)	Data 0.002 (0.118)	
[70/123]	Time 0.021 (0.144)	Data 0.001 (0.116)	
[71/123]	Time 0.037 (0.142)	Data 0.023 (0.115)	
[72/123]	Time 0.023 (0.141)	Data 0.001 (0.113)	
[73/123]	Time 0.029 (0.139)	Data 0.014 (0.112)	
[74/123]	Time 0.046 (0.138)	Data 0.018 (0.111)	
[75/123]	Time 0.037 (0.136)	Data 0.006 (0.109)	
[76/123]	Time 0.057 (0.135)	Data 0.034 (0.108)	
[77/123]	Time 0.216 (0.136)	Data 0.202 (0.110)	
[78/123]	Time 0.057 (0.135)	Data 0.010 (0.108)	
[79/123]	Time 0.029 (0.134)	Data 0.003 (0.107)	
[80/123]	Time 0.029 (0.133)	Data 0.015 (0.106)	
[81/123]	Time 0.028 (0.131)	Data 0.014 (0.105)	
[82/123]	Time 0.025 (0.130)	Data 0.011 (0.104)	
[83/123]	Time 0.073 (0.130)	Data 0.031 (0.103)	
[84/123]	Time 0.667 (0.136)	Data 0.652 (0.109)	
[85/123]	Time 0.034 (0.135)	Data 0.013 (0.108)	
[86/123]	Time 0.034 (0.134)	Data 0.007 (0.107)	
[87/123]	Time 0.020 (0.132)	Data 0.006 (0.106)	
[88/123]	Time 0.050 (0.131)	Data 0.029 (0.105)	
[89/123]	Time 0.045 (0.130)	Data 0.015 (0.104)	
[90/123]	Time 0.021 (0.129)	Data 0.006 (0.103)	
[91/123]	Time 0.028 (0.128)	Data 0.013 (0.102)	
[92/123]	Time 0.052 (0.127)	Data 0.031 (0.101)	
[93/123]	Time 0.030 (0.126)	Data 0.000 (0.100)	
[94/123]	Time 0.032 (0.125)	Data 0.001 (0.099)	
[95/123]	Time 0.028 (0.124)	Data 0.000 (0.098)	
[96/123]	Time 0.015 (0.123)	Data 0.000 (0.097)	
[97/123]	Time 0.038 (0.122)	Data 0.017 (0.096)	
[98/123]	Time 0.071 (0.122)	Data 0.056 (0.096)	
[99/123]	Time 0.033 (0.121)	Data 0.000 (0.095)	
[100/123]	Time 0.639 (0.126)	Data 0.624 (0.100)	
[101/123]	Time 0.023 (0.125)	Data 0.001 (0.099)	
[102/123]	Time 0.015 (0.124)	Data 0.001 (0.098)	
[103/123]	Time 0.014 (0.123)	Data 0.000 (0.097)	
[104/123]	Time 0.014 (0.122)	Data 0.000 (0.096)	
[105/123]	Time 0.015 (0.121)	Data 0.000 (0.095)	
[106/123]	Time 0.015 (0.120)	Data 0.000 (0.094)	
[107/123]	Time 0.015 (0.119)	Data 0.000 (0.093)	
[108/123]	Time 0.013 (0.118)	Data 0.000 (0.093)	
[109/123]	Time 0.013 (0.117)	Data 0.001 (0.092)	
[110/123]	Time 0.013 (0.116)	Data 0.000 (0.091)	
[111/123]	Time 0.014 (0.115)	Data 0.000 (0.090)	
[112/123]	Time 0.013 (0.114)	Data 0.000 (0.089)	
[113/123]	Time 0.013 (0.113)	Data 0.000 (0.088)	
[114/123]	Time 0.054 (0.113)	Data 0.040 (0.088)	
[115/123]	Time 0.013 (0.112)	Data 0.000 (0.087)	
[116/123]	Time 0.231 (0.113)	Data 0.219 (0.088)	
[117/123]	Time 0.012 (0.112)	Data 0.000 (0.088)	
[118/123]	Time 0.012 (0.111)	Data 0.000 (0.087)	
[119/123]	Time 0.013 (0.110)	Data 0.000 (0.086)	
[120/123]	Time 0.012 (0.109)	Data 0.000 (0.086)	
[121/123]	Time 0.054 (0.109)	Data 0.042 (0.085)	
[122/123]	Time 0.012 (0.108)	Data 0.000 (0.084)	
[123/123]	Time 0.012 (0.107)	Data 0.000 (0.084)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.01', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.612 (4.612)	Data 3.981 (3.981)	
[2/123]	Time 0.138 (2.375)	Data 0.074 (2.028)	
[3/123]	Time 0.018 (1.589)	Data 0.001 (1.352)	
[4/123]	Time 0.018 (1.197)	Data 0.001 (1.014)	
[5/123]	Time 0.018 (0.961)	Data 0.000 (0.811)	
[6/123]	Time 0.019 (0.804)	Data 0.000 (0.676)	
[7/123]	Time 0.019 (0.692)	Data 0.001 (0.580)	
[8/123]	Time 0.020 (0.608)	Data 0.001 (0.507)	
[9/123]	Time 0.026 (0.543)	Data 0.001 (0.451)	
[10/123]	Time 0.034 (0.492)	Data 0.001 (0.406)	
[11/123]	Time 0.037 (0.451)	Data 0.000 (0.369)	
[12/123]	Time 0.039 (0.416)	Data 0.001 (0.338)	
[13/123]	Time 0.057 (0.389)	Data 0.000 (0.312)	
[14/123]	Time 0.051 (0.365)	Data 0.001 (0.290)	
[15/123]	Time 0.043 (0.343)	Data 0.014 (0.272)	
[16/123]	Time 0.032 (0.324)	Data 0.002 (0.255)	
[17/123]	Time 0.056 (0.308)	Data 0.009 (0.240)	
[18/123]	Time 0.043 (0.293)	Data 0.001 (0.227)	
[19/123]	Time 0.058 (0.281)	Data 0.015 (0.216)	
[20/123]	Time 0.054 (0.269)	Data 0.013 (0.206)	
[21/123]	Time 0.041 (0.259)	Data 0.016 (0.197)	
[22/123]	Time 0.028 (0.248)	Data 0.001 (0.188)	
[23/123]	Time 0.028 (0.239)	Data 0.001 (0.180)	
[24/123]	Time 0.031 (0.230)	Data 0.005 (0.172)	
[25/123]	Time 0.033 (0.222)	Data 0.001 (0.166)	
[26/123]	Time 0.037 (0.215)	Data 0.005 (0.159)	
[27/123]	Time 0.091 (0.210)	Data 0.004 (0.154)	
[28/123]	Time 0.043 (0.204)	Data 0.001 (0.148)	
[29/123]	Time 0.076 (0.200)	Data 0.014 (0.144)	
[30/123]	Time 0.029 (0.194)	Data 0.001 (0.139)	
[31/123]	Time 0.048 (0.190)	Data 0.001 (0.134)	
[32/123]	Time 0.066 (0.186)	Data 0.016 (0.131)	
[33/123]	Time 0.049 (0.182)	Data 0.001 (0.127)	
[34/123]	Time 0.031 (0.177)	Data 0.001 (0.123)	
[35/123]	Time 0.230 (0.179)	Data 0.188 (0.125)	
[36/123]	Time 0.053 (0.175)	Data 0.011 (0.122)	
[37/123]	Time 0.057 (0.172)	Data 0.013 (0.119)	
[38/123]	Time 0.406 (0.178)	Data 0.365 (0.125)	
[39/123]	Time 0.055 (0.175)	Data 0.001 (0.122)	
[40/123]	Time 0.048 (0.172)	Data 0.001 (0.119)	
[41/123]	Time 0.072 (0.169)	Data 0.011 (0.116)	
[42/123]	Time 0.065 (0.167)	Data 0.006 (0.114)	
[43/123]	Time 0.063 (0.164)	Data 0.022 (0.112)	
[44/123]	Time 0.089 (0.163)	Data 0.024 (0.110)	
[45/123]	Time 0.060 (0.160)	Data 0.006 (0.107)	
[46/123]	Time 0.059 (0.158)	Data 0.001 (0.105)	
[47/123]	Time 0.076 (0.156)	Data 0.022 (0.103)	
[48/123]	Time 0.060 (0.154)	Data 0.001 (0.101)	
[49/123]	Time 0.039 (0.152)	Data 0.001 (0.099)	
[50/123]	Time 0.397 (0.157)	Data 0.355 (0.104)	
[51/123]	Time 0.093 (0.156)	Data 0.015 (0.102)	
[52/123]	Time 0.055 (0.154)	Data 0.014 (0.101)	
[53/123]	Time 0.047 (0.152)	Data 0.003 (0.099)	
[54/123]	Time 0.024 (0.149)	Data 0.001 (0.097)	
[55/123]	Time 0.045 (0.148)	Data 0.001 (0.095)	
[56/123]	Time 0.067 (0.146)	Data 0.001 (0.094)	
[57/123]	Time 0.043 (0.144)	Data 0.011 (0.092)	
[58/123]	Time 0.048 (0.143)	Data 0.007 (0.091)	
[59/123]	Time 0.051 (0.141)	Data 0.009 (0.089)	
[60/123]	Time 0.066 (0.140)	Data 0.006 (0.088)	
[61/123]	Time 0.047 (0.138)	Data 0.012 (0.087)	
[62/123]	Time 0.082 (0.137)	Data 0.014 (0.086)	
[63/123]	Time 0.656 (0.146)	Data 0.617 (0.094)	
[64/123]	Time 0.090 (0.145)	Data 0.046 (0.093)	
[65/123]	Time 0.051 (0.143)	Data 0.013 (0.092)	
[66/123]	Time 0.168 (0.144)	Data 0.118 (0.092)	
[67/123]	Time 0.081 (0.143)	Data 0.014 (0.091)	
[68/123]	Time 0.078 (0.142)	Data 0.013 (0.090)	
[69/123]	Time 0.056 (0.141)	Data 0.001 (0.089)	
[70/123]	Time 0.231 (0.142)	Data 0.171 (0.090)	
[71/123]	Time 0.048 (0.141)	Data 0.001 (0.089)	
[72/123]	Time 0.073 (0.140)	Data 0.017 (0.088)	
[73/123]	Time 0.042 (0.138)	Data 0.001 (0.087)	
[74/123]	Time 0.042 (0.137)	Data 0.001 (0.085)	
[75/123]	Time 0.040 (0.136)	Data 0.001 (0.084)	
[76/123]	Time 0.053 (0.135)	Data 0.011 (0.083)	
[77/123]	Time 0.037 (0.133)	Data 0.011 (0.082)	
[78/123]	Time 0.040 (0.132)	Data 0.001 (0.081)	
[79/123]	Time 0.475 (0.136)	Data 0.436 (0.086)	
[80/123]	Time 0.058 (0.135)	Data 0.001 (0.085)	
[81/123]	Time 0.071 (0.135)	Data 0.006 (0.084)	
[82/123]	Time 0.163 (0.135)	Data 0.136 (0.084)	
[83/123]	Time 0.080 (0.134)	Data 0.016 (0.084)	
[84/123]	Time 0.058 (0.133)	Data 0.001 (0.083)	
[85/123]	Time 0.067 (0.133)	Data 0.001 (0.082)	
[86/123]	Time 0.206 (0.133)	Data 0.145 (0.082)	
[87/123]	Time 0.044 (0.132)	Data 0.001 (0.081)	
[88/123]	Time 0.076 (0.132)	Data 0.001 (0.080)	
[89/123]	Time 0.042 (0.131)	Data 0.001 (0.080)	
[90/123]	Time 0.057 (0.130)	Data 0.011 (0.079)	
[91/123]	Time 0.078 (0.129)	Data 0.017 (0.078)	
[92/123]	Time 0.059 (0.129)	Data 0.000 (0.077)	
[93/123]	Time 0.059 (0.128)	Data 0.000 (0.076)	
[94/123]	Time 0.056 (0.127)	Data 0.001 (0.076)	
[95/123]	Time 0.581 (0.132)	Data 0.522 (0.080)	
[96/123]	Time 0.030 (0.131)	Data 0.000 (0.080)	
[97/123]	Time 0.080 (0.130)	Data 0.000 (0.079)	
[98/123]	Time 0.051 (0.130)	Data 0.000 (0.078)	
[99/123]	Time 0.054 (0.129)	Data 0.000 (0.077)	
[100/123]	Time 0.035 (0.128)	Data 0.001 (0.076)	
[101/123]	Time 0.060 (0.127)	Data 0.001 (0.076)	
[102/123]	Time 0.027 (0.126)	Data 0.000 (0.075)	
[103/123]	Time 0.031 (0.125)	Data 0.001 (0.074)	
[104/123]	Time 0.018 (0.124)	Data 0.000 (0.073)	
[105/123]	Time 0.028 (0.123)	Data 0.001 (0.073)	
[106/123]	Time 0.019 (0.122)	Data 0.000 (0.072)	
[107/123]	Time 0.019 (0.121)	Data 0.000 (0.071)	
[108/123]	Time 0.018 (0.120)	Data 0.000 (0.071)	
[109/123]	Time 0.019 (0.119)	Data 0.000 (0.070)	
[110/123]	Time 0.020 (0.119)	Data 0.000 (0.069)	
[111/123]	Time 0.263 (0.120)	Data 0.247 (0.071)	
[112/123]	Time 0.016 (0.119)	Data 0.000 (0.070)	
[113/123]	Time 0.016 (0.118)	Data 0.000 (0.070)	
[114/123]	Time 0.016 (0.117)	Data 0.000 (0.069)	
[115/123]	Time 0.016 (0.116)	Data 0.000 (0.069)	
[116/123]	Time 0.016 (0.115)	Data 0.000 (0.068)	
[117/123]	Time 0.016 (0.115)	Data 0.000 (0.067)	
[118/123]	Time 0.016 (0.114)	Data 0.000 (0.067)	
[119/123]	Time 0.016 (0.113)	Data 0.000 (0.066)	
[120/123]	Time 0.016 (0.112)	Data 0.000 (0.066)	
[121/123]	Time 0.016 (0.111)	Data 0.000 (0.065)	
[122/123]	Time 0.016 (0.110)	Data 0.000 (0.065)	
[123/123]	Time 0.016 (0.110)	Data 0.000 (0.064)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.001', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs8_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.247 (4.247)	Data 3.058 (3.058)	
[2/123]	Time 0.425 (2.336)	Data 0.410 (1.734)	
[3/123]	Time 0.014 (1.562)	Data 0.000 (1.156)	
[4/123]	Time 0.014 (1.175)	Data 0.001 (0.867)	
[5/123]	Time 0.015 (0.943)	Data 0.000 (0.694)	
[6/123]	Time 0.014 (0.788)	Data 0.000 (0.578)	
[7/123]	Time 0.015 (0.678)	Data 0.000 (0.496)	
[8/123]	Time 0.015 (0.595)	Data 0.001 (0.434)	
[9/123]	Time 0.015 (0.530)	Data 0.000 (0.386)	
[10/123]	Time 0.015 (0.479)	Data 0.001 (0.347)	
[11/123]	Time 0.015 (0.437)	Data 0.001 (0.316)	
[12/123]	Time 0.027 (0.403)	Data 0.001 (0.289)	
[13/123]	Time 0.016 (0.373)	Data 0.001 (0.267)	
[14/123]	Time 0.030 (0.348)	Data 0.001 (0.248)	
[15/123]	Time 0.015 (0.326)	Data 0.001 (0.232)	
[16/123]	Time 0.025 (0.307)	Data 0.001 (0.217)	
[17/123]	Time 0.028 (0.291)	Data 0.015 (0.205)	
[18/123]	Time 0.194 (0.286)	Data 0.180 (0.204)	
[19/123]	Time 0.054 (0.273)	Data 0.028 (0.195)	
[20/123]	Time 0.030 (0.261)	Data 0.001 (0.185)	
[21/123]	Time 0.014 (0.250)	Data 0.001 (0.176)	
[22/123]	Time 0.036 (0.240)	Data 0.022 (0.169)	
[23/123]	Time 0.029 (0.231)	Data 0.006 (0.162)	
[24/123]	Time 0.026 (0.222)	Data 0.003 (0.156)	
[25/123]	Time 0.025 (0.214)	Data 0.007 (0.150)	
[26/123]	Time 0.024 (0.207)	Data 0.001 (0.144)	
[27/123]	Time 0.021 (0.200)	Data 0.006 (0.139)	
[28/123]	Time 0.015 (0.193)	Data 0.001 (0.134)	
[29/123]	Time 0.014 (0.187)	Data 0.001 (0.129)	
[30/123]	Time 0.014 (0.181)	Data 0.001 (0.125)	
[31/123]	Time 0.014 (0.176)	Data 0.001 (0.121)	
[32/123]	Time 0.014 (0.171)	Data 0.001 (0.117)	
[33/123]	Time 0.023 (0.167)	Data 0.009 (0.114)	
[34/123]	Time 0.737 (0.183)	Data 0.723 (0.132)	
[35/123]	Time 0.027 (0.179)	Data 0.013 (0.128)	
[36/123]	Time 0.027 (0.175)	Data 0.001 (0.125)	
[37/123]	Time 0.045 (0.171)	Data 0.031 (0.122)	
[38/123]	Time 0.462 (0.179)	Data 0.414 (0.130)	
[39/123]	Time 0.029 (0.175)	Data 0.001 (0.127)	
[40/123]	Time 0.040 (0.172)	Data 0.001 (0.124)	
[41/123]	Time 0.049 (0.169)	Data 0.000 (0.121)	
[42/123]	Time 0.028 (0.165)	Data 0.000 (0.118)	
[43/123]	Time 0.014 (0.162)	Data 0.001 (0.115)	
[44/123]	Time 0.205 (0.163)	Data 0.181 (0.117)	
[45/123]	Time 0.048 (0.160)	Data 0.011 (0.114)	
[46/123]	Time 0.025 (0.157)	Data 0.011 (0.112)	
[47/123]	Time 0.021 (0.154)	Data 0.007 (0.110)	
[48/123]	Time 0.017 (0.151)	Data 0.002 (0.107)	
[49/123]	Time 0.031 (0.149)	Data 0.015 (0.106)	
[50/123]	Time 0.302 (0.152)	Data 0.271 (0.109)	
[51/123]	Time 0.582 (0.160)	Data 0.568 (0.118)	
[52/123]	Time 0.032 (0.158)	Data 0.017 (0.116)	
[53/123]	Time 0.031 (0.156)	Data 0.017 (0.114)	
[54/123]	Time 0.114 (0.155)	Data 0.097 (0.114)	
[55/123]	Time 0.259 (0.157)	Data 0.236 (0.116)	
[56/123]	Time 0.047 (0.155)	Data 0.017 (0.114)	
[57/123]	Time 0.020 (0.152)	Data 0.001 (0.112)	
[58/123]	Time 0.021 (0.150)	Data 0.006 (0.110)	
[59/123]	Time 0.043 (0.148)	Data 0.028 (0.109)	
[60/123]	Time 0.024 (0.146)	Data 0.009 (0.107)	
[61/123]	Time 0.036 (0.144)	Data 0.022 (0.106)	
[62/123]	Time 0.033 (0.143)	Data 0.013 (0.104)	
[63/123]	Time 0.032 (0.141)	Data 0.016 (0.103)	
[64/123]	Time 0.032 (0.139)	Data 0.017 (0.102)	
[65/123]	Time 0.042 (0.138)	Data 0.013 (0.100)	
[66/123]	Time 0.015 (0.136)	Data 0.001 (0.099)	
[67/123]	Time 0.765 (0.145)	Data 0.733 (0.108)	
[68/123]	Time 0.016 (0.143)	Data 0.001 (0.107)	
[69/123]	Time 0.028 (0.142)	Data 0.013 (0.105)	
[70/123]	Time 0.083 (0.141)	Data 0.030 (0.104)	
[71/123]	Time 0.016 (0.139)	Data 0.001 (0.103)	
[72/123]	Time 0.041 (0.138)	Data 0.014 (0.102)	
[73/123]	Time 0.020 (0.136)	Data 0.001 (0.100)	
[74/123]	Time 0.035 (0.135)	Data 0.003 (0.099)	
[75/123]	Time 0.015 (0.133)	Data 0.001 (0.098)	
[76/123]	Time 0.045 (0.132)	Data 0.017 (0.097)	
[77/123]	Time 0.018 (0.130)	Data 0.004 (0.095)	
[78/123]	Time 0.035 (0.129)	Data 0.014 (0.094)	
[79/123]	Time 0.033 (0.128)	Data 0.019 (0.093)	
[80/123]	Time 0.032 (0.127)	Data 0.017 (0.092)	
[81/123]	Time 0.029 (0.126)	Data 0.015 (0.091)	
[82/123]	Time 0.575 (0.131)	Data 0.552 (0.097)	
[83/123]	Time 0.355 (0.134)	Data 0.333 (0.100)	
[84/123]	Time 0.018 (0.132)	Data 0.001 (0.099)	
[85/123]	Time 0.034 (0.131)	Data 0.013 (0.098)	
[86/123]	Time 0.028 (0.130)	Data 0.001 (0.097)	
[87/123]	Time 0.098 (0.130)	Data 0.084 (0.096)	
[88/123]	Time 0.020 (0.128)	Data 0.006 (0.095)	
[89/123]	Time 0.037 (0.127)	Data 0.014 (0.094)	
[90/123]	Time 0.015 (0.126)	Data 0.001 (0.093)	
[91/123]	Time 0.031 (0.125)	Data 0.011 (0.093)	
[92/123]	Time 0.026 (0.124)	Data 0.001 (0.092)	
[93/123]	Time 0.023 (0.123)	Data 0.001 (0.091)	
[94/123]	Time 0.030 (0.122)	Data 0.005 (0.090)	
[95/123]	Time 0.038 (0.121)	Data 0.001 (0.089)	
[96/123]	Time 0.027 (0.120)	Data 0.000 (0.088)	
[97/123]	Time 0.015 (0.119)	Data 0.001 (0.087)	
[98/123]	Time 0.327 (0.121)	Data 0.313 (0.089)	
[99/123]	Time 0.579 (0.126)	Data 0.566 (0.094)	
[100/123]	Time 0.014 (0.125)	Data 0.001 (0.093)	
[101/123]	Time 0.025 (0.124)	Data 0.001 (0.092)	
[102/123]	Time 0.014 (0.123)	Data 0.001 (0.091)	
[103/123]	Time 0.016 (0.122)	Data 0.001 (0.090)	
[104/123]	Time 0.014 (0.121)	Data 0.000 (0.090)	
[105/123]	Time 0.013 (0.120)	Data 0.000 (0.089)	
[106/123]	Time 0.014 (0.119)	Data 0.000 (0.088)	
[107/123]	Time 0.014 (0.118)	Data 0.000 (0.087)	
[108/123]	Time 0.014 (0.117)	Data 0.000 (0.086)	
[109/123]	Time 0.014 (0.116)	Data 0.000 (0.085)	
[110/123]	Time 0.014 (0.115)	Data 0.000 (0.085)	
[111/123]	Time 0.014 (0.114)	Data 0.000 (0.084)	
[112/123]	Time 0.014 (0.113)	Data 0.000 (0.083)	
[113/123]	Time 0.013 (0.112)	Data 0.000 (0.082)	
[114/123]	Time 0.166 (0.113)	Data 0.153 (0.083)	
[115/123]	Time 0.264 (0.114)	Data 0.252 (0.085)	
[116/123]	Time 0.012 (0.113)	Data 0.000 (0.084)	
[117/123]	Time 0.012 (0.112)	Data 0.000 (0.083)	
[118/123]	Time 0.012 (0.111)	Data 0.000 (0.082)	
[119/123]	Time 0.012 (0.110)	Data 0.000 (0.082)	
[120/123]	Time 0.012 (0.110)	Data 0.000 (0.081)	
[121/123]	Time 0.012 (0.109)	Data 0.000 (0.080)	
[122/123]	Time 0.012 (0.108)	Data 0.000 (0.080)	
[123/123]	Time 0.012 (0.107)	Data 0.000 (0.079)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.001', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=8, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs8_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 5.124 (5.124)	Data 4.506 (4.506)	
[2/123]	Time 0.018 (2.571)	Data 0.000 (2.253)	
[3/123]	Time 0.017 (1.720)	Data 0.000 (1.502)	
[4/123]	Time 0.018 (1.294)	Data 0.000 (1.127)	
[5/123]	Time 0.018 (1.039)	Data 0.000 (0.901)	
[6/123]	Time 0.018 (0.869)	Data 0.001 (0.751)	
[7/123]	Time 0.019 (0.747)	Data 0.001 (0.644)	
[8/123]	Time 0.018 (0.656)	Data 0.000 (0.564)	
[9/123]	Time 0.018 (0.585)	Data 0.001 (0.501)	
[10/123]	Time 0.021 (0.529)	Data 0.000 (0.451)	
[11/123]	Time 0.023 (0.483)	Data 0.001 (0.410)	
[12/123]	Time 0.026 (0.445)	Data 0.001 (0.376)	
[13/123]	Time 0.023 (0.412)	Data 0.001 (0.347)	
[14/123]	Time 0.026 (0.385)	Data 0.001 (0.322)	
[15/123]	Time 0.024 (0.361)	Data 0.001 (0.301)	
[16/123]	Time 0.023 (0.340)	Data 0.001 (0.282)	
[17/123]	Time 0.055 (0.323)	Data 0.001 (0.266)	
[18/123]	Time 0.042 (0.307)	Data 0.001 (0.251)	
[19/123]	Time 0.057 (0.294)	Data 0.016 (0.238)	
[20/123]	Time 0.023 (0.281)	Data 0.001 (0.227)	
[21/123]	Time 0.024 (0.268)	Data 0.001 (0.216)	
[22/123]	Time 0.025 (0.257)	Data 0.001 (0.206)	
[23/123]	Time 0.025 (0.247)	Data 0.001 (0.197)	
[24/123]	Time 0.025 (0.238)	Data 0.001 (0.189)	
[25/123]	Time 0.046 (0.230)	Data 0.001 (0.181)	
[26/123]	Time 0.046 (0.223)	Data 0.006 (0.175)	
[27/123]	Time 0.060 (0.217)	Data 0.011 (0.169)	
[28/123]	Time 0.042 (0.211)	Data 0.015 (0.163)	
[29/123]	Time 0.026 (0.205)	Data 0.001 (0.158)	
[30/123]	Time 0.028 (0.199)	Data 0.001 (0.152)	
[31/123]	Time 0.024 (0.193)	Data 0.001 (0.147)	
[32/123]	Time 0.024 (0.188)	Data 0.001 (0.143)	
[33/123]	Time 0.051 (0.184)	Data 0.012 (0.139)	
[34/123]	Time 0.512 (0.193)	Data 0.486 (0.149)	
[35/123]	Time 0.061 (0.189)	Data 0.001 (0.145)	
[36/123]	Time 0.139 (0.188)	Data 0.093 (0.143)	
[37/123]	Time 0.058 (0.185)	Data 0.011 (0.140)	
[38/123]	Time 0.080 (0.182)	Data 0.000 (0.136)	
[39/123]	Time 0.067 (0.179)	Data 0.001 (0.133)	
[40/123]	Time 0.047 (0.176)	Data 0.001 (0.129)	
[41/123]	Time 0.060 (0.173)	Data 0.012 (0.127)	
[42/123]	Time 0.077 (0.170)	Data 0.019 (0.124)	
[43/123]	Time 0.083 (0.168)	Data 0.008 (0.121)	
[44/123]	Time 0.043 (0.166)	Data 0.001 (0.119)	
[45/123]	Time 0.068 (0.163)	Data 0.009 (0.116)	
[46/123]	Time 0.069 (0.161)	Data 0.017 (0.114)	
[47/123]	Time 0.042 (0.159)	Data 0.001 (0.112)	
[48/123]	Time 0.043 (0.156)	Data 0.001 (0.109)	
[49/123]	Time 0.041 (0.154)	Data 0.015 (0.107)	
[50/123]	Time 0.441 (0.160)	Data 0.391 (0.113)	
[51/123]	Time 0.114 (0.159)	Data 0.074 (0.112)	
[52/123]	Time 0.330 (0.162)	Data 0.287 (0.116)	
[53/123]	Time 0.047 (0.160)	Data 0.001 (0.113)	
[54/123]	Time 0.070 (0.158)	Data 0.029 (0.112)	
[55/123]	Time 0.053 (0.156)	Data 0.001 (0.110)	
[56/123]	Time 0.052 (0.155)	Data 0.012 (0.108)	
[57/123]	Time 0.037 (0.153)	Data 0.008 (0.106)	
[58/123]	Time 0.031 (0.150)	Data 0.001 (0.105)	
[59/123]	Time 0.060 (0.149)	Data 0.014 (0.103)	
[60/123]	Time 0.048 (0.147)	Data 0.014 (0.101)	
[61/123]	Time 0.061 (0.146)	Data 0.001 (0.100)	
[62/123]	Time 0.202 (0.147)	Data 0.174 (0.101)	
[63/123]	Time 0.026 (0.145)	Data 0.001 (0.099)	
[64/123]	Time 0.030 (0.143)	Data 0.004 (0.098)	
[65/123]	Time 0.054 (0.142)	Data 0.016 (0.097)	
[66/123]	Time 0.590 (0.148)	Data 0.542 (0.103)	
[67/123]	Time 0.198 (0.149)	Data 0.153 (0.104)	
[68/123]	Time 0.061 (0.148)	Data 0.014 (0.103)	
[69/123]	Time 0.074 (0.147)	Data 0.014 (0.102)	
[70/123]	Time 0.051 (0.145)	Data 0.012 (0.100)	
[71/123]	Time 0.042 (0.144)	Data 0.015 (0.099)	
[72/123]	Time 0.048 (0.143)	Data 0.005 (0.098)	
[73/123]	Time 0.051 (0.141)	Data 0.012 (0.097)	
[74/123]	Time 0.056 (0.140)	Data 0.010 (0.095)	
[75/123]	Time 0.068 (0.139)	Data 0.016 (0.094)	
[76/123]	Time 0.060 (0.138)	Data 0.000 (0.093)	
[77/123]	Time 0.049 (0.137)	Data 0.006 (0.092)	
[78/123]	Time 0.045 (0.136)	Data 0.001 (0.091)	
[79/123]	Time 0.578 (0.141)	Data 0.552 (0.097)	
[80/123]	Time 0.057 (0.140)	Data 0.012 (0.096)	
[81/123]	Time 0.092 (0.140)	Data 0.032 (0.095)	
[82/123]	Time 0.356 (0.142)	Data 0.311 (0.097)	
[83/123]	Time 0.061 (0.141)	Data 0.016 (0.096)	
[84/123]	Time 0.072 (0.141)	Data 0.019 (0.096)	
[85/123]	Time 0.047 (0.140)	Data 0.001 (0.094)	
[86/123]	Time 0.053 (0.139)	Data 0.012 (0.093)	
[87/123]	Time 0.022 (0.137)	Data 0.001 (0.092)	
[88/123]	Time 0.026 (0.136)	Data 0.001 (0.091)	
[89/123]	Time 0.025 (0.135)	Data 0.001 (0.090)	
[90/123]	Time 0.030 (0.134)	Data 0.001 (0.089)	
[91/123]	Time 0.048 (0.133)	Data 0.004 (0.088)	
[92/123]	Time 0.052 (0.132)	Data 0.000 (0.087)	
[93/123]	Time 0.077 (0.131)	Data 0.000 (0.087)	
[94/123]	Time 0.038 (0.130)	Data 0.001 (0.086)	
[95/123]	Time 0.531 (0.134)	Data 0.490 (0.090)	
[96/123]	Time 0.063 (0.134)	Data 0.001 (0.089)	
[97/123]	Time 0.057 (0.133)	Data 0.001 (0.088)	
[98/123]	Time 0.079 (0.132)	Data 0.007 (0.087)	
[99/123]	Time 0.103 (0.132)	Data 0.054 (0.087)	
[100/123]	Time 0.027 (0.131)	Data 0.000 (0.086)	
[101/123]	Time 0.038 (0.130)	Data 0.000 (0.085)	
[102/123]	Time 0.023 (0.129)	Data 0.000 (0.084)	
[103/123]	Time 0.018 (0.128)	Data 0.000 (0.084)	
[104/123]	Time 0.031 (0.127)	Data 0.000 (0.083)	
[105/123]	Time 0.023 (0.126)	Data 0.001 (0.082)	
[106/123]	Time 0.026 (0.125)	Data 0.000 (0.081)	
[107/123]	Time 0.028 (0.124)	Data 0.000 (0.080)	
[108/123]	Time 0.026 (0.123)	Data 0.000 (0.080)	
[109/123]	Time 0.023 (0.122)	Data 0.001 (0.079)	
[110/123]	Time 0.024 (0.121)	Data 0.000 (0.078)	
[111/123]	Time 0.226 (0.122)	Data 0.210 (0.079)	
[112/123]	Time 0.016 (0.121)	Data 0.000 (0.079)	
[113/123]	Time 0.016 (0.120)	Data 0.000 (0.078)	
[114/123]	Time 0.016 (0.120)	Data 0.000 (0.077)	
[115/123]	Time 0.081 (0.119)	Data 0.065 (0.077)	
[116/123]	Time 0.016 (0.118)	Data 0.000 (0.077)	
[117/123]	Time 0.016 (0.117)	Data 0.000 (0.076)	
[118/123]	Time 0.016 (0.117)	Data 0.000 (0.075)	
[119/123]	Time 0.016 (0.116)	Data 0.000 (0.075)	
[120/123]	Time 0.016 (0.115)	Data 0.000 (0.074)	
[121/123]	Time 0.016 (0.114)	Data 0.000 (0.073)	
[122/123]	Time 0.016 (0.113)	Data 0.000 (0.073)	
[123/123]	Time 0.016 (0.112)	Data 0.000 (0.072)	
end bs8
start bs16
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.1', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 5.121 (5.121)	Data 4.399 (4.399)	
[2/123]	Time 0.014 (2.568)	Data 0.000 (2.200)	
[3/123]	Time 0.014 (1.716)	Data 0.000 (1.467)	
[4/123]	Time 0.014 (1.291)	Data 0.000 (1.100)	
[5/123]	Time 0.014 (1.036)	Data 0.000 (0.880)	
[6/123]	Time 0.014 (0.865)	Data 0.000 (0.733)	
[7/123]	Time 0.015 (0.744)	Data 0.001 (0.629)	
[8/123]	Time 0.014 (0.653)	Data 0.000 (0.550)	
[9/123]	Time 0.014 (0.582)	Data 0.001 (0.489)	
[10/123]	Time 0.014 (0.525)	Data 0.000 (0.440)	
[11/123]	Time 0.018 (0.479)	Data 0.003 (0.401)	
[12/123]	Time 0.015 (0.440)	Data 0.001 (0.367)	
[13/123]	Time 0.019 (0.408)	Data 0.000 (0.339)	
[14/123]	Time 0.015 (0.380)	Data 0.001 (0.315)	
[15/123]	Time 0.015 (0.355)	Data 0.001 (0.294)	
[16/123]	Time 0.020 (0.334)	Data 0.004 (0.276)	
[17/123]	Time 0.015 (0.316)	Data 0.001 (0.260)	
[18/123]	Time 0.015 (0.299)	Data 0.001 (0.245)	
[19/123]	Time 0.014 (0.284)	Data 0.000 (0.232)	
[20/123]	Time 0.015 (0.270)	Data 0.001 (0.221)	
[21/123]	Time 0.015 (0.258)	Data 0.001 (0.210)	
[22/123]	Time 0.020 (0.247)	Data 0.001 (0.201)	
[23/123]	Time 0.014 (0.237)	Data 0.001 (0.192)	
[24/123]	Time 0.014 (0.228)	Data 0.001 (0.184)	
[25/123]	Time 0.015 (0.220)	Data 0.001 (0.177)	
[26/123]	Time 0.017 (0.212)	Data 0.001 (0.170)	
[27/123]	Time 0.014 (0.204)	Data 0.001 (0.164)	
[28/123]	Time 0.014 (0.198)	Data 0.001 (0.158)	
[29/123]	Time 0.015 (0.191)	Data 0.001 (0.153)	
[30/123]	Time 0.014 (0.185)	Data 0.001 (0.147)	
[31/123]	Time 0.019 (0.180)	Data 0.004 (0.143)	
[32/123]	Time 0.015 (0.175)	Data 0.001 (0.138)	
[33/123]	Time 0.015 (0.170)	Data 0.001 (0.134)	
[34/123]	Time 1.183 (0.200)	Data 1.154 (0.164)	
[35/123]	Time 0.015 (0.195)	Data 0.001 (0.160)	
[36/123]	Time 0.052 (0.191)	Data 0.039 (0.156)	
[37/123]	Time 0.015 (0.186)	Data 0.001 (0.152)	
[38/123]	Time 0.053 (0.182)	Data 0.017 (0.148)	
[39/123]	Time 0.016 (0.178)	Data 0.002 (0.145)	
[40/123]	Time 0.030 (0.174)	Data 0.016 (0.141)	
[41/123]	Time 0.041 (0.171)	Data 0.012 (0.138)	
[42/123]	Time 0.258 (0.173)	Data 0.244 (0.141)	
[43/123]	Time 0.015 (0.170)	Data 0.001 (0.138)	
[44/123]	Time 0.015 (0.166)	Data 0.001 (0.134)	
[45/123]	Time 0.015 (0.163)	Data 0.001 (0.132)	
[46/123]	Time 0.031 (0.160)	Data 0.017 (0.129)	
[47/123]	Time 0.317 (0.163)	Data 0.302 (0.133)	
[48/123]	Time 0.101 (0.162)	Data 0.086 (0.132)	
[49/123]	Time 0.028 (0.159)	Data 0.013 (0.129)	
[50/123]	Time 1.054 (0.177)	Data 1.039 (0.148)	
[51/123]	Time 0.016 (0.174)	Data 0.001 (0.145)	
[52/123]	Time 0.041 (0.171)	Data 0.015 (0.142)	
[53/123]	Time 0.045 (0.169)	Data 0.007 (0.140)	
[54/123]	Time 0.034 (0.166)	Data 0.001 (0.137)	
[55/123]	Time 0.019 (0.164)	Data 0.001 (0.135)	
[56/123]	Time 0.037 (0.161)	Data 0.001 (0.132)	
[57/123]	Time 0.027 (0.159)	Data 0.001 (0.130)	
[58/123]	Time 0.027 (0.157)	Data 0.013 (0.128)	
[59/123]	Time 0.052 (0.155)	Data 0.009 (0.126)	
[60/123]	Time 0.025 (0.153)	Data 0.010 (0.124)	
[61/123]	Time 0.039 (0.151)	Data 0.002 (0.122)	
[62/123]	Time 0.025 (0.149)	Data 0.003 (0.120)	
[63/123]	Time 0.129 (0.149)	Data 0.104 (0.120)	
[64/123]	Time 0.016 (0.147)	Data 0.001 (0.118)	
[65/123]	Time 0.052 (0.145)	Data 0.001 (0.116)	
[66/123]	Time 0.675 (0.153)	Data 0.660 (0.124)	
[67/123]	Time 0.015 (0.151)	Data 0.001 (0.123)	
[68/123]	Time 0.015 (0.149)	Data 0.001 (0.121)	
[69/123]	Time 0.016 (0.147)	Data 0.001 (0.119)	
[70/123]	Time 0.044 (0.146)	Data 0.011 (0.117)	
[71/123]	Time 0.015 (0.144)	Data 0.001 (0.116)	
[72/123]	Time 0.037 (0.142)	Data 0.009 (0.114)	
[73/123]	Time 0.015 (0.141)	Data 0.001 (0.113)	
[74/123]	Time 0.596 (0.147)	Data 0.581 (0.119)	
[75/123]	Time 0.020 (0.145)	Data 0.002 (0.118)	
[76/123]	Time 0.026 (0.144)	Data 0.001 (0.116)	
[77/123]	Time 0.029 (0.142)	Data 0.014 (0.115)	
[78/123]	Time 0.032 (0.141)	Data 0.017 (0.113)	
[79/123]	Time 0.040 (0.139)	Data 0.013 (0.112)	
[80/123]	Time 0.016 (0.138)	Data 0.001 (0.111)	
[81/123]	Time 0.046 (0.137)	Data 0.014 (0.110)	
[82/123]	Time 0.203 (0.137)	Data 0.189 (0.111)	
[83/123]	Time 0.037 (0.136)	Data 0.005 (0.109)	Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 5.121 (5.121)	Data 4.399 (4.399)	
[2/123]	Time 0.014 (2.568)	Data 0.000 (2.200)	
[3/123]	Time 0.014 (1.716)	Data 0.000 (1.467)	
[4/123]	Time 0.014 (1.291)	Data 0.000 (1.100)	
[5/123]	Time 0.014 (1.036)	Data 0.000 (0.880)	
[6/123]	Time 0.014 (0.865)	Data 0.000 (0.733)	
[7/123]	Time 0.015 (0.744)	Data 0.001 (0.629)	
[8/123]	Time 0.014 (0.653)	Data 0.000 (0.550)	
[9/123]	Time 0.014 (0.582)	Data 0.001 (0.489)	
[10/123]	Time 0.014 (0.525)	Data 0.000 (0.440)	
[11/123]	Time 0.018 (0.479)	Data 0.003 (0.401)	
[12/123]	Time 0.015 (0.440)	Data 0.001 (0.367)	
[13/123]	Time 0.019 (0.408)	Data 0.000 (0.339)	
[14/123]	Time 0.015 (0.380)	Data 0.001 (0.315)	
[15/123]	Time 0.015 (0.355)	Data 0.001 (0.294)	
[16/123]	Time 0.020 (0.334)	Data 0.004 (0.276)	
[17/123]	Time 0.015 (0.316)	Data 0.001 (0.260)	
[18/123]	Time 0.015 (0.299)	Data 0.001 (0.245)	
[19/123]	Time 0.014 (0.284)	Data 0.000 (0.232)	
[20/123]	Time 0.015 (0.270)	Data 0.001 (0.221)	
[21/123]	Time 0.015 (0.258)	Data 0.001 (0.210)	
[22/123]	Time 0.020 (0.247)	Data 0.001 (0.201)	
[23/123]	Time 0.014 (0.237)	Data 0.001 (0.192)	
[24/123]	Time 0.014 (0.228)	Data 0.001 (0.184)	
[25/123]	Time 0.015 (0.220)	Data 0.001 (0.177)	
[26/123]	Time 0.017 (0.212)	Data 0.001 (0.170)	
[27/123]	Time 0.014 (0.204)	Data 0.001 (0.164)	
[28/123]	Time 0.014 (0.198)	Data 0.001 (0.158)	
[29/123]	Time 0.015 (0.191)	Data 0.001 (0.153)	
[30/123]	Time 0.014 (0.185)	Data 0.001 (0.147)	
[31/123]	Time 0.019 (0.180)	Data 0.004 (0.143)	
[32/123]	Time 0.015 (0.175)	Data 0.001 (0.138)	
[33/123]	Time 0.015 (0.170)	Data 0.001 (0.134)	
[34/123]	Time 1.183 (0.200)	Data 1.154 (0.164)	
[35/123]	Time 0.015 (0.195)	Data 0.001 (0.160)	
[36/123]	Time 0.052 (0.191)	Data 0.039 (0.156)	
[37/123]	Time 0.015 (0.186)	Data 0.001 (0.152)	
[38/123]	Time 0.053 (0.182)	Data 0.017 (0.148)	
[39/123]	Time 0.016 (0.178)	Data 0.002 (0.145)	
[40/123]	Time 0.030 (0.174)	Data 0.016 (0.141)	
[41/123]	Time 0.041 (0.171)	Data 0.012 (0.138)	
[42/123]	Time 0.258 (0.173)	Data 0.244 (0.141)	
[43/123]	Time 0.015 (0.170)	Data 0.001 (0.138)	
[44/123]	Time 0.015 (0.166)	Data 0.001 (0.134)	
[45/123]	Time 0.015 (0.163)	Data 0.001 (0.132)	
[46/123]	Time 0.031 (0.160)	Data 0.017 (0.129)	
[47/123]	Time 0.317 (0.163)	Data 0.302 (0.133)	
[48/123]	Time 0.101 (0.162)	Data 0.086 (0.132)	
[49/123]	Time 0.028 (0.159)	Data 0.013 (0.129)	
[50/123]	Time 1.054 (0.177)	Data 1.039 (0.148)	
[51/123]	Time 0.016 (0.174)	Data 0.001 (0.145)	
[52/123]	Time 0.041 (0.171)	Data 0.015 (0.142)	
[53/123]	Time 0.045 (0.169)	Data 0.007 (0.140)	
[54/123]	Time 0.034 (0.166)	Data 0.001 (0.137)	
[55/123]	Time 0.019 (0.164)	Data 0.001 (0.135)	
[56/123]	Time 0.037 (0.161)	Data 0.001 (0.132)	
[57/123]	Time 0.027 (0.159)	Data 0.001 (0.130)	
[58/123]	Time 0.027 (0.157)	Data 0.013 (0.128)	
[59/123]	Time 0.052 (0.155)	Data 0.009 (0.126)	
[60/123]	Time 0.025 (0.153)	Data 0.010 (0.124)	
[61/123]	Time 0.039 (0.151)	Data 0.002 (0.122)	
[62/123]	Time 0.025 (0.149)	Data 0.003 (0.120)	
[63/123]	Time 0.129 (0.149)	Data 0.104 (0.120)	
[64/123]	Time 0.016 (0.147)	Data 0.001 (0.118)	
[65/123]	Time 0.052 (0.145)	Data 0.001 (0.116)	
[66/123]	Time 0.675 (0.153)	Data 0.660 (0.124)	
[67/123]	Time 0.015 (0.151)	Data 0.001 (0.123)	
[68/123]	Time 0.015 (0.149)	Data 0.001 (0.121)	
[69/123]	Time 0.016 (0.147)	Data 0.001 (0.119)	
[70/123]	Time 0.044 (0.146)	Data 0.011 (0.117)	
[71/123]	Time 0.015 (0.144)	Data 0.001 (0.116)	
[72/123]	Time 0.037 (0.142)	Data 0.009 (0.114)	
[73/123]	Time 0.015 (0.141)	Data 0.001 (0.113)	
[74/123]	Time 0.596 (0.147)	Data 0.581 (0.119)	
[75/123]	Time 0.020 (0.145)	Data 0.002 (0.118)	
[76/123]	Time 0.026 (0.144)	Data 0.001 (0.116)	
[77/123]	Time 0.029 (0.142)	Data 0.014 (0.115)	
[78/123]	Time 0.032 (0.141)	Data 0.017 (0.113)	
[79/123]	Time 0.040 (0.139)	Data 0.013 (0.112)	
[80/123]	Time 0.016 (0.138)	Data 0.001 (0.111)	
[81/123]	Time 0.046 (0.137)	Data 0.014 (0.110)	
[82/123]	Time 0.203 (0.137)	Data 0.189 (0.111)	
[83/123]	Time 0.037 (0.136)	Data 0.005 (0.109)	
[84/123]	Time 0.025 (0.135)	Data 0.006 (0.108)	
[85/123]	Time 0.021 (0.134)	Data 0.002 (0.107)	
[86/123]	Time 0.028 (0.132)	Data 0.014 (0.106)	
[87/123]	Time 0.029 (0.131)	Data 0.014 (0.105)	
[88/123]	Time 0.027 (0.130)	Data 0.013 (0.104)	
[89/123]	Time 0.035 (0.129)	Data 0.011 (0.103)	
[90/123]	Time 1.204 (0.141)	Data 1.189 (0.115)	
[91/123]	Time 0.014 (0.139)	Data 0.000 (0.113)	
[92/123]	Time 0.015 (0.138)	Data 0.001 (0.112)	
[93/123]	Time 0.015 (0.137)	Data 0.000 (0.111)	
[94/123]	Time 0.015 (0.136)	Data 0.001 (0.110)	
[95/123]	Time 0.015 (0.134)	Data 0.000 (0.109)	
[96/123]	Time 0.015 (0.133)	Data 0.001 (0.108)	
[97/123]	Time 0.025 (0.132)	Data 0.000 (0.106)	
[98/123]	Time 0.249 (0.133)	Data 0.236 (0.108)	
[99/123]	Time 0.016 (0.132)	Data 0.000 (0.107)	
[100/123]	Time 0.014 (0.131)	Data 0.000 (0.106)	
[101/123]	Time 0.021 (0.130)	Data 0.001 (0.105)	
[102/123]	Time 0.014 (0.129)	Data 0.001 (0.104)	
[103/123]	Time 0.014 (0.127)	Data 0.000 (0.103)	
[104/123]	Time 0.013 (0.126)	Data 0.000 (0.102)	
[105/123]	Time 0.014 (0.125)	Data 0.000 (0.101)	
[106/123]	Time 0.205 (0.126)	Data 0.192 (0.101)	
[107/123]	Time 0.014 (0.125)	Data 0.001 (0.100)	
[108/123]	Time 0.014 (0.124)	Data 0.001 (0.100)	
[109/123]	Time 0.014 (0.123)	Data 0.000 (0.099)	
[110/123]	Time 0.014 (0.122)	Data 0.000 (0.098)	
[111/123]	Time 0.013 (0.121)	Data 0.000 (0.097)	
[112/123]	Time 0.014 (0.120)	Data 0.001 (0.096)	
[113/123]	Time 0.014 (0.119)	Data 0.000 (0.095)	
[114/123]	Time 0.072 (0.119)	Data 0.059 (0.095)	
[115/123]	Time 0.020 (0.118)	Data 0.007 (0.094)	
[116/123]	Time 0.013 (0.117)	Data 0.000 (0.093)	
[117/123]	Time 0.013 (0.116)	Data 0.000 (0.092)	
[118/123]	Time 0.012 (0.115)	Data 0.000 (0.092)	
[119/123]	Time 0.013 (0.114)	Data 0.000 (0.091)	
[120/123]	Time 0.013 (0.113)	Data 0.000 (0.090)	
[121/123]	Time 0.013 (0.113)	Data 0.000 (0.089)	
[122/123]	Time 0.210 (0.113)	Data 0.197 (0.090)	
[123/123]	Time 0.012 (0.113)	Data 0.000 (0.090)	
[92/123]	Time 0.015 (0.138)	Data 0.001 (0.112)	
[93/123]	Time 0.015 (0.137)	Data 0.000 (0.111)	
[94/123]	Time 0.015 (0.136)	Data 0.001 (0.110)	
[95/123]	Time 0.015 (0.134)	Data 0.000 (0.109)	
[96/123]	Time 0.015 (0.133)	Data 0.001 (0.108)	
[97/123]	Time 0.025 (0.132)	Data 0.000 (0.106)	
[98/123]	Time 0.249 (0.133)	Data 0.236 (0.108)	
[99/123]	Time 0.016 (0.132)	Data 0.000 (0.107)	
[100/123]	Time 0.014 (0.131)	Data 0.000 (0.106)	
[101/123]	Time 0.021 (0.130)	Data 0.001 (0.105)	
[102/123]	Time 0.014 (0.129)	Data 0.001 (0.104)	
[103/123]	Time 0.014 (0.127)	Data 0.000 (0.103)	
[104/123]	Time 0.013 (0.126)	Data 0.000 (0.102)	
[105/123]	Time 0.014 (0.125)	Data 0.000 (0.101)	
[106/123]	Time 0.205 (0.126)	Data 0.192 (0.101)	
[107/123]	Time 0.014 (0.125)	Data 0.001 (0.100)	
[108/123]	Time 0.014 (0.124)	Data 0.001 (0.100)	
[109/123]	Time 0.014 (0.123)	Data 0.000 (0.099)	
[110/123]	Time 0.014 (0.122)	Data 0.000 (0.098)	
[111/123]	Time 0.013 (0.121)	Data 0.000 (0.097)	
[112/123]	Time 0.014 (0.120)	Data 0.001 (0.096)	
[113/123]	Time 0.014 (0.119)	Data 0.000 (0.095)	
[114/123]	Time 0.072 (0.119)	Data 0.059 (0.095)	
[115/123]	Time 0.020 (0.118)	Data 0.007 (0.094)	
[116/123]	Time 0.013 (0.117)	Data 0.000 (0.093)	
[117/123]	Time 0.013 (0.116)	Data 0.000 (0.092)	
[118/123]	Time 0.012 (0.115)	Data 0.000 (0.092)	
[119/123]	Time 0.013 (0.114)	Data 0.000 (0.091)	
[120/123]	Time 0.013 (0.113)	Data 0.000 (0.090)	
[121/123]	Time 0.013 (0.113)	Data 0.000 (0.089)	
[122/123]	Time 0.210 (0.113)	Data 0.197 (0.090)	
[123/123]	Time 0.012 (0.113)	Data 0.000 (0.090)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.1', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.340 (4.340)	Data 3.520 (3.520)	
[2/123]	Time 0.021 (2.181)	Data 0.000 (1.760)	
[3/123]	Time 0.017 (1.460)	Data 0.000 (1.173)	
[4/123]	Time 0.553 (1.233)	Data 0.535 (1.014)	
[5/123]	Time 0.018 (0.990)	Data 0.000 (0.811)	
[6/123]	Time 0.018 (0.828)	Data 0.000 (0.676)	
[7/123]	Time 0.018 (0.712)	Data 0.000 (0.579)	
[8/123]	Time 0.019 (0.625)	Data 0.001 (0.507)	
[9/123]	Time 0.020 (0.558)	Data 0.001 (0.451)	
[10/123]	Time 0.025 (0.505)	Data 0.001 (0.406)	
[11/123]	Time 0.022 (0.461)	Data 0.000 (0.369)	
[12/123]	Time 0.026 (0.425)	Data 0.001 (0.338)	
[13/123]	Time 0.026 (0.394)	Data 0.001 (0.312)	
[14/123]	Time 0.042 (0.369)	Data 0.001 (0.290)	
[15/123]	Time 0.053 (0.348)	Data 0.014 (0.272)	
[16/123]	Time 0.047 (0.329)	Data 0.005 (0.255)	
[17/123]	Time 0.077 (0.314)	Data 0.014 (0.241)	
[18/123]	Time 0.041 (0.299)	Data 0.001 (0.228)	
[19/123]	Time 0.063 (0.287)	Data 0.024 (0.217)	
[20/123]	Time 0.042 (0.274)	Data 0.001 (0.206)	
[21/123]	Time 0.026 (0.263)	Data 0.001 (0.196)	
[22/123]	Time 0.048 (0.253)	Data 0.001 (0.187)	
[23/123]	Time 0.051 (0.244)	Data 0.006 (0.179)	
[24/123]	Time 0.040 (0.235)	Data 0.015 (0.173)	
[25/123]	Time 0.025 (0.227)	Data 0.001 (0.166)	
[26/123]	Time 0.028 (0.219)	Data 0.001 (0.159)	
[27/123]	Time 0.047 (0.213)	Data 0.001 (0.154)	
[28/123]	Time 0.030 (0.206)	Data 0.001 (0.148)	
[29/123]	Time 0.032 (0.200)	Data 0.001 (0.143)	
[30/123]	Time 0.030 (0.195)	Data 0.001 (0.138)	
[31/123]	Time 0.043 (0.190)	Data 0.001 (0.134)	
[32/123]	Time 0.051 (0.186)	Data 0.000 (0.130)	
[33/123]	Time 0.057 (0.182)	Data 0.013 (0.126)	
[34/123]	Time 0.043 (0.178)	Data 0.000 (0.122)	
[35/123]	Time 0.068 (0.174)	Data 0.026 (0.120)	
[36/123]	Time 0.104 (0.172)	Data 0.049 (0.118)	
[37/123]	Time 0.188 (0.173)	Data 0.146 (0.119)	
[38/123]	Time 0.435 (0.180)	Data 0.374 (0.125)	
[39/123]	Time 0.058 (0.177)	Data 0.000 (0.122)	
[40/123]	Time 0.059 (0.174)	Data 0.006 (0.119)	
[41/123]	Time 0.023 (0.170)	Data 0.001 (0.116)	
[42/123]	Time 0.036 (0.167)	Data 0.001 (0.113)	
[43/123]	Time 0.049 (0.164)	Data 0.001 (0.111)	
[44/123]	Time 0.050 (0.162)	Data 0.006 (0.108)	
[45/123]	Time 0.046 (0.159)	Data 0.007 (0.106)	
[46/123]	Time 0.071 (0.157)	Data 0.011 (0.104)	
[47/123]	Time 0.043 (0.155)	Data 0.001 (0.102)	
[48/123]	Time 0.057 (0.153)	Data 0.006 (0.100)	
[49/123]	Time 0.044 (0.150)	Data 0.001 (0.098)	
[50/123]	Time 0.051 (0.148)	Data 0.011 (0.096)	
[51/123]	Time 0.050 (0.146)	Data 0.011 (0.095)	
[52/123]	Time 0.288 (0.149)	Data 0.244 (0.097)	
[53/123]	Time 0.825 (0.162)	Data 0.781 (0.110)	
[54/123]	Time 0.072 (0.160)	Data 0.015 (0.109)	
[55/123]	Time 0.056 (0.158)	Data 0.001 (0.107)	
[56/123]	Time 0.042 (0.156)	Data 0.001 (0.105)	
[57/123]	Time 0.055 (0.155)	Data 0.010 (0.103)	
[58/123]	Time 0.059 (0.153)	Data 0.001 (0.101)	
[59/123]	Time 0.026 (0.151)	Data 0.001 (0.100)	
[60/123]	Time 0.065 (0.149)	Data 0.021 (0.098)	
[61/123]	Time 0.056 (0.148)	Data 0.015 (0.097)	
[62/123]	Time 0.053 (0.146)	Data 0.004 (0.095)	
[63/123]	Time 0.056 (0.145)	Data 0.006 (0.094)	
[64/123]	Time 0.048 (0.143)	Data 0.006 (0.093)	
[65/123]	Time 0.056 (0.142)	Data 0.014 (0.091)	
[66/123]	Time 0.066 (0.141)	Data 0.018 (0.090)	
[67/123]	Time 0.072 (0.140)	Data 0.016 (0.089)	
[68/123]	Time 0.138 (0.140)	Data 0.073 (0.089)	
[69/123]	Time 0.988 (0.152)	Data 0.948 (0.101)	
[70/123]	Time 0.054 (0.151)	Data 0.001 (0.100)	
[71/123]	Time 0.070 (0.150)	Data 0.001 (0.099)	
[72/123]	Time 0.052 (0.148)	Data 0.011 (0.097)	
[73/123]	Time 0.041 (0.147)	Data 0.000 (0.096)	
[74/123]	Time 0.038 (0.145)	Data 0.001 (0.095)	
[75/123]	Time 0.028 (0.144)	Data 0.001 (0.093)	
[76/123]	Time 0.042 (0.142)	Data 0.001 (0.092)	
[77/123]	Time 0.046 (0.141)	Data 0.001 (0.091)	
[78/123]	Time 0.028 (0.140)	Data 0.001 (0.090)	
[79/123]	Time 0.032 (0.138)	Data 0.001 (0.089)	
[80/123]	Time 0.031 (0.137)	Data 0.004 (0.088)	
[81/123]	Time 0.066 (0.136)	Data 0.009 (0.087)	
[82/123]	Time 0.103 (0.136)	Data 0.077 (0.087)	
[83/123]	Time 0.070 (0.135)	Data 0.029 (0.086)	
[84/123]	Time 0.040 (0.134)	Data 0.001 (0.085)	
[85/123]	Time 0.419 (0.137)	Data 0.382 (0.088)	
[86/123]	Time 0.054 (0.136)	Data 0.015 (0.088)	
[87/123]	Time 0.048 (0.135)	Data 0.001 (0.087)	
[88/123]	Time 0.057 (0.134)	Data 0.013 (0.086)	
[89/123]	Time 0.069 (0.133)	Data 0.005 (0.085)	
[90/123]	Time 0.042 (0.132)	Data 0.004 (0.084)	
[91/123]	Time 0.072 (0.132)	Data 0.019 (0.083)	
[92/123]	Time 0.053 (0.131)	Data 0.001 (0.082)	
[93/123]	Time 0.041 (0.130)	Data 0.000 (0.081)	
[94/123]	Time 0.049 (0.129)	Data 0.010 (0.081)	
[95/123]	Time 0.060 (0.128)	Data 0.000 (0.080)	
[96/123]	Time 0.063 (0.128)	Data 0.000 (0.079)	
[97/123]	Time 0.063 (0.127)	Data 0.000 (0.078)	
[98/123]	Time 0.453 (0.130)	Data 0.427 (0.082)	
[99/123]	Time 0.049 (0.130)	Data 0.000 (0.081)	
[100/123]	Time 0.037 (0.129)	Data 0.001 (0.080)	
[101/123]	Time 0.160 (0.129)	Data 0.118 (0.080)	
[102/123]	Time 0.024 (0.128)	Data 0.001 (0.080)	
[103/123]	Time 0.029 (0.127)	Data 0.000 (0.079)	
[104/123]	Time 0.028 (0.126)	Data 0.001 (0.078)	
[105/123]	Time 0.018 (0.125)	Data 0.000 (0.077)	
[106/123]	Time 0.018 (0.124)	Data 0.000 (0.077)	
[107/123]	Time 0.018 (0.123)	Data 0.000 (0.076)	
[108/123]	Time 0.017 (0.122)	Data 0.000 (0.075)	
[109/123]	Time 0.018 (0.121)	Data 0.000 (0.075)	
[110/123]	Time 0.017 (0.120)	Data 0.000 (0.074)	
[111/123]	Time 0.019 (0.119)	Data 0.000 (0.073)	
[112/123]	Time 0.021 (0.118)	Data 0.000 (0.073)	
[113/123]	Time 0.017 (0.117)	Data 0.000 (0.072)	
[114/123]	Time 0.106 (0.117)	Data 0.090 (0.072)	
[115/123]	Time 0.017 (0.116)	Data 0.000 (0.072)	
[116/123]	Time 0.016 (0.116)	Data 0.000 (0.071)	
[117/123]	Time 0.193 (0.116)	Data 0.177 (0.072)	
[118/123]	Time 0.016 (0.115)	Data 0.000 (0.071)	
[119/123]	Time 0.016 (0.115)	Data 0.000 (0.071)	
[120/123]	Time 0.016 (0.114)	Data 0.000 (0.070)	
[121/123]	Time 0.016 (0.113)	Data 0.000 (0.069)	
[122/123]	Time 0.016 (0.112)	Data 0.000 (0.069)	
[123/123]	Time 0.016 (0.111)	Data 0.000 (0.068)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.01', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.868 (4.868)	Data 4.162 (4.162)	
[2/123]	Time 0.015 (2.442)	Data 0.001 (2.081)	
[3/123]	Time 0.014 (1.632)	Data 0.000 (1.388)	
[4/123]	Time 0.014 (1.228)	Data 0.000 (1.041)	
[5/123]	Time 0.014 (0.985)	Data 0.000 (0.833)	
[6/123]	Time 0.015 (0.823)	Data 0.000 (0.694)	
[7/123]	Time 0.015 (0.708)	Data 0.001 (0.595)	
[8/123]	Time 0.015 (0.621)	Data 0.001 (0.521)	
[9/123]	Time 0.015 (0.554)	Data 0.001 (0.463)	
[10/123]	Time 0.015 (0.500)	Data 0.001 (0.417)	
[11/123]	Time 0.015 (0.456)	Data 0.001 (0.379)	
[12/123]	Time 0.015 (0.419)	Data 0.001 (0.347)	
[13/123]	Time 0.015 (0.388)	Data 0.001 (0.321)	
[14/123]	Time 0.015 (0.361)	Data 0.001 (0.298)	
[15/123]	Time 0.015 (0.338)	Data 0.001 (0.278)	
[16/123]	Time 0.035 (0.319)	Data 0.009 (0.261)	
[17/123]	Time 0.018 (0.302)	Data 0.001 (0.246)	
[18/123]	Time 0.159 (0.294)	Data 0.130 (0.240)	
[19/123]	Time 0.014 (0.279)	Data 0.001 (0.227)	
[20/123]	Time 0.027 (0.266)	Data 0.013 (0.216)	
[21/123]	Time 0.026 (0.255)	Data 0.012 (0.207)	
[22/123]	Time 0.025 (0.245)	Data 0.012 (0.198)	
[23/123]	Time 0.024 (0.235)	Data 0.010 (0.190)	
[24/123]	Time 0.031 (0.226)	Data 0.007 (0.182)	
[25/123]	Time 0.025 (0.218)	Data 0.011 (0.175)	
[26/123]	Time 0.028 (0.211)	Data 0.014 (0.169)	
[27/123]	Time 0.028 (0.204)	Data 0.014 (0.163)	
[28/123]	Time 0.020 (0.198)	Data 0.006 (0.158)	
[29/123]	Time 0.030 (0.192)	Data 0.016 (0.153)	
[30/123]	Time 0.045 (0.187)	Data 0.016 (0.148)	
[31/123]	Time 0.014 (0.181)	Data 0.001 (0.143)	
[32/123]	Time 0.042 (0.177)	Data 0.011 (0.139)	
[33/123]	Time 0.015 (0.172)	Data 0.001 (0.135)	
[34/123]	Time 1.097 (0.199)	Data 1.084 (0.163)	
[35/123]	Time 0.029 (0.194)	Data 0.015 (0.159)	
[36/123]	Time 0.035 (0.190)	Data 0.005 (0.154)	
[37/123]	Time 0.365 (0.195)	Data 0.349 (0.160)	
[38/123]	Time 0.055 (0.191)	Data 0.013 (0.156)	
[39/123]	Time 0.015 (0.187)	Data 0.001 (0.152)	
[40/123]	Time 0.030 (0.183)	Data 0.004 (0.148)	
[41/123]	Time 0.031 (0.179)	Data 0.001 (0.145)	
[42/123]	Time 0.031 (0.175)	Data 0.001 (0.141)	
[43/123]	Time 0.031 (0.172)	Data 0.001 (0.138)	
[44/123]	Time 0.029 (0.169)	Data 0.001 (0.135)	
[45/123]	Time 0.044 (0.166)	Data 0.030 (0.132)	
[46/123]	Time 0.062 (0.164)	Data 0.017 (0.130)	
[47/123]	Time 0.015 (0.161)	Data 0.001 (0.127)	
[48/123]	Time 0.039 (0.158)	Data 0.025 (0.125)	
[49/123]	Time 0.028 (0.155)	Data 0.014 (0.123)	
[50/123]	Time 0.620 (0.165)	Data 0.607 (0.132)	
[51/123]	Time 0.027 (0.162)	Data 0.000 (0.130)	
[52/123]	Time 0.032 (0.159)	Data 0.004 (0.127)	
[53/123]	Time 0.448 (0.165)	Data 0.435 (0.133)	
[54/123]	Time 0.064 (0.163)	Data 0.013 (0.131)	
[55/123]	Time 0.032 (0.161)	Data 0.001 (0.129)	
[56/123]	Time 0.014 (0.158)	Data 0.001 (0.126)	
[57/123]	Time 0.019 (0.156)	Data 0.006 (0.124)	
[58/123]	Time 0.050 (0.154)	Data 0.016 (0.122)	
[59/123]	Time 0.024 (0.152)	Data 0.000 (0.120)	
[60/123]	Time 0.014 (0.149)	Data 0.001 (0.118)	
[61/123]	Time 0.022 (0.147)	Data 0.008 (0.117)	
[62/123]	Time 0.042 (0.146)	Data 0.009 (0.115)	
[63/123]	Time 0.014 (0.143)	Data 0.001 (0.113)	
[64/123]	Time 0.014 (0.141)	Data 0.001 (0.111)	
[65/123]	Time 0.019 (0.140)	Data 0.005 (0.110)	
[66/123]	Time 0.522 (0.145)	Data 0.509 (0.116)	
[67/123]	Time 0.029 (0.144)	Data 0.015 (0.114)	
[68/123]	Time 0.028 (0.142)	Data 0.014 (0.113)	
[69/123]	Time 0.579 (0.148)	Data 0.555 (0.119)	
[70/123]	Time 0.044 (0.147)	Data 0.017 (0.118)	
[71/123]	Time 0.025 (0.145)	Data 0.001 (0.116)	
[72/123]	Time 0.034 (0.144)	Data 0.007 (0.114)	
[73/123]	Time 0.041 (0.142)	Data 0.011 (0.113)	
[74/123]	Time 0.018 (0.140)	Data 0.001 (0.112)	
[75/123]	Time 0.017 (0.139)	Data 0.001 (0.110)	
[76/123]	Time 0.029 (0.137)	Data 0.016 (0.109)	
[77/123]	Time 0.029 (0.136)	Data 0.015 (0.108)	
[78/123]	Time 0.027 (0.135)	Data 0.013 (0.106)	
[79/123]	Time 0.030 (0.133)	Data 0.006 (0.105)	
[80/123]	Time 0.032 (0.132)	Data 0.017 (0.104)	
[81/123]	Time 0.019 (0.131)	Data 0.005 (0.103)	
[82/123]	Time 0.503 (0.135)	Data 0.489 (0.108)	
[83/123]	Time 0.028 (0.134)	Data 0.014 (0.106)	
[84/123]	Time 0.035 (0.133)	Data 0.007 (0.105)	
[85/123]	Time 0.246 (0.134)	Data 0.232 (0.107)	
[86/123]	Time 0.035 (0.133)	Data 0.012 (0.106)	
[87/123]	Time 0.030 (0.132)	Data 0.001 (0.104)	
[88/123]	Time 0.014 (0.130)	Data 0.001 (0.103)	
[89/123]	Time 0.040 (0.129)	Data 0.027 (0.102)	
[90/123]	Time 0.020 (0.128)	Data 0.006 (0.101)	
[91/123]	Time 0.050 (0.127)	Data 0.016 (0.100)	
[92/123]	Time 0.014 (0.126)	Data 0.000 (0.099)	
[93/123]	Time 0.014 (0.125)	Data 0.000 (0.098)	
[94/123]	Time 0.014 (0.124)	Data 0.000 (0.097)	
[95/123]	Time 0.024 (0.123)	Data 0.001 (0.096)	
[96/123]	Time 0.024 (0.122)	Data 0.000 (0.095)	
[97/123]	Time 0.341 (0.124)	Data 0.327 (0.098)	
[98/123]	Time 0.630 (0.129)	Data 0.600 (0.103)	
[99/123]	Time 0.015 (0.128)	Data 0.000 (0.102)	
[100/123]	Time 0.057 (0.127)	Data 0.000 (0.101)	
[101/123]	Time 0.133 (0.127)	Data 0.086 (0.101)	
[102/123]	Time 0.015 (0.126)	Data 0.000 (0.100)	
[103/123]	Time 0.015 (0.125)	Data 0.000 (0.099)	
[104/123]	Time 0.016 (0.124)	Data 0.001 (0.098)	
[105/123]	Time 0.015 (0.123)	Data 0.000 (0.097)	
[106/123]	Time 0.015 (0.122)	Data 0.000 (0.096)	
[107/123]	Time 0.014 (0.121)	Data 0.001 (0.095)	
[108/123]	Time 0.015 (0.120)	Data 0.000 (0.094)	
[109/123]	Time 0.015 (0.119)	Data 0.000 (0.093)	
[110/123]	Time 0.014 (0.118)	Data 0.000 (0.092)	
[111/123]	Time 0.014 (0.117)	Data 0.000 (0.091)	
[112/123]	Time 0.014 (0.116)	Data 0.000 (0.091)	
[113/123]	Time 0.070 (0.116)	Data 0.057 (0.090)	
[114/123]	Time 0.298 (0.117)	Data 0.285 (0.092)	
[115/123]	Time 0.013 (0.116)	Data 0.000 (0.091)	
[116/123]	Time 0.013 (0.115)	Data 0.000 (0.091)	
[117/123]	Time 0.012 (0.115)	Data 0.000 (0.090)	
[118/123]	Time 0.012 (0.114)	Data 0.000 (0.089)	
[119/123]	Time 0.012 (0.113)	Data 0.000 (0.088)	
[120/123]	Time 0.012 (0.112)	Data 0.000 (0.087)	
[121/123]	Time 0.012 (0.111)	Data 0.000 (0.087)	
[122/123]	Time 0.012 (0.110)	Data 0.000 (0.086)	
[123/123]	Time 0.012 (0.110)	Data 0.000 (0.085)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.01', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.328 (4.328)	Data 3.364 (3.364)	
[2/123]	Time 0.020 (2.174)	Data 0.000 (1.682)	
[3/123]	Time 0.031 (1.460)	Data 0.014 (1.126)	
[4/123]	Time 0.194 (1.143)	Data 0.176 (0.888)	
[5/123]	Time 0.018 (0.918)	Data 0.000 (0.711)	
[6/123]	Time 0.018 (0.768)	Data 0.000 (0.592)	
[7/123]	Time 0.019 (0.661)	Data 0.001 (0.508)	
[8/123]	Time 0.019 (0.581)	Data 0.001 (0.444)	
[9/123]	Time 0.027 (0.519)	Data 0.000 (0.395)	
[10/123]	Time 0.019 (0.469)	Data 0.001 (0.356)	
[11/123]	Time 0.041 (0.430)	Data 0.001 (0.323)	
[12/123]	Time 0.059 (0.399)	Data 0.019 (0.298)	
[13/123]	Time 0.048 (0.372)	Data 0.016 (0.276)	
[14/123]	Time 0.049 (0.349)	Data 0.001 (0.257)	
[15/123]	Time 0.057 (0.330)	Data 0.014 (0.240)	
[16/123]	Time 0.067 (0.313)	Data 0.013 (0.226)	
[17/123]	Time 0.073 (0.299)	Data 0.001 (0.213)	
[18/123]	Time 0.050 (0.285)	Data 0.001 (0.201)	
[19/123]	Time 0.075 (0.274)	Data 0.011 (0.191)	
[20/123]	Time 0.048 (0.263)	Data 0.015 (0.182)	
[21/123]	Time 0.066 (0.254)	Data 0.025 (0.175)	
[22/123]	Time 0.063 (0.245)	Data 0.014 (0.168)	
[23/123]	Time 0.055 (0.237)	Data 0.003 (0.160)	
[24/123]	Time 0.061 (0.229)	Data 0.029 (0.155)	
[25/123]	Time 0.068 (0.223)	Data 0.001 (0.149)	
[26/123]	Time 0.050 (0.216)	Data 0.007 (0.143)	
[27/123]	Time 0.051 (0.210)	Data 0.011 (0.138)	
[28/123]	Time 0.080 (0.206)	Data 0.013 (0.134)	
[29/123]	Time 0.062 (0.201)	Data 0.001 (0.129)	
[30/123]	Time 0.075 (0.196)	Data 0.012 (0.125)	
[31/123]	Time 0.070 (0.192)	Data 0.001 (0.121)	
[32/123]	Time 0.039 (0.188)	Data 0.001 (0.118)	
[33/123]	Time 0.059 (0.184)	Data 0.015 (0.115)	
[34/123]	Time 0.092 (0.181)	Data 0.015 (0.112)	
[35/123]	Time 0.042 (0.177)	Data 0.006 (0.109)	
[36/123]	Time 0.083 (0.174)	Data 0.013 (0.106)	
[37/123]	Time 0.167 (0.174)	Data 0.111 (0.106)	
[38/123]	Time 0.051 (0.171)	Data 0.011 (0.104)	
[39/123]	Time 0.224 (0.172)	Data 0.180 (0.106)	
[40/123]	Time 0.058 (0.169)	Data 0.016 (0.103)	
[41/123]	Time 0.084 (0.167)	Data 0.015 (0.101)	
[42/123]	Time 0.072 (0.165)	Data 0.008 (0.099)	
[43/123]	Time 0.049 (0.162)	Data 0.001 (0.097)	
[44/123]	Time 0.040 (0.160)	Data 0.001 (0.094)	
[45/123]	Time 0.047 (0.157)	Data 0.014 (0.093)	
[46/123]	Time 0.028 (0.154)	Data 0.001 (0.091)	
[47/123]	Time 0.040 (0.152)	Data 0.001 (0.089)	
[48/123]	Time 0.044 (0.150)	Data 0.001 (0.087)	
[49/123]	Time 0.052 (0.148)	Data 0.010 (0.085)	
[50/123]	Time 0.047 (0.146)	Data 0.004 (0.084)	
[51/123]	Time 0.058 (0.144)	Data 0.012 (0.082)	
[52/123]	Time 0.192 (0.145)	Data 0.123 (0.083)	
[53/123]	Time 0.174 (0.145)	Data 0.126 (0.084)	
[54/123]	Time 0.152 (0.145)	Data 0.101 (0.084)	
[55/123]	Time 0.316 (0.149)	Data 0.280 (0.088)	
[56/123]	Time 0.061 (0.147)	Data 0.001 (0.086)	
[57/123]	Time 0.080 (0.146)	Data 0.015 (0.085)	
[58/123]	Time 0.044 (0.144)	Data 0.001 (0.084)	
[59/123]	Time 0.053 (0.143)	Data 0.015 (0.082)	
[60/123]	Time 0.057 (0.141)	Data 0.015 (0.081)	
[61/123]	Time 0.059 (0.140)	Data 0.005 (0.080)	
[62/123]	Time 0.064 (0.139)	Data 0.006 (0.079)	
[63/123]	Time 0.080 (0.138)	Data 0.022 (0.078)	
[64/123]	Time 0.045 (0.136)	Data 0.015 (0.077)	
[65/123]	Time 0.125 (0.136)	Data 0.081 (0.077)	
[66/123]	Time 0.047 (0.135)	Data 0.012 (0.076)	
[67/123]	Time 0.083 (0.134)	Data 0.016 (0.075)	
[68/123]	Time 0.079 (0.133)	Data 0.014 (0.074)	
[69/123]	Time 0.125 (0.133)	Data 0.071 (0.074)	
[70/123]	Time 0.124 (0.133)	Data 0.098 (0.075)	
[71/123]	Time 0.182 (0.134)	Data 0.150 (0.076)	
[72/123]	Time 0.056 (0.132)	Data 0.006 (0.075)	
[73/123]	Time 0.032 (0.131)	Data 0.006 (0.074)	
[74/123]	Time 0.102 (0.131)	Data 0.080 (0.074)	
[75/123]	Time 0.069 (0.130)	Data 0.025 (0.073)	
[76/123]	Time 0.068 (0.129)	Data 0.012 (0.072)	
[77/123]	Time 0.042 (0.128)	Data 0.000 (0.071)	
[78/123]	Time 0.052 (0.127)	Data 0.014 (0.071)	
[79/123]	Time 0.081 (0.126)	Data 0.036 (0.070)	
[80/123]	Time 0.068 (0.126)	Data 0.041 (0.070)	
[81/123]	Time 0.244 (0.127)	Data 0.186 (0.071)	
[82/123]	Time 0.066 (0.126)	Data 0.001 (0.070)	
[83/123]	Time 0.113 (0.126)	Data 0.053 (0.070)	
[84/123]	Time 0.229 (0.127)	Data 0.186 (0.072)	
[85/123]	Time 0.059 (0.127)	Data 0.001 (0.071)	
[86/123]	Time 0.344 (0.129)	Data 0.319 (0.074)	
[87/123]	Time 0.072 (0.128)	Data 0.002 (0.073)	
[88/123]	Time 0.060 (0.128)	Data 0.015 (0.072)	
[89/123]	Time 0.057 (0.127)	Data 0.016 (0.072)	
[90/123]	Time 0.056 (0.126)	Data 0.016 (0.071)	
[91/123]	Time 0.034 (0.125)	Data 0.011 (0.070)	
[92/123]	Time 0.090 (0.125)	Data 0.000 (0.069)	
[93/123]	Time 0.065 (0.124)	Data 0.000 (0.069)	
[94/123]	Time 0.252 (0.125)	Data 0.227 (0.070)	
[95/123]	Time 0.065 (0.125)	Data 0.000 (0.070)	
[96/123]	Time 0.062 (0.124)	Data 0.001 (0.069)	
[97/123]	Time 0.026 (0.123)	Data 0.001 (0.068)	
[98/123]	Time 0.051 (0.122)	Data 0.002 (0.068)	
[99/123]	Time 0.031 (0.121)	Data 0.001 (0.067)	
[100/123]	Time 0.570 (0.126)	Data 0.512 (0.071)	
[101/123]	Time 0.044 (0.125)	Data 0.000 (0.071)	
[102/123]	Time 0.119 (0.125)	Data 0.087 (0.071)	
[103/123]	Time 0.018 (0.124)	Data 0.000 (0.070)	
[104/123]	Time 0.019 (0.123)	Data 0.000 (0.069)	
[105/123]	Time 0.019 (0.122)	Data 0.000 (0.069)	
[106/123]	Time 0.019 (0.121)	Data 0.000 (0.068)	
[107/123]	Time 0.019 (0.120)	Data 0.000 (0.068)	
[108/123]	Time 0.020 (0.119)	Data 0.000 (0.067)	
[109/123]	Time 0.022 (0.118)	Data 0.000 (0.066)	
[110/123]	Time 0.069 (0.118)	Data 0.048 (0.066)	
[111/123]	Time 0.018 (0.117)	Data 0.000 (0.066)	
[112/123]	Time 0.017 (0.116)	Data 0.000 (0.065)	
[113/123]	Time 0.016 (0.115)	Data 0.000 (0.064)	
[114/123]	Time 0.016 (0.114)	Data 0.000 (0.064)	
[115/123]	Time 0.017 (0.113)	Data 0.000 (0.063)	
[116/123]	Time 0.116 (0.113)	Data 0.100 (0.064)	
[117/123]	Time 0.016 (0.113)	Data 0.000 (0.063)	
[118/123]	Time 0.088 (0.112)	Data 0.072 (0.063)	
[119/123]	Time 0.016 (0.112)	Data 0.000 (0.063)	
[120/123]	Time 0.016 (0.111)	Data 0.000 (0.062)	
[121/123]	Time 0.016 (0.110)	Data 0.000 (0.062)	
[122/123]	Time 0.016 (0.109)	Data 0.000 (0.061)	
[123/123]	Time 0.016 (0.108)	Data 0.000 (0.061)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.001', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs16_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.461 (4.461)	Data 3.600 (3.600)	
[2/123]	Time 0.014 (2.237)	Data 0.000 (1.800)	
[3/123]	Time 0.014 (1.496)	Data 0.000 (1.200)	
[4/123]	Time 0.015 (1.126)	Data 0.000 (0.900)	
[5/123]	Time 0.014 (0.904)	Data 0.000 (0.720)	
[6/123]	Time 0.014 (0.755)	Data 0.000 (0.600)	
[7/123]	Time 0.015 (0.650)	Data 0.001 (0.515)	
[8/123]	Time 0.015 (0.570)	Data 0.000 (0.450)	
[9/123]	Time 0.015 (0.509)	Data 0.001 (0.400)	
[10/123]	Time 0.053 (0.463)	Data 0.039 (0.364)	
[11/123]	Time 0.015 (0.422)	Data 0.000 (0.331)	
[12/123]	Time 0.025 (0.389)	Data 0.010 (0.304)	
[13/123]	Time 0.018 (0.361)	Data 0.002 (0.281)	
[14/123]	Time 0.020 (0.336)	Data 0.002 (0.261)	
[15/123]	Time 0.023 (0.315)	Data 0.002 (0.244)	
[16/123]	Time 0.014 (0.297)	Data 0.001 (0.229)	
[17/123]	Time 0.029 (0.281)	Data 0.015 (0.216)	
[18/123]	Time 0.505 (0.293)	Data 0.491 (0.231)	
[19/123]	Time 0.027 (0.279)	Data 0.013 (0.220)	
[20/123]	Time 0.027 (0.267)	Data 0.006 (0.209)	
[21/123]	Time 0.044 (0.256)	Data 0.012 (0.200)	
[22/123]	Time 0.021 (0.245)	Data 0.001 (0.191)	
[23/123]	Time 0.028 (0.236)	Data 0.001 (0.183)	
[24/123]	Time 0.015 (0.227)	Data 0.001 (0.175)	
[25/123]	Time 0.020 (0.218)	Data 0.007 (0.168)	
[26/123]	Time 0.040 (0.212)	Data 0.026 (0.163)	
[27/123]	Time 0.028 (0.205)	Data 0.014 (0.157)	
[28/123]	Time 0.032 (0.199)	Data 0.006 (0.152)	
[29/123]	Time 0.030 (0.193)	Data 0.001 (0.147)	
[30/123]	Time 0.028 (0.187)	Data 0.001 (0.142)	
[31/123]	Time 0.014 (0.182)	Data 0.001 (0.137)	
[32/123]	Time 0.039 (0.177)	Data 0.011 (0.133)	
[33/123]	Time 0.029 (0.173)	Data 0.015 (0.130)	
[34/123]	Time 0.545 (0.184)	Data 0.531 (0.141)	
[35/123]	Time 0.029 (0.179)	Data 0.001 (0.137)	
[36/123]	Time 0.229 (0.181)	Data 0.205 (0.139)	
[37/123]	Time 0.028 (0.177)	Data 0.006 (0.136)	
[38/123]	Time 0.028 (0.173)	Data 0.000 (0.132)	
[39/123]	Time 0.019 (0.169)	Data 0.001 (0.129)	
[40/123]	Time 0.034 (0.165)	Data 0.009 (0.126)	
[41/123]	Time 0.037 (0.162)	Data 0.014 (0.123)	
[42/123]	Time 0.036 (0.159)	Data 0.013 (0.120)	
[43/123]	Time 0.017 (0.156)	Data 0.001 (0.118)	
[44/123]	Time 0.045 (0.153)	Data 0.013 (0.115)	
[45/123]	Time 0.032 (0.151)	Data 0.001 (0.113)	
[46/123]	Time 0.040 (0.148)	Data 0.006 (0.110)	
[47/123]	Time 0.111 (0.147)	Data 0.096 (0.110)	
[48/123]	Time 0.045 (0.145)	Data 0.012 (0.108)	
[49/123]	Time 0.036 (0.143)	Data 0.001 (0.106)	
[50/123]	Time 0.439 (0.149)	Data 0.424 (0.112)	
[51/123]	Time 0.031 (0.147)	Data 0.017 (0.110)	
[52/123]	Time 0.406 (0.152)	Data 0.378 (0.116)	
[53/123]	Time 0.028 (0.149)	Data 0.001 (0.113)	
[54/123]	Time 0.016 (0.147)	Data 0.001 (0.111)	
[55/123]	Time 0.048 (0.145)	Data 0.018 (0.110)	
[56/123]	Time 0.032 (0.143)	Data 0.001 (0.108)	
[57/123]	Time 0.032 (0.141)	Data 0.001 (0.106)	
[58/123]	Time 0.043 (0.139)	Data 0.001 (0.104)	
[59/123]	Time 0.391 (0.144)	Data 0.377 (0.109)	
[60/123]	Time 0.053 (0.142)	Data 0.012 (0.107)	
[61/123]	Time 0.039 (0.141)	Data 0.001 (0.105)	
[62/123]	Time 0.028 (0.139)	Data 0.001 (0.104)	
[63/123]	Time 0.361 (0.142)	Data 0.346 (0.107)	
[64/123]	Time 0.055 (0.141)	Data 0.007 (0.106)	
[65/123]	Time 0.047 (0.139)	Data 0.006 (0.104)	
[66/123]	Time 0.273 (0.141)	Data 0.258 (0.107)	
[67/123]	Time 0.032 (0.140)	Data 0.006 (0.105)	
[68/123]	Time 0.276 (0.142)	Data 0.250 (0.107)	
[69/123]	Time 0.025 (0.140)	Data 0.002 (0.106)	
[70/123]	Time 0.030 (0.139)	Data 0.014 (0.104)	
[71/123]	Time 0.030 (0.137)	Data 0.013 (0.103)	
[72/123]	Time 0.029 (0.136)	Data 0.014 (0.102)	
[73/123]	Time 0.024 (0.134)	Data 0.001 (0.101)	
[74/123]	Time 0.027 (0.133)	Data 0.003 (0.099)	
[75/123]	Time 0.060 (0.132)	Data 0.046 (0.099)	
[76/123]	Time 0.028 (0.130)	Data 0.013 (0.097)	
[77/123]	Time 0.299 (0.132)	Data 0.275 (0.100)	
[78/123]	Time 0.028 (0.131)	Data 0.001 (0.098)	
[79/123]	Time 0.205 (0.132)	Data 0.190 (0.100)	
[80/123]	Time 0.032 (0.131)	Data 0.018 (0.099)	
[81/123]	Time 0.027 (0.129)	Data 0.013 (0.098)	
[82/123]	Time 0.029 (0.128)	Data 0.014 (0.097)	
[83/123]	Time 0.015 (0.127)	Data 0.001 (0.095)	
[84/123]	Time 1.468 (0.143)	Data 1.454 (0.112)	
[85/123]	Time 0.016 (0.141)	Data 0.001 (0.110)	
[86/123]	Time 0.018 (0.140)	Data 0.001 (0.109)	
[87/123]	Time 0.016 (0.139)	Data 0.002 (0.108)	
[88/123]	Time 0.016 (0.137)	Data 0.001 (0.107)	
[89/123]	Time 0.017 (0.136)	Data 0.001 (0.105)	
[90/123]	Time 0.017 (0.134)	Data 0.001 (0.104)	
[91/123]	Time 0.015 (0.133)	Data 0.001 (0.103)	
[92/123]	Time 0.018 (0.132)	Data 0.001 (0.102)	
[93/123]	Time 0.015 (0.131)	Data 0.001 (0.101)	
[94/123]	Time 0.020 (0.129)	Data 0.001 (0.100)	
[95/123]	Time 0.038 (0.128)	Data 0.000 (0.099)	
[96/123]	Time 0.018 (0.127)	Data 0.001 (0.098)	
[97/123]	Time 0.020 (0.126)	Data 0.001 (0.097)	
[98/123]	Time 0.017 (0.125)	Data 0.001 (0.096)	
[99/123]	Time 0.014 (0.124)	Data 0.000 (0.095)	
[100/123]	Time 0.238 (0.125)	Data 0.226 (0.096)	
[101/123]	Time 0.017 (0.124)	Data 0.000 (0.095)	
[102/123]	Time 0.013 (0.123)	Data 0.000 (0.094)	
[103/123]	Time 0.014 (0.122)	Data 0.000 (0.093)	
[104/123]	Time 0.013 (0.121)	Data 0.000 (0.092)	
[105/123]	Time 0.013 (0.120)	Data 0.000 (0.092)	
[106/123]	Time 0.013 (0.119)	Data 0.000 (0.091)	
[107/123]	Time 0.013 (0.118)	Data 0.000 (0.090)	
[108/123]	Time 0.013 (0.117)	Data 0.000 (0.089)	
[109/123]	Time 0.013 (0.116)	Data 0.000 (0.088)	
[110/123]	Time 0.013 (0.115)	Data 0.000 (0.087)	
[111/123]	Time 0.013 (0.114)	Data 0.000 (0.087)	
[112/123]	Time 0.013 (0.113)	Data 0.000 (0.086)	
[113/123]	Time 0.013 (0.112)	Data 0.000 (0.085)	
[114/123]	Time 0.013 (0.111)	Data 0.000 (0.084)	
[115/123]	Time 0.013 (0.111)	Data 0.000 (0.084)	
[116/123]	Time 0.409 (0.113)	Data 0.396 (0.086)	
[117/123]	Time 0.012 (0.112)	Data 0.000 (0.086)	
[118/123]	Time 0.012 (0.111)	Data 0.000 (0.085)	
[119/123]	Time 0.012 (0.111)	Data 0.000 (0.084)	
[120/123]	Time 0.012 (0.110)	Data 0.000 (0.083)	
[121/123]	Time 0.012 (0.109)	Data 0.000 (0.083)	
[122/123]	Time 0.012 (0.108)	Data 0.000 (0.082)	
[123/123]	Time 0.012 (0.107)	Data 0.000 (0.081)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.001', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=16, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs16_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 5.015 (5.015)	Data 4.359 (4.359)	
[2/123]	Time 0.019 (2.517)	Data 0.000 (2.180)	
[3/123]	Time 0.018 (1.684)	Data 0.000 (1.453)	
[4/123]	Time 0.018 (1.267)	Data 0.000 (1.090)	
[5/123]	Time 0.018 (1.018)	Data 0.000 (0.872)	
[6/123]	Time 0.020 (0.851)	Data 0.000 (0.727)	
[7/123]	Time 0.020 (0.733)	Data 0.001 (0.623)	
[8/123]	Time 0.019 (0.643)	Data 0.001 (0.545)	
[9/123]	Time 0.024 (0.574)	Data 0.001 (0.485)	
[10/123]	Time 0.034 (0.520)	Data 0.000 (0.436)	
[11/123]	Time 0.033 (0.476)	Data 0.001 (0.397)	
[12/123]	Time 0.048 (0.440)	Data 0.002 (0.364)	
[13/123]	Time 0.025 (0.408)	Data 0.001 (0.336)	
[14/123]	Time 0.027 (0.381)	Data 0.002 (0.312)	
[15/123]	Time 0.031 (0.358)	Data 0.002 (0.291)	
[16/123]	Time 0.031 (0.337)	Data 0.001 (0.273)	
[17/123]	Time 0.061 (0.321)	Data 0.001 (0.257)	
[18/123]	Time 0.044 (0.306)	Data 0.001 (0.243)	
[19/123]	Time 0.040 (0.292)	Data 0.003 (0.230)	
[20/123]	Time 0.057 (0.280)	Data 0.016 (0.220)	
[21/123]	Time 0.040 (0.269)	Data 0.014 (0.210)	
[22/123]	Time 0.030 (0.258)	Data 0.001 (0.200)	
[23/123]	Time 0.031 (0.248)	Data 0.001 (0.192)	
[24/123]	Time 0.028 (0.239)	Data 0.001 (0.184)	
[25/123]	Time 0.031 (0.230)	Data 0.001 (0.176)	
[26/123]	Time 0.031 (0.223)	Data 0.001 (0.170)	
[27/123]	Time 0.057 (0.217)	Data 0.015 (0.164)	
[28/123]	Time 0.053 (0.211)	Data 0.010 (0.158)	
[29/123]	Time 0.054 (0.205)	Data 0.013 (0.153)	
[30/123]	Time 0.041 (0.200)	Data 0.001 (0.148)	
[31/123]	Time 0.056 (0.195)	Data 0.014 (0.144)	
[32/123]	Time 0.057 (0.191)	Data 0.013 (0.140)	
[33/123]	Time 0.051 (0.187)	Data 0.018 (0.136)	
[34/123]	Time 0.054 (0.183)	Data 0.020 (0.133)	
[35/123]	Time 0.605 (0.195)	Data 0.564 (0.145)	
[36/123]	Time 0.047 (0.191)	Data 0.001 (0.141)	
[37/123]	Time 0.134 (0.189)	Data 0.090 (0.140)	
[38/123]	Time 0.045 (0.185)	Data 0.019 (0.137)	
[39/123]	Time 0.065 (0.182)	Data 0.043 (0.134)	
[40/123]	Time 0.046 (0.179)	Data 0.001 (0.131)	
[41/123]	Time 0.035 (0.175)	Data 0.001 (0.128)	
[42/123]	Time 0.059 (0.173)	Data 0.001 (0.125)	
[43/123]	Time 0.054 (0.170)	Data 0.001 (0.122)	
[44/123]	Time 0.051 (0.167)	Data 0.007 (0.119)	
[45/123]	Time 0.061 (0.165)	Data 0.012 (0.117)	
[46/123]	Time 0.048 (0.162)	Data 0.001 (0.114)	
[47/123]	Time 0.061 (0.160)	Data 0.008 (0.112)	
[48/123]	Time 0.055 (0.158)	Data 0.014 (0.110)	
[49/123]	Time 0.050 (0.156)	Data 0.001 (0.108)	
[50/123]	Time 0.083 (0.154)	Data 0.029 (0.106)	
[51/123]	Time 0.482 (0.161)	Data 0.428 (0.112)	
[52/123]	Time 0.089 (0.159)	Data 0.001 (0.110)	
[53/123]	Time 0.200 (0.160)	Data 0.135 (0.111)	
[54/123]	Time 0.058 (0.158)	Data 0.010 (0.109)	
[55/123]	Time 0.205 (0.159)	Data 0.171 (0.110)	
[56/123]	Time 0.044 (0.157)	Data 0.012 (0.108)	
[57/123]	Time 0.038 (0.155)	Data 0.000 (0.106)	
[58/123]	Time 0.040 (0.153)	Data 0.001 (0.105)	
[59/123]	Time 0.066 (0.151)	Data 0.018 (0.103)	
[60/123]	Time 0.042 (0.150)	Data 0.001 (0.101)	
[61/123]	Time 0.090 (0.149)	Data 0.025 (0.100)	
[62/123]	Time 0.054 (0.147)	Data 0.001 (0.099)	
[63/123]	Time 0.048 (0.146)	Data 0.009 (0.097)	
[64/123]	Time 0.046 (0.144)	Data 0.001 (0.096)	
[65/123]	Time 0.064 (0.143)	Data 0.027 (0.095)	
[66/123]	Time 0.039 (0.141)	Data 0.010 (0.093)	
[67/123]	Time 0.433 (0.146)	Data 0.367 (0.097)	
[68/123]	Time 0.039 (0.144)	Data 0.001 (0.096)	
[69/123]	Time 0.058 (0.143)	Data 0.003 (0.095)	
[70/123]	Time 0.058 (0.142)	Data 0.013 (0.093)	
[71/123]	Time 0.377 (0.145)	Data 0.314 (0.097)	
[72/123]	Time 0.048 (0.143)	Data 0.002 (0.095)	
[73/123]	Time 0.054 (0.142)	Data 0.001 (0.094)	
[74/123]	Time 0.048 (0.141)	Data 0.013 (0.093)	
[75/123]	Time 0.034 (0.140)	Data 0.001 (0.092)	
[76/123]	Time 0.071 (0.139)	Data 0.014 (0.091)	
[77/123]	Time 0.058 (0.138)	Data 0.014 (0.090)	
[78/123]	Time 0.029 (0.136)	Data 0.001 (0.088)	
[79/123]	Time 0.024 (0.135)	Data 0.002 (0.087)	
[80/123]	Time 0.075 (0.134)	Data 0.013 (0.086)	
[81/123]	Time 0.049 (0.133)	Data 0.001 (0.085)	
[82/123]	Time 0.066 (0.132)	Data 0.015 (0.085)	
[83/123]	Time 0.279 (0.134)	Data 0.215 (0.086)	
[84/123]	Time 0.071 (0.133)	Data 0.039 (0.086)	
[85/123]	Time 0.204 (0.134)	Data 0.150 (0.086)	
[86/123]	Time 0.046 (0.133)	Data 0.016 (0.085)	
[87/123]	Time 0.376 (0.136)	Data 0.336 (0.088)	
[88/123]	Time 0.044 (0.135)	Data 0.001 (0.087)	
[89/123]	Time 0.063 (0.134)	Data 0.013 (0.087)	
[90/123]	Time 0.060 (0.133)	Data 0.014 (0.086)	
[91/123]	Time 0.028 (0.132)	Data 0.001 (0.085)	
[92/123]	Time 0.027 (0.131)	Data 0.001 (0.084)	
[93/123]	Time 0.031 (0.130)	Data 0.001 (0.083)	
[94/123]	Time 0.602 (0.135)	Data 0.561 (0.088)	
[95/123]	Time 0.059 (0.134)	Data 0.000 (0.087)	
[96/123]	Time 0.242 (0.135)	Data 0.200 (0.088)	
[97/123]	Time 0.058 (0.134)	Data 0.001 (0.087)	
[98/123]	Time 0.064 (0.134)	Data 0.001 (0.087)	
[99/123]	Time 0.044 (0.133)	Data 0.001 (0.086)	
[100/123]	Time 0.033 (0.132)	Data 0.001 (0.085)	
[101/123]	Time 0.034 (0.131)	Data 0.001 (0.084)	
[102/123]	Time 0.043 (0.130)	Data 0.011 (0.083)	
[103/123]	Time 0.029 (0.129)	Data 0.000 (0.082)	
[104/123]	Time 0.045 (0.128)	Data 0.000 (0.082)	
[105/123]	Time 0.045 (0.127)	Data 0.000 (0.081)	
[106/123]	Time 0.034 (0.126)	Data 0.001 (0.080)	
[107/123]	Time 0.046 (0.126)	Data 0.000 (0.079)	
[108/123]	Time 0.037 (0.125)	Data 0.000 (0.079)	
[109/123]	Time 0.033 (0.124)	Data 0.000 (0.078)	
[110/123]	Time 0.094 (0.124)	Data 0.069 (0.078)	
[111/123]	Time 0.018 (0.123)	Data 0.000 (0.077)	
[112/123]	Time 0.083 (0.122)	Data 0.066 (0.077)	
[113/123]	Time 0.017 (0.122)	Data 0.000 (0.076)	
[114/123]	Time 0.017 (0.121)	Data 0.000 (0.076)	
[115/123]	Time 0.017 (0.120)	Data 0.000 (0.075)	
[116/123]	Time 0.017 (0.119)	Data 0.000 (0.074)	
[117/123]	Time 0.017 (0.118)	Data 0.000 (0.074)	
[118/123]	Time 0.017 (0.117)	Data 0.000 (0.073)	
[119/123]	Time 0.058 (0.117)	Data 0.042 (0.073)	
[120/123]	Time 0.016 (0.116)	Data 0.000 (0.072)	
[121/123]	Time 0.016 (0.115)	Data 0.000 (0.072)	
[122/123]	Time 0.016 (0.114)	Data 0.000 (0.071)	
[123/123]	Time 0.016 (0.113)	Data 0.000 (0.071)	
end bs16
start bs32
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.1', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.606 (4.606)	Data 3.934 (3.934)	
[2/123]	Time 0.014 (2.310)	Data 0.000 (1.967)	
[3/123]	Time 0.013 (1.544)	Data 0.000 (1.311)	
[4/123]	Time 0.014 (1.162)	Data 0.000 (0.984)	
[5/123]	Time 0.014 (0.932)	Data 0.000 (0.787)	
[6/123]	Time 0.014 (0.779)	Data 0.000 (0.656)	
[7/123]	Time 0.015 (0.670)	Data 0.001 (0.562)	
[8/123]	Time 0.014 (0.588)	Data 0.000 (0.492)	
[9/123]	Time 0.015 (0.524)	Data 0.001 (0.437)	
[10/123]	Time 0.015 (0.473)	Data 0.001 (0.394)	
[11/123]	Time 0.016 (0.432)	Data 0.001 (0.358)	
[12/123]	Time 0.016 (0.397)	Data 0.001 (0.328)	
[13/123]	Time 0.016 (0.368)	Data 0.001 (0.303)	
[14/123]	Time 0.015 (0.343)	Data 0.001 (0.281)	
[15/123]	Time 0.021 (0.321)	Data 0.002 (0.263)	
[16/123]	Time 0.029 (0.303)	Data 0.015 (0.247)	
[17/123]	Time 0.044 (0.288)	Data 0.030 (0.234)	
[18/123]	Time 0.351 (0.291)	Data 0.322 (0.239)	
[19/123]	Time 0.035 (0.278)	Data 0.001 (0.227)	
[20/123]	Time 0.021 (0.265)	Data 0.007 (0.216)	
[21/123]	Time 0.104 (0.257)	Data 0.087 (0.210)	
[22/123]	Time 0.029 (0.247)	Data 0.001 (0.200)	
[23/123]	Time 0.015 (0.237)	Data 0.001 (0.192)	
[24/123]	Time 0.033 (0.228)	Data 0.017 (0.184)	
[25/123]	Time 0.056 (0.221)	Data 0.016 (0.178)	
[26/123]	Time 0.016 (0.213)	Data 0.001 (0.171)	
[27/123]	Time 0.036 (0.207)	Data 0.001 (0.164)	
[28/123]	Time 0.024 (0.200)	Data 0.001 (0.159)	
[29/123]	Time 0.029 (0.194)	Data 0.015 (0.154)	
[30/123]	Time 0.028 (0.189)	Data 0.014 (0.149)	
[31/123]	Time 0.018 (0.183)	Data 0.005 (0.144)	
[32/123]	Time 0.025 (0.178)	Data 0.012 (0.140)	
[33/123]	Time 0.018 (0.174)	Data 0.001 (0.136)	
[34/123]	Time 0.314 (0.178)	Data 0.301 (0.141)	
[35/123]	Time 0.130 (0.176)	Data 0.116 (0.140)	
[36/123]	Time 0.027 (0.172)	Data 0.013 (0.137)	
[37/123]	Time 0.480 (0.180)	Data 0.467 (0.146)	
[38/123]	Time 0.020 (0.176)	Data 0.006 (0.142)	
[39/123]	Time 0.042 (0.173)	Data 0.001 (0.138)	
[40/123]	Time 0.033 (0.169)	Data 0.017 (0.135)	
[41/123]	Time 0.033 (0.166)	Data 0.012 (0.132)	
[42/123]	Time 0.034 (0.163)	Data 0.006 (0.129)	
[43/123]	Time 0.020 (0.160)	Data 0.001 (0.126)	
[44/123]	Time 0.123 (0.159)	Data 0.109 (0.126)	
[45/123]	Time 0.029 (0.156)	Data 0.015 (0.123)	
[46/123]	Time 0.039 (0.153)	Data 0.006 (0.121)	
[47/123]	Time 0.014 (0.150)	Data 0.001 (0.118)	
[48/123]	Time 0.019 (0.148)	Data 0.005 (0.116)	
[49/123]	Time 0.029 (0.145)	Data 0.015 (0.114)	
[50/123]	Time 0.399 (0.150)	Data 0.359 (0.119)	
[51/123]	Time 0.080 (0.149)	Data 0.064 (0.118)	
[52/123]	Time 0.535 (0.156)	Data 0.520 (0.125)	
[53/123]	Time 0.206 (0.157)	Data 0.176 (0.126)	
[54/123]	Time 0.023 (0.155)	Data 0.001 (0.124)	
[55/123]	Time 0.028 (0.152)	Data 0.001 (0.122)	
[56/123]	Time 0.038 (0.150)	Data 0.004 (0.120)	
[57/123]	Time 0.040 (0.148)	Data 0.001 (0.118)	
[58/123]	Time 0.027 (0.146)	Data 0.000 (0.116)	
[59/123]	Time 0.032 (0.144)	Data 0.001 (0.114)	
[60/123]	Time 0.016 (0.142)	Data 0.001 (0.112)	
[61/123]	Time 0.063 (0.141)	Data 0.011 (0.110)	
[62/123]	Time 0.033 (0.139)	Data 0.001 (0.108)	
[63/123]	Time 0.031 (0.138)	Data 0.001 (0.107)	
[64/123]	Time 0.032 (0.136)	Data 0.001 (0.105)	
[65/123]	Time 0.032 (0.134)	Data 0.001 (0.103)	
[66/123]	Time 0.194 (0.135)	Data 0.180 (0.105)	
[67/123]	Time 0.517 (0.141)	Data 0.480 (0.110)	
[68/123]	Time 0.403 (0.145)	Data 0.384 (0.114)	
[69/123]	Time 0.044 (0.143)	Data 0.018 (0.113)	
[70/123]	Time 0.040 (0.142)	Data 0.016 (0.111)	
[71/123]	Time 0.021 (0.140)	Data 0.001 (0.110)	
[72/123]	Time 0.026 (0.139)	Data 0.011 (0.109)	
[73/123]	Time 0.020 (0.137)	Data 0.006 (0.107)	
[74/123]	Time 0.054 (0.136)	Data 0.018 (0.106)	
[75/123]	Time 0.015 (0.134)	Data 0.001 (0.104)	
[76/123]	Time 0.042 (0.133)	Data 0.011 (0.103)	
[77/123]	Time 0.024 (0.132)	Data 0.001 (0.102)	
[78/123]	Time 0.030 (0.130)	Data 0.001 (0.101)	
[79/123]	Time 0.032 (0.129)	Data 0.017 (0.100)	
[80/123]	Time 0.028 (0.128)	Data 0.014 (0.099)	
[81/123]	Time 0.026 (0.126)	Data 0.001 (0.097)	
[82/123]	Time 0.159 (0.127)	Data 0.128 (0.098)	
[83/123]	Time 0.510 (0.131)	Data 0.471 (0.102)	
[84/123]	Time 0.298 (0.133)	Data 0.272 (0.104)	
[85/123]	Time 0.032 (0.132)	Data 0.001 (0.103)	
[86/123]	Time 0.015 (0.131)	Data 0.001 (0.102)	
[87/123]	Time 0.037 (0.130)	Data 0.011 (0.101)	
[88/123]	Time 0.036 (0.129)	Data 0.021 (0.100)	
[89/123]	Time 0.015 (0.127)	Data 0.001 (0.099)	
[90/123]	Time 0.015 (0.126)	Data 0.001 (0.098)	
[91/123]	Time 0.027 (0.125)	Data 0.013 (0.097)	
[92/123]	Time 0.030 (0.124)	Data 0.000 (0.096)	
[93/123]	Time 0.027 (0.123)	Data 0.000 (0.095)	
[94/123]	Time 0.041 (0.122)	Data 0.017 (0.094)	
[95/123]	Time 0.014 (0.121)	Data 0.000 (0.093)	
[96/123]	Time 0.037 (0.120)	Data 0.014 (0.092)	
[97/123]	Time 0.022 (0.119)	Data 0.001 (0.091)	
[98/123]	Time 0.243 (0.120)	Data 0.220 (0.092)	
[99/123]	Time 0.434 (0.124)	Data 0.420 (0.096)	
[100/123]	Time 0.190 (0.124)	Data 0.176 (0.096)	
[101/123]	Time 0.105 (0.124)	Data 0.070 (0.096)	
[102/123]	Time 0.022 (0.123)	Data 0.000 (0.095)	
[103/123]	Time 0.014 (0.122)	Data 0.000 (0.094)	
[104/123]	Time 0.015 (0.121)	Data 0.001 (0.093)	
[105/123]	Time 0.015 (0.120)	Data 0.001 (0.093)	
[106/123]	Time 0.016 (0.119)	Data 0.001 (0.092)	
[107/123]	Time 0.015 (0.118)	Data 0.001 (0.091)	
[108/123]	Time 0.015 (0.117)	Data 0.001 (0.090)	
[109/123]	Time 0.014 (0.116)	Data 0.000 (0.089)	
[110/123]	Time 0.014 (0.115)	Data 0.000 (0.088)	
[111/123]	Time 0.014 (0.114)	Data 0.000 (0.088)	
[112/123]	Time 0.016 (0.113)	Data 0.001 (0.087)	
[113/123]	Time 0.015 (0.113)	Data 0.001 (0.086)	
[114/123]	Time 0.134 (0.113)	Data 0.121 (0.086)	
[115/123]	Time 0.225 (0.114)	Data 0.212 (0.087)	
[116/123]	Time 0.025 (0.113)	Data 0.013 (0.087)	
[117/123]	Time 0.069 (0.113)	Data 0.057 (0.087)	
[118/123]	Time 0.012 (0.112)	Data 0.000 (0.086)	
[119/123]	Time 0.012 (0.111)	Data 0.000 (0.085)	
[120/123]	Time 0.012 (0.110)	Data 0.000 (0.084)	
[121/123]	Time 0.012 (0.109)	Data 0.000 (0.084)	
[122/123]	Time 0.012 (0.108)	Data 0.000 (0.083)	
[123/123]	Time 0.012 (0.108)	Data 0.000 (0.082)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.1', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.379 (4.379)	Data 3.419 (3.419)	
[2/123]	Time 0.020 (2.199)	Data 0.000 (1.710)	
[3/123]	Time 0.018 (1.472)	Data 0.000 (1.140)	
[4/123]	Time 0.018 (1.109)	Data 0.001 (0.855)	
[5/123]	Time 0.018 (0.891)	Data 0.001 (0.684)	
[6/123]	Time 0.018 (0.745)	Data 0.000 (0.570)	
[7/123]	Time 0.019 (0.641)	Data 0.001 (0.489)	
[8/123]	Time 0.020 (0.564)	Data 0.001 (0.428)	
[9/123]	Time 0.021 (0.503)	Data 0.001 (0.380)	
[10/123]	Time 0.023 (0.455)	Data 0.001 (0.342)	
[11/123]	Time 0.031 (0.417)	Data 0.001 (0.311)	
[12/123]	Time 0.034 (0.385)	Data 0.001 (0.286)	
[13/123]	Time 0.033 (0.358)	Data 0.001 (0.264)	
[14/123]	Time 0.036 (0.335)	Data 0.001 (0.245)	
[15/123]	Time 0.051 (0.316)	Data 0.017 (0.230)	
[16/123]	Time 0.046 (0.299)	Data 0.003 (0.216)	
[17/123]	Time 0.135 (0.289)	Data 0.088 (0.208)	
[18/123]	Time 0.149 (0.282)	Data 0.118 (0.203)	
[19/123]	Time 0.055 (0.270)	Data 0.013 (0.193)	
[20/123]	Time 0.085 (0.260)	Data 0.016 (0.184)	
[21/123]	Time 0.043 (0.250)	Data 0.001 (0.175)	
[22/123]	Time 0.083 (0.242)	Data 0.018 (0.168)	
[23/123]	Time 0.075 (0.235)	Data 0.002 (0.161)	
[24/123]	Time 0.078 (0.229)	Data 0.001 (0.154)	
[25/123]	Time 0.058 (0.222)	Data 0.014 (0.149)	
[26/123]	Time 0.069 (0.216)	Data 0.016 (0.144)	
[27/123]	Time 0.049 (0.210)	Data 0.011 (0.139)	
[28/123]	Time 0.076 (0.205)	Data 0.014 (0.134)	
[29/123]	Time 0.066 (0.200)	Data 0.014 (0.130)	
[30/123]	Time 0.041 (0.195)	Data 0.001 (0.126)	
[31/123]	Time 0.035 (0.190)	Data 0.002 (0.122)	
[32/123]	Time 0.056 (0.186)	Data 0.001 (0.118)	
[33/123]	Time 0.055 (0.182)	Data 0.017 (0.115)	
[34/123]	Time 0.058 (0.178)	Data 0.013 (0.112)	
[35/123]	Time 0.057 (0.174)	Data 0.014 (0.109)	
[36/123]	Time 0.182 (0.175)	Data 0.110 (0.109)	
[37/123]	Time 0.340 (0.179)	Data 0.316 (0.115)	
[38/123]	Time 0.062 (0.176)	Data 0.019 (0.112)	
[39/123]	Time 0.053 (0.173)	Data 0.011 (0.110)	
[40/123]	Time 0.067 (0.170)	Data 0.015 (0.107)	
[41/123]	Time 0.055 (0.167)	Data 0.014 (0.105)	
[42/123]	Time 0.075 (0.165)	Data 0.002 (0.103)	
[43/123]	Time 0.041 (0.162)	Data 0.011 (0.100)	
[44/123]	Time 0.058 (0.160)	Data 0.001 (0.098)	
[45/123]	Time 0.056 (0.158)	Data 0.006 (0.096)	
[46/123]	Time 0.031 (0.155)	Data 0.001 (0.094)	
[47/123]	Time 0.020 (0.152)	Data 0.001 (0.092)	
[48/123]	Time 0.040 (0.150)	Data 0.001 (0.090)	
[49/123]	Time 0.046 (0.148)	Data 0.006 (0.088)	
[50/123]	Time 0.038 (0.145)	Data 0.008 (0.087)	
[51/123]	Time 0.561 (0.154)	Data 0.521 (0.095)	
[52/123]	Time 0.320 (0.157)	Data 0.276 (0.099)	
[53/123]	Time 0.052 (0.155)	Data 0.027 (0.097)	
[54/123]	Time 0.067 (0.153)	Data 0.027 (0.096)	
[55/123]	Time 0.051 (0.151)	Data 0.001 (0.094)	
[56/123]	Time 0.047 (0.149)	Data 0.006 (0.093)	
[57/123]	Time 0.048 (0.148)	Data 0.007 (0.091)	
[58/123]	Time 0.053 (0.146)	Data 0.014 (0.090)	
[59/123]	Time 0.086 (0.145)	Data 0.047 (0.089)	
[60/123]	Time 0.055 (0.144)	Data 0.015 (0.088)	
[61/123]	Time 0.078 (0.142)	Data 0.008 (0.087)	
[62/123]	Time 0.049 (0.141)	Data 0.001 (0.085)	
[63/123]	Time 0.025 (0.139)	Data 0.001 (0.084)	
[64/123]	Time 0.078 (0.138)	Data 0.018 (0.083)	
[65/123]	Time 0.042 (0.137)	Data 0.001 (0.082)	
[66/123]	Time 0.049 (0.135)	Data 0.018 (0.081)	
[67/123]	Time 0.593 (0.142)	Data 0.520 (0.087)	
[68/123]	Time 0.272 (0.144)	Data 0.199 (0.089)	
[69/123]	Time 0.076 (0.143)	Data 0.000 (0.088)	
[70/123]	Time 0.043 (0.142)	Data 0.000 (0.086)	
[71/123]	Time 0.053 (0.140)	Data 0.006 (0.085)	
[72/123]	Time 0.066 (0.139)	Data 0.001 (0.084)	
[73/123]	Time 0.059 (0.138)	Data 0.015 (0.083)	
[74/123]	Time 0.057 (0.137)	Data 0.017 (0.082)	
[75/123]	Time 0.081 (0.136)	Data 0.008 (0.081)	
[76/123]	Time 0.040 (0.135)	Data 0.001 (0.080)	
[77/123]	Time 0.071 (0.134)	Data 0.014 (0.079)	
[78/123]	Time 0.045 (0.133)	Data 0.001 (0.078)	
[79/123]	Time 0.060 (0.132)	Data 0.014 (0.078)	
[80/123]	Time 0.089 (0.132)	Data 0.019 (0.077)	
[81/123]	Time 0.078 (0.131)	Data 0.031 (0.076)	
[82/123]	Time 0.075 (0.130)	Data 0.013 (0.075)	
[83/123]	Time 0.230 (0.132)	Data 0.171 (0.077)	
[84/123]	Time 0.224 (0.133)	Data 0.152 (0.078)	
[85/123]	Time 0.294 (0.135)	Data 0.236 (0.079)	
[86/123]	Time 0.040 (0.133)	Data 0.001 (0.078)	
[87/123]	Time 0.068 (0.133)	Data 0.011 (0.078)	
[88/123]	Time 0.074 (0.132)	Data 0.002 (0.077)	
[89/123]	Time 0.044 (0.131)	Data 0.016 (0.076)	
[90/123]	Time 0.039 (0.130)	Data 0.001 (0.075)	
[91/123]	Time 0.051 (0.129)	Data 0.028 (0.075)	
[92/123]	Time 0.060 (0.128)	Data 0.001 (0.074)	
[93/123]	Time 0.064 (0.128)	Data 0.000 (0.073)	
[94/123]	Time 0.053 (0.127)	Data 0.000 (0.072)	
[95/123]	Time 0.058 (0.126)	Data 0.001 (0.072)	
[96/123]	Time 0.057 (0.125)	Data 0.001 (0.071)	
[97/123]	Time 0.027 (0.124)	Data 0.000 (0.070)	
[98/123]	Time 0.048 (0.124)	Data 0.000 (0.069)	
[99/123]	Time 0.312 (0.126)	Data 0.261 (0.071)	
[100/123]	Time 0.088 (0.125)	Data 0.045 (0.071)	
[101/123]	Time 0.268 (0.127)	Data 0.246 (0.073)	
[102/123]	Time 0.018 (0.126)	Data 0.000 (0.072)	
[103/123]	Time 0.018 (0.125)	Data 0.000 (0.071)	
[104/123]	Time 0.018 (0.123)	Data 0.000 (0.071)	
[105/123]	Time 0.018 (0.122)	Data 0.000 (0.070)	
[106/123]	Time 0.018 (0.121)	Data 0.000 (0.069)	
[107/123]	Time 0.019 (0.121)	Data 0.000 (0.069)	
[108/123]	Time 0.018 (0.120)	Data 0.000 (0.068)	
[109/123]	Time 0.018 (0.119)	Data 0.000 (0.068)	
[110/123]	Time 0.018 (0.118)	Data 0.000 (0.067)	
[111/123]	Time 0.018 (0.117)	Data 0.000 (0.066)	
[112/123]	Time 0.017 (0.116)	Data 0.000 (0.066)	
[113/123]	Time 0.016 (0.115)	Data 0.000 (0.065)	
[114/123]	Time 0.016 (0.114)	Data 0.000 (0.065)	
[115/123]	Time 0.107 (0.114)	Data 0.090 (0.065)	
[116/123]	Time 0.016 (0.113)	Data 0.000 (0.064)	
[117/123]	Time 0.205 (0.114)	Data 0.189 (0.065)	
[118/123]	Time 0.016 (0.113)	Data 0.000 (0.065)	
[119/123]	Time 0.016 (0.112)	Data 0.000 (0.064)	
[120/123]	Time 0.016 (0.112)	Data 0.000 (0.064)	
[121/123]	Time 0.016 (0.111)	Data 0.000 (0.063)	
[122/123]	Time 0.016 (0.110)	Data 0.000 (0.063)	
[123/123]	Time 0.016 (0.109)	Data 0.000 (0.062)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.01', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.549 (4.549)	Data 3.780 (3.780)	
[2/123]	Time 0.014 (2.282)	Data 0.001 (1.891)	
[3/123]	Time 0.013 (1.526)	Data 0.000 (1.260)	
[4/123]	Time 0.014 (1.148)	Data 0.000 (0.945)	
[5/123]	Time 0.014 (0.921)	Data 0.000 (0.756)	
[6/123]	Time 0.014 (0.770)	Data 0.000 (0.630)	
[7/123]	Time 0.286 (0.701)	Data 0.272 (0.579)	
[8/123]	Time 0.015 (0.615)	Data 0.001 (0.507)	
[9/123]	Time 0.016 (0.548)	Data 0.001 (0.451)	
[10/123]	Time 0.016 (0.495)	Data 0.001 (0.406)	
[11/123]	Time 0.016 (0.452)	Data 0.001 (0.369)	
[12/123]	Time 0.016 (0.415)	Data 0.001 (0.338)	
[13/123]	Time 0.018 (0.385)	Data 0.001 (0.312)	
[14/123]	Time 0.017 (0.358)	Data 0.001 (0.290)	
[15/123]	Time 0.015 (0.336)	Data 0.001 (0.271)	
[16/123]	Time 0.016 (0.316)	Data 0.001 (0.254)	
[17/123]	Time 0.016 (0.298)	Data 0.001 (0.239)	
[18/123]	Time 0.018 (0.282)	Data 0.001 (0.226)	
[19/123]	Time 0.042 (0.270)	Data 0.012 (0.215)	
[20/123]	Time 0.021 (0.257)	Data 0.001 (0.204)	
[21/123]	Time 0.023 (0.246)	Data 0.001 (0.194)	
[22/123]	Time 0.049 (0.237)	Data 0.035 (0.187)	
[23/123]	Time 0.028 (0.228)	Data 0.015 (0.179)	
[24/123]	Time 0.037 (0.220)	Data 0.003 (0.172)	
[25/123]	Time 0.014 (0.212)	Data 0.001 (0.165)	
[26/123]	Time 0.016 (0.204)	Data 0.001 (0.159)	
[27/123]	Time 0.014 (0.197)	Data 0.001 (0.153)	
[28/123]	Time 0.026 (0.191)	Data 0.013 (0.148)	
[29/123]	Time 0.032 (0.186)	Data 0.018 (0.144)	
[30/123]	Time 0.029 (0.181)	Data 0.014 (0.139)	
[31/123]	Time 0.018 (0.175)	Data 0.001 (0.135)	
[32/123]	Time 0.032 (0.171)	Data 0.011 (0.131)	
[33/123]	Time 0.043 (0.167)	Data 0.007 (0.127)	
[34/123]	Time 0.054 (0.164)	Data 0.040 (0.125)	
[35/123]	Time 0.041 (0.160)	Data 0.007 (0.121)	
[36/123]	Time 0.187 (0.161)	Data 0.173 (0.123)	
[37/123]	Time 0.014 (0.157)	Data 0.000 (0.119)	
[38/123]	Time 0.014 (0.153)	Data 0.000 (0.116)	
[39/123]	Time 0.264 (0.156)	Data 0.251 (0.120)	
[40/123]	Time 0.488 (0.164)	Data 0.475 (0.129)	
[41/123]	Time 0.336 (0.168)	Data 0.322 (0.133)	
[42/123]	Time 0.043 (0.165)	Data 0.001 (0.130)	
[43/123]	Time 0.014 (0.162)	Data 0.001 (0.127)	
[44/123]	Time 0.065 (0.160)	Data 0.037 (0.125)	
[45/123]	Time 0.014 (0.157)	Data 0.001 (0.122)	
[46/123]	Time 0.048 (0.154)	Data 0.006 (0.120)	
[47/123]	Time 0.026 (0.151)	Data 0.001 (0.117)	
[48/123]	Time 0.014 (0.149)	Data 0.001 (0.115)	
[49/123]	Time 0.034 (0.146)	Data 0.013 (0.113)	
[50/123]	Time 0.464 (0.153)	Data 0.450 (0.120)	
[51/123]	Time 0.029 (0.150)	Data 0.001 (0.117)	
[52/123]	Time 0.038 (0.148)	Data 0.004 (0.115)	
[53/123]	Time 0.036 (0.146)	Data 0.001 (0.113)	
[54/123]	Time 0.032 (0.144)	Data 0.013 (0.111)	
[55/123]	Time 0.031 (0.142)	Data 0.013 (0.109)	
[56/123]	Time 0.161 (0.142)	Data 0.146 (0.110)	
[57/123]	Time 0.434 (0.147)	Data 0.420 (0.115)	
[58/123]	Time 0.051 (0.146)	Data 0.014 (0.114)	
[59/123]	Time 0.016 (0.143)	Data 0.001 (0.112)	
[60/123]	Time 0.269 (0.145)	Data 0.253 (0.114)	
[61/123]	Time 0.025 (0.143)	Data 0.010 (0.112)	
[62/123]	Time 0.029 (0.142)	Data 0.013 (0.111)	
[63/123]	Time 0.037 (0.140)	Data 0.011 (0.109)	
[64/123]	Time 0.022 (0.138)	Data 0.008 (0.108)	
[65/123]	Time 0.038 (0.137)	Data 0.013 (0.106)	
[66/123]	Time 0.496 (0.142)	Data 0.470 (0.112)	
[67/123]	Time 0.016 (0.140)	Data 0.001 (0.110)	
[68/123]	Time 0.030 (0.139)	Data 0.015 (0.109)	
[69/123]	Time 0.042 (0.137)	Data 0.011 (0.107)	
[70/123]	Time 0.016 (0.135)	Data 0.001 (0.106)	
[71/123]	Time 0.019 (0.134)	Data 0.002 (0.104)	
[72/123]	Time 0.018 (0.132)	Data 0.003 (0.103)	
[73/123]	Time 0.162 (0.133)	Data 0.139 (0.103)	
[74/123]	Time 0.015 (0.131)	Data 0.001 (0.102)	
[75/123]	Time 0.043 (0.130)	Data 0.014 (0.101)	
[76/123]	Time 0.503 (0.135)	Data 0.489 (0.106)	
[77/123]	Time 0.036 (0.133)	Data 0.006 (0.105)	
[78/123]	Time 0.019 (0.132)	Data 0.005 (0.103)	
[79/123]	Time 0.043 (0.131)	Data 0.021 (0.102)	
[80/123]	Time 0.029 (0.130)	Data 0.007 (0.101)	
[81/123]	Time 0.040 (0.128)	Data 0.012 (0.100)	
[82/123]	Time 0.302 (0.131)	Data 0.287 (0.102)	
[83/123]	Time 0.039 (0.129)	Data 0.013 (0.101)	
[84/123]	Time 0.023 (0.128)	Data 0.008 (0.100)	
[85/123]	Time 0.044 (0.127)	Data 0.028 (0.099)	
[86/123]	Time 0.045 (0.126)	Data 0.017 (0.098)	
[87/123]	Time 0.024 (0.125)	Data 0.001 (0.097)	
[88/123]	Time 0.015 (0.124)	Data 0.001 (0.096)	
[89/123]	Time 0.700 (0.130)	Data 0.686 (0.103)	
[90/123]	Time 0.029 (0.129)	Data 0.006 (0.102)	
[91/123]	Time 0.026 (0.128)	Data 0.011 (0.101)	
[92/123]	Time 0.116 (0.128)	Data 0.102 (0.101)	
[93/123]	Time 0.058 (0.127)	Data 0.000 (0.100)	
[94/123]	Time 0.028 (0.126)	Data 0.001 (0.098)	
[95/123]	Time 0.021 (0.125)	Data 0.000 (0.097)	
[96/123]	Time 0.034 (0.124)	Data 0.001 (0.096)	
[97/123]	Time 0.022 (0.123)	Data 0.001 (0.095)	
[98/123]	Time 0.267 (0.124)	Data 0.252 (0.097)	
[99/123]	Time 0.015 (0.123)	Data 0.000 (0.096)	
[100/123]	Time 0.021 (0.122)	Data 0.001 (0.095)	
[101/123]	Time 0.043 (0.122)	Data 0.001 (0.094)	
[102/123]	Time 0.026 (0.121)	Data 0.000 (0.093)	
[103/123]	Time 0.015 (0.120)	Data 0.000 (0.092)	
[104/123]	Time 0.025 (0.119)	Data 0.000 (0.092)	
[105/123]	Time 0.380 (0.121)	Data 0.366 (0.094)	
[106/123]	Time 0.014 (0.120)	Data 0.000 (0.093)	
[107/123]	Time 0.015 (0.119)	Data 0.001 (0.092)	
[108/123]	Time 0.069 (0.119)	Data 0.055 (0.092)	
[109/123]	Time 0.015 (0.118)	Data 0.000 (0.091)	
[110/123]	Time 0.014 (0.117)	Data 0.000 (0.090)	
[111/123]	Time 0.014 (0.116)	Data 0.000 (0.090)	
[112/123]	Time 0.014 (0.115)	Data 0.000 (0.089)	
[113/123]	Time 0.014 (0.114)	Data 0.000 (0.088)	
[114/123]	Time 0.132 (0.114)	Data 0.118 (0.088)	
[115/123]	Time 0.014 (0.113)	Data 0.000 (0.087)	
[116/123]	Time 0.014 (0.113)	Data 0.000 (0.087)	
[117/123]	Time 0.014 (0.112)	Data 0.000 (0.086)	
[118/123]	Time 0.014 (0.111)	Data 0.000 (0.085)	
[119/123]	Time 0.013 (0.110)	Data 0.000 (0.085)	
[120/123]	Time 0.013 (0.109)	Data 0.000 (0.084)	
[121/123]	Time 0.115 (0.109)	Data 0.101 (0.084)	
[122/123]	Time 0.013 (0.108)	Data 0.000 (0.083)	
[123/123]	Time 0.013 (0.108)	Data 0.000 (0.083)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.01', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.371 (4.371)	Data 3.522 (3.522)	
[2/123]	Time 0.070 (2.220)	Data 0.000 (1.761)	
[3/123]	Time 0.150 (1.530)	Data 0.132 (1.218)	
[4/123]	Time 0.018 (1.152)	Data 0.000 (0.914)	
[5/123]	Time 0.018 (0.925)	Data 0.000 (0.731)	
[6/123]	Time 0.018 (0.774)	Data 0.001 (0.609)	
[7/123]	Time 0.019 (0.666)	Data 0.001 (0.522)	
[8/123]	Time 0.020 (0.585)	Data 0.001 (0.457)	
[9/123]	Time 0.026 (0.523)	Data 0.008 (0.407)	
[10/123]	Time 0.018 (0.473)	Data 0.001 (0.367)	
[11/123]	Time 0.017 (0.431)	Data 0.001 (0.333)	
[12/123]	Time 0.027 (0.398)	Data 0.001 (0.306)	
[13/123]	Time 0.106 (0.375)	Data 0.072 (0.288)	
[14/123]	Time 0.022 (0.350)	Data 0.002 (0.267)	
[15/123]	Time 0.034 (0.329)	Data 0.001 (0.250)	
[16/123]	Time 0.025 (0.310)	Data 0.002 (0.234)	
[17/123]	Time 0.030 (0.294)	Data 0.001 (0.220)	
[18/123]	Time 0.061 (0.281)	Data 0.001 (0.208)	
[19/123]	Time 0.060 (0.269)	Data 0.014 (0.198)	
[20/123]	Time 0.018 (0.256)	Data 0.001 (0.188)	
[21/123]	Time 0.025 (0.245)	Data 0.000 (0.179)	
[22/123]	Time 0.024 (0.235)	Data 0.001 (0.171)	
[23/123]	Time 0.024 (0.226)	Data 0.001 (0.164)	
[24/123]	Time 0.049 (0.219)	Data 0.001 (0.157)	
[25/123]	Time 0.024 (0.211)	Data 0.005 (0.151)	
[26/123]	Time 0.026 (0.204)	Data 0.001 (0.145)	
[27/123]	Time 0.022 (0.197)	Data 0.000 (0.140)	
[28/123]	Time 0.026 (0.191)	Data 0.001 (0.135)	
[29/123]	Time 0.023 (0.185)	Data 0.000 (0.130)	
[30/123]	Time 0.024 (0.180)	Data 0.000 (0.126)	
[31/123]	Time 0.024 (0.175)	Data 0.001 (0.122)	
[32/123]	Time 0.048 (0.171)	Data 0.014 (0.118)	
[33/123]	Time 0.055 (0.167)	Data 0.014 (0.115)	
[34/123]	Time 0.058 (0.164)	Data 0.016 (0.112)	
[35/123]	Time 0.714 (0.180)	Data 0.671 (0.128)	
[36/123]	Time 0.044 (0.176)	Data 0.001 (0.125)	
[37/123]	Time 0.320 (0.180)	Data 0.296 (0.129)	
[38/123]	Time 0.067 (0.177)	Data 0.016 (0.126)	
[39/123]	Time 0.050 (0.174)	Data 0.000 (0.123)	
[40/123]	Time 0.162 (0.173)	Data 0.122 (0.123)	
[41/123]	Time 0.047 (0.170)	Data 0.008 (0.120)	
[42/123]	Time 0.036 (0.167)	Data 0.001 (0.117)	
[43/123]	Time 0.053 (0.165)	Data 0.013 (0.115)	
[44/123]	Time 0.075 (0.163)	Data 0.024 (0.113)	
[45/123]	Time 0.081 (0.161)	Data 0.021 (0.111)	
[46/123]	Time 0.039 (0.158)	Data 0.001 (0.109)	
[47/123]	Time 0.063 (0.156)	Data 0.015 (0.107)	
[48/123]	Time 0.052 (0.154)	Data 0.012 (0.105)	
[49/123]	Time 0.043 (0.152)	Data 0.019 (0.103)	
[50/123]	Time 0.064 (0.150)	Data 0.017 (0.101)	
[51/123]	Time 0.705 (0.161)	Data 0.671 (0.112)	
[52/123]	Time 0.054 (0.159)	Data 0.016 (0.110)	
[53/123]	Time 0.058 (0.157)	Data 0.022 (0.109)	
[54/123]	Time 0.038 (0.155)	Data 0.001 (0.107)	
[55/123]	Time 0.080 (0.153)	Data 0.001 (0.105)	
[56/123]	Time 0.053 (0.151)	Data 0.026 (0.103)	
[57/123]	Time 0.069 (0.150)	Data 0.032 (0.102)	
[58/123]	Time 0.043 (0.148)	Data 0.001 (0.100)	
[59/123]	Time 0.039 (0.146)	Data 0.002 (0.099)	
[60/123]	Time 0.060 (0.145)	Data 0.013 (0.097)	
[61/123]	Time 0.054 (0.143)	Data 0.013 (0.096)	
[62/123]	Time 0.047 (0.142)	Data 0.019 (0.095)	
[63/123]	Time 0.058 (0.140)	Data 0.016 (0.093)	
[64/123]	Time 0.057 (0.139)	Data 0.014 (0.092)	
[65/123]	Time 0.047 (0.138)	Data 0.009 (0.091)	
[66/123]	Time 0.062 (0.137)	Data 0.014 (0.090)	
[67/123]	Time 0.462 (0.141)	Data 0.420 (0.095)	
[68/123]	Time 0.029 (0.140)	Data 0.001 (0.093)	
[69/123]	Time 0.026 (0.138)	Data 0.001 (0.092)	
[70/123]	Time 0.020 (0.136)	Data 0.001 (0.091)	
[71/123]	Time 0.045 (0.135)	Data 0.001 (0.089)	
[72/123]	Time 0.385 (0.139)	Data 0.338 (0.093)	
[73/123]	Time 0.053 (0.137)	Data 0.006 (0.092)	
[74/123]	Time 0.036 (0.136)	Data 0.001 (0.090)	
[75/123]	Time 0.039 (0.135)	Data 0.005 (0.089)	
[76/123]	Time 0.055 (0.134)	Data 0.014 (0.088)	
[77/123]	Time 0.042 (0.133)	Data 0.001 (0.087)	
[78/123]	Time 0.038 (0.131)	Data 0.001 (0.086)	
[79/123]	Time 0.041 (0.130)	Data 0.001 (0.085)	
[80/123]	Time 0.057 (0.129)	Data 0.000 (0.084)	
[81/123]	Time 0.040 (0.128)	Data 0.001 (0.083)	
[82/123]	Time 0.053 (0.127)	Data 0.007 (0.082)	
[83/123]	Time 0.474 (0.131)	Data 0.432 (0.086)	
[84/123]	Time 0.052 (0.130)	Data 0.028 (0.085)	
[85/123]	Time 0.477 (0.135)	Data 0.435 (0.090)	
[86/123]	Time 0.045 (0.134)	Data 0.001 (0.089)	
[87/123]	Time 0.055 (0.133)	Data 0.001 (0.088)	
[88/123]	Time 0.047 (0.132)	Data 0.011 (0.087)	
[89/123]	Time 0.026 (0.130)	Data 0.002 (0.086)	
[90/123]	Time 0.029 (0.129)	Data 0.001 (0.085)	
[91/123]	Time 0.024 (0.128)	Data 0.001 (0.084)	
[92/123]	Time 0.037 (0.127)	Data 0.000 (0.083)	
[93/123]	Time 0.038 (0.126)	Data 0.000 (0.082)	
[94/123]	Time 0.057 (0.125)	Data 0.000 (0.081)	
[95/123]	Time 0.053 (0.125)	Data 0.000 (0.080)	
[96/123]	Time 0.056 (0.124)	Data 0.001 (0.080)	
[97/123]	Time 0.054 (0.123)	Data 0.012 (0.079)	
[98/123]	Time 0.045 (0.122)	Data 0.006 (0.078)	
[99/123]	Time 0.234 (0.124)	Data 0.209 (0.079)	
[100/123]	Time 0.051 (0.123)	Data 0.000 (0.079)	
[101/123]	Time 0.251 (0.124)	Data 0.219 (0.080)	
[102/123]	Time 0.018 (0.123)	Data 0.001 (0.079)	
[103/123]	Time 0.017 (0.122)	Data 0.000 (0.078)	
[104/123]	Time 0.018 (0.121)	Data 0.001 (0.078)	
[105/123]	Time 0.017 (0.120)	Data 0.000 (0.077)	
[106/123]	Time 0.017 (0.119)	Data 0.000 (0.076)	
[107/123]	Time 0.017 (0.118)	Data 0.000 (0.076)	
[108/123]	Time 0.017 (0.117)	Data 0.000 (0.075)	
[109/123]	Time 0.019 (0.116)	Data 0.000 (0.074)	
[110/123]	Time 0.062 (0.116)	Data 0.045 (0.074)	
[111/123]	Time 0.017 (0.115)	Data 0.000 (0.073)	
[112/123]	Time 0.016 (0.114)	Data 0.000 (0.073)	
[113/123]	Time 0.016 (0.113)	Data 0.000 (0.072)	
[114/123]	Time 0.017 (0.112)	Data 0.000 (0.071)	
[115/123]	Time 0.264 (0.114)	Data 0.248 (0.073)	
[116/123]	Time 0.016 (0.113)	Data 0.000 (0.072)	
[117/123]	Time 0.016 (0.112)	Data 0.000 (0.072)	
[118/123]	Time 0.016 (0.111)	Data 0.000 (0.071)	
[119/123]	Time 0.016 (0.110)	Data 0.000 (0.070)	
[120/123]	Time 0.016 (0.110)	Data 0.000 (0.070)	
[121/123]	Time 0.016 (0.109)	Data 0.000 (0.069)	
[122/123]	Time 0.016 (0.108)	Data 0.000 (0.069)	
[123/123]	Time 0.016 (0.107)	Data 0.000 (0.068)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.001', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs32_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.759 (4.759)	Data 4.100 (4.100)	
[2/123]	Time 0.057 (2.408)	Data 0.043 (2.072)	
[3/123]	Time 0.014 (1.610)	Data 0.000 (1.381)	
[4/123]	Time 0.014 (1.211)	Data 0.000 (1.036)	
[5/123]	Time 0.015 (0.972)	Data 0.000 (0.829)	
[6/123]	Time 0.015 (0.812)	Data 0.001 (0.691)	
[7/123]	Time 0.015 (0.698)	Data 0.001 (0.592)	
[8/123]	Time 0.015 (0.613)	Data 0.001 (0.518)	
[9/123]	Time 0.016 (0.547)	Data 0.001 (0.461)	
[10/123]	Time 0.014 (0.493)	Data 0.000 (0.415)	
[11/123]	Time 0.015 (0.450)	Data 0.001 (0.377)	
[12/123]	Time 0.021 (0.414)	Data 0.001 (0.346)	
[13/123]	Time 0.015 (0.383)	Data 0.001 (0.319)	
[14/123]	Time 0.015 (0.357)	Data 0.001 (0.296)	
[15/123]	Time 0.029 (0.335)	Data 0.015 (0.278)	
[16/123]	Time 0.028 (0.316)	Data 0.014 (0.261)	
[17/123]	Time 0.028 (0.299)	Data 0.014 (0.247)	
[18/123]	Time 0.028 (0.284)	Data 0.014 (0.234)	
[19/123]	Time 0.032 (0.271)	Data 0.012 (0.222)	
[20/123]	Time 0.019 (0.258)	Data 0.006 (0.211)	
[21/123]	Time 0.026 (0.247)	Data 0.012 (0.202)	
[22/123]	Time 0.039 (0.238)	Data 0.025 (0.194)	
[23/123]	Time 0.020 (0.228)	Data 0.006 (0.186)	
[24/123]	Time 0.034 (0.220)	Data 0.014 (0.178)	
[25/123]	Time 0.025 (0.212)	Data 0.012 (0.172)	
[26/123]	Time 0.028 (0.205)	Data 0.014 (0.166)	
[27/123]	Time 0.032 (0.199)	Data 0.018 (0.160)	
[28/123]	Time 0.028 (0.193)	Data 0.014 (0.155)	
[29/123]	Time 0.015 (0.187)	Data 0.001 (0.150)	
[30/123]	Time 0.015 (0.181)	Data 0.001 (0.145)	
[31/123]	Time 0.037 (0.176)	Data 0.008 (0.140)	
[32/123]	Time 0.015 (0.171)	Data 0.001 (0.136)	
[33/123]	Time 0.036 (0.167)	Data 0.017 (0.132)	
[34/123]	Time 0.216 (0.168)	Data 0.202 (0.134)	
[35/123]	Time 0.281 (0.172)	Data 0.259 (0.138)	
[36/123]	Time 0.093 (0.170)	Data 0.079 (0.136)	
[37/123]	Time 0.348 (0.174)	Data 0.334 (0.142)	
[38/123]	Time 0.030 (0.171)	Data 0.000 (0.138)	
[39/123]	Time 0.429 (0.177)	Data 0.416 (0.145)	
[40/123]	Time 0.025 (0.173)	Data 0.001 (0.142)	
[41/123]	Time 0.036 (0.170)	Data 0.023 (0.139)	
[42/123]	Time 0.043 (0.167)	Data 0.013 (0.136)	
[43/123]	Time 0.014 (0.163)	Data 0.001 (0.132)	
[44/123]	Time 0.041 (0.161)	Data 0.017 (0.130)	
[45/123]	Time 0.024 (0.158)	Data 0.001 (0.127)	
[46/123]	Time 0.029 (0.155)	Data 0.001 (0.124)	
[47/123]	Time 0.204 (0.156)	Data 0.190 (0.126)	
[48/123]	Time 0.044 (0.154)	Data 0.012 (0.123)	
[49/123]	Time 0.019 (0.151)	Data 0.001 (0.121)	
[50/123]	Time 0.030 (0.148)	Data 0.015 (0.119)	
[51/123]	Time 0.192 (0.149)	Data 0.177 (0.120)	
[52/123]	Time 0.168 (0.150)	Data 0.153 (0.120)	
[53/123]	Time 0.578 (0.158)	Data 0.564 (0.129)	
[54/123]	Time 0.043 (0.156)	Data 0.012 (0.127)	
[55/123]	Time 0.029 (0.153)	Data 0.001 (0.124)	
[56/123]	Time 0.235 (0.155)	Data 0.218 (0.126)	
[57/123]	Time 0.048 (0.153)	Data 0.001 (0.124)	
[58/123]	Time 0.015 (0.150)	Data 0.001 (0.122)	
[59/123]	Time 0.059 (0.149)	Data 0.014 (0.120)	
[60/123]	Time 0.030 (0.147)	Data 0.006 (0.118)	
[61/123]	Time 0.044 (0.145)	Data 0.023 (0.116)	
[62/123]	Time 0.032 (0.143)	Data 0.016 (0.115)	
[63/123]	Time 0.031 (0.142)	Data 0.016 (0.113)	
[64/123]	Time 0.053 (0.140)	Data 0.014 (0.112)	
[65/123]	Time 0.034 (0.139)	Data 0.002 (0.110)	
[66/123]	Time 0.031 (0.137)	Data 0.002 (0.108)	
[67/123]	Time 0.031 (0.135)	Data 0.001 (0.107)	
[68/123]	Time 0.030 (0.134)	Data 0.014 (0.105)	
[69/123]	Time 0.671 (0.142)	Data 0.656 (0.113)	
[70/123]	Time 0.034 (0.140)	Data 0.006 (0.112)	
[71/123]	Time 0.025 (0.139)	Data 0.001 (0.110)	
[72/123]	Time 0.103 (0.138)	Data 0.072 (0.110)	
[73/123]	Time 0.032 (0.137)	Data 0.001 (0.108)	
[74/123]	Time 0.016 (0.135)	Data 0.001 (0.107)	
[75/123]	Time 0.036 (0.134)	Data 0.006 (0.106)	
[76/123]	Time 0.023 (0.132)	Data 0.001 (0.104)	
[77/123]	Time 0.433 (0.136)	Data 0.402 (0.108)	
[78/123]	Time 0.016 (0.135)	Data 0.001 (0.107)	
[79/123]	Time 0.026 (0.133)	Data 0.012 (0.105)	
[80/123]	Time 0.038 (0.132)	Data 0.014 (0.104)	
[81/123]	Time 0.026 (0.131)	Data 0.001 (0.103)	
[82/123]	Time 0.025 (0.129)	Data 0.001 (0.102)	
[83/123]	Time 0.030 (0.128)	Data 0.015 (0.101)	
[84/123]	Time 0.027 (0.127)	Data 0.013 (0.100)	
[85/123]	Time 0.650 (0.133)	Data 0.621 (0.106)	
[86/123]	Time 0.028 (0.132)	Data 0.001 (0.105)	
[87/123]	Time 0.044 (0.131)	Data 0.029 (0.104)	
[88/123]	Time 0.034 (0.130)	Data 0.020 (0.103)	
[89/123]	Time 0.028 (0.129)	Data 0.013 (0.102)	
[90/123]	Time 0.040 (0.128)	Data 0.025 (0.101)	
[91/123]	Time 0.041 (0.127)	Data 0.013 (0.100)	
[92/123]	Time 0.014 (0.126)	Data 0.000 (0.099)	
[93/123]	Time 0.422 (0.129)	Data 0.393 (0.102)	
[94/123]	Time 0.024 (0.128)	Data 0.000 (0.101)	
[95/123]	Time 0.015 (0.126)	Data 0.001 (0.100)	
[96/123]	Time 0.032 (0.125)	Data 0.017 (0.099)	
[97/123]	Time 0.032 (0.124)	Data 0.017 (0.098)	
[98/123]	Time 0.015 (0.123)	Data 0.001 (0.097)	
[99/123]	Time 0.027 (0.122)	Data 0.001 (0.096)	
[100/123]	Time 0.031 (0.121)	Data 0.000 (0.095)	
[101/123]	Time 0.563 (0.126)	Data 0.545 (0.100)	
[102/123]	Time 0.014 (0.125)	Data 0.000 (0.099)	
[103/123]	Time 0.014 (0.124)	Data 0.000 (0.098)	
[104/123]	Time 0.014 (0.123)	Data 0.000 (0.097)	
[105/123]	Time 0.014 (0.122)	Data 0.000 (0.096)	
[106/123]	Time 0.013 (0.121)	Data 0.000 (0.095)	
[107/123]	Time 0.014 (0.120)	Data 0.000 (0.094)	
[108/123]	Time 0.014 (0.119)	Data 0.000 (0.093)	
[109/123]	Time 0.191 (0.119)	Data 0.178 (0.094)	
[110/123]	Time 0.013 (0.118)	Data 0.000 (0.093)	
[111/123]	Time 0.013 (0.117)	Data 0.000 (0.092)	
[112/123]	Time 0.013 (0.116)	Data 0.000 (0.092)	
[113/123]	Time 0.013 (0.115)	Data 0.000 (0.091)	
[114/123]	Time 0.013 (0.115)	Data 0.000 (0.090)	
[115/123]	Time 0.013 (0.114)	Data 0.000 (0.089)	
[116/123]	Time 0.013 (0.113)	Data 0.000 (0.088)	
[117/123]	Time 0.045 (0.112)	Data 0.033 (0.088)	
[118/123]	Time 0.013 (0.111)	Data 0.000 (0.087)	
[119/123]	Time 0.013 (0.111)	Data 0.000 (0.086)	
[120/123]	Time 0.027 (0.110)	Data 0.015 (0.086)	
[121/123]	Time 0.012 (0.109)	Data 0.000 (0.085)	
[122/123]	Time 0.012 (0.108)	Data 0.000 (0.084)	
[123/123]	Time 0.012 (0.107)	Data 0.000 (0.084)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.001', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=32, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs32_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.134 (4.134)	Data 3.014 (3.014)	
[2/123]	Time 0.264 (2.199)	Data 0.243 (1.628)	
[3/123]	Time 0.017 (1.472)	Data 0.000 (1.086)	
[4/123]	Time 0.017 (1.108)	Data 0.000 (0.814)	
[5/123]	Time 0.018 (0.890)	Data 0.000 (0.651)	
[6/123]	Time 0.018 (0.745)	Data 0.001 (0.543)	
[7/123]	Time 0.019 (0.641)	Data 0.001 (0.465)	
[8/123]	Time 0.022 (0.564)	Data 0.001 (0.407)	
[9/123]	Time 0.125 (0.515)	Data 0.096 (0.373)	
[10/123]	Time 0.033 (0.467)	Data 0.000 (0.336)	
[11/123]	Time 0.035 (0.427)	Data 0.001 (0.305)	
[12/123]	Time 0.029 (0.394)	Data 0.001 (0.280)	
[13/123]	Time 0.025 (0.366)	Data 0.002 (0.258)	
[14/123]	Time 0.035 (0.342)	Data 0.002 (0.240)	
[15/123]	Time 0.037 (0.322)	Data 0.002 (0.224)	
[16/123]	Time 0.065 (0.306)	Data 0.017 (0.211)	
[17/123]	Time 0.072 (0.292)	Data 0.020 (0.200)	
[18/123]	Time 0.044 (0.278)	Data 0.001 (0.189)	
[19/123]	Time 0.065 (0.267)	Data 0.007 (0.179)	
[20/123]	Time 0.043 (0.256)	Data 0.001 (0.170)	
[21/123]	Time 0.054 (0.246)	Data 0.015 (0.163)	
[22/123]	Time 0.082 (0.239)	Data 0.013 (0.156)	
[23/123]	Time 0.034 (0.230)	Data 0.001 (0.149)	
[24/123]	Time 0.055 (0.223)	Data 0.013 (0.144)	
[25/123]	Time 0.036 (0.215)	Data 0.014 (0.139)	
[26/123]	Time 0.025 (0.208)	Data 0.001 (0.133)	
[27/123]	Time 0.024 (0.201)	Data 0.001 (0.128)	
[28/123]	Time 0.026 (0.195)	Data 0.001 (0.124)	
[29/123]	Time 0.028 (0.189)	Data 0.001 (0.120)	
[30/123]	Time 0.072 (0.185)	Data 0.015 (0.116)	
[31/123]	Time 0.049 (0.181)	Data 0.001 (0.112)	
[32/123]	Time 0.053 (0.177)	Data 0.011 (0.109)	
[33/123]	Time 0.062 (0.173)	Data 0.017 (0.106)	
[34/123]	Time 0.138 (0.172)	Data 0.113 (0.107)	
[35/123]	Time 0.060 (0.169)	Data 0.001 (0.104)	
[36/123]	Time 0.031 (0.165)	Data 0.001 (0.101)	
[37/123]	Time 0.024 (0.161)	Data 0.001 (0.098)	
[38/123]	Time 0.163 (0.161)	Data 0.121 (0.099)	
[39/123]	Time 0.060 (0.159)	Data 0.001 (0.096)	
[40/123]	Time 0.055 (0.156)	Data 0.012 (0.094)	
[41/123]	Time 0.198 (0.157)	Data 0.156 (0.096)	
[42/123]	Time 0.051 (0.155)	Data 0.013 (0.094)	
[43/123]	Time 0.103 (0.153)	Data 0.080 (0.093)	
[44/123]	Time 0.079 (0.152)	Data 0.040 (0.092)	
[45/123]	Time 0.103 (0.151)	Data 0.064 (0.091)	
[46/123]	Time 0.050 (0.149)	Data 0.010 (0.090)	
[47/123]	Time 0.044 (0.146)	Data 0.009 (0.088)	
[48/123]	Time 0.058 (0.144)	Data 0.016 (0.086)	
[49/123]	Time 0.058 (0.143)	Data 0.014 (0.085)	
[50/123]	Time 0.472 (0.149)	Data 0.432 (0.092)	
[51/123]	Time 0.038 (0.147)	Data 0.007 (0.090)	
[52/123]	Time 0.102 (0.146)	Data 0.021 (0.089)	
[53/123]	Time 0.083 (0.145)	Data 0.001 (0.087)	
[54/123]	Time 0.039 (0.143)	Data 0.001 (0.086)	
[55/123]	Time 0.079 (0.142)	Data 0.014 (0.084)	
[56/123]	Time 0.031 (0.140)	Data 0.001 (0.083)	
[57/123]	Time 0.131 (0.140)	Data 0.076 (0.083)	
[58/123]	Time 0.093 (0.139)	Data 0.037 (0.082)	
[59/123]	Time 0.131 (0.139)	Data 0.090 (0.082)	
[60/123]	Time 0.048 (0.137)	Data 0.009 (0.081)	
[61/123]	Time 0.078 (0.136)	Data 0.014 (0.080)	
[62/123]	Time 0.058 (0.135)	Data 0.001 (0.079)	
[63/123]	Time 0.060 (0.134)	Data 0.012 (0.077)	
[64/123]	Time 0.059 (0.133)	Data 0.001 (0.076)	
[65/123]	Time 0.028 (0.131)	Data 0.001 (0.075)	
[66/123]	Time 0.612 (0.138)	Data 0.587 (0.083)	
[67/123]	Time 0.077 (0.137)	Data 0.014 (0.082)	
[68/123]	Time 0.051 (0.136)	Data 0.012 (0.081)	
[69/123]	Time 0.057 (0.135)	Data 0.001 (0.080)	
[70/123]	Time 0.068 (0.134)	Data 0.001 (0.079)	
[71/123]	Time 0.065 (0.133)	Data 0.001 (0.077)	
[72/123]	Time 0.045 (0.132)	Data 0.012 (0.077)	
[73/123]	Time 0.069 (0.131)	Data 0.028 (0.076)	
[74/123]	Time 0.053 (0.130)	Data 0.008 (0.075)	
[75/123]	Time 0.075 (0.129)	Data 0.016 (0.074)	
[76/123]	Time 0.056 (0.128)	Data 0.007 (0.073)	
[77/123]	Time 0.051 (0.127)	Data 0.006 (0.072)	
[78/123]	Time 0.061 (0.126)	Data 0.001 (0.071)	
[79/123]	Time 0.055 (0.126)	Data 0.012 (0.071)	
[80/123]	Time 0.046 (0.125)	Data 0.020 (0.070)	
[81/123]	Time 0.062 (0.124)	Data 0.022 (0.069)	
[82/123]	Time 0.723 (0.131)	Data 0.680 (0.077)	
[83/123]	Time 0.055 (0.130)	Data 0.013 (0.076)	
[84/123]	Time 0.058 (0.129)	Data 0.014 (0.075)	
[85/123]	Time 0.063 (0.128)	Data 0.013 (0.075)	
[86/123]	Time 0.058 (0.128)	Data 0.001 (0.074)	
[87/123]	Time 0.042 (0.127)	Data 0.001 (0.073)	
[88/123]	Time 0.055 (0.126)	Data 0.013 (0.072)	
[89/123]	Time 0.089 (0.125)	Data 0.046 (0.072)	
[90/123]	Time 0.037 (0.124)	Data 0.014 (0.071)	
[91/123]	Time 0.217 (0.125)	Data 0.167 (0.072)	
[92/123]	Time 0.057 (0.125)	Data 0.000 (0.072)	
[93/123]	Time 0.055 (0.124)	Data 0.000 (0.071)	
[94/123]	Time 0.038 (0.123)	Data 0.000 (0.070)	
[95/123]	Time 0.058 (0.122)	Data 0.000 (0.069)	
[96/123]	Time 0.057 (0.122)	Data 0.000 (0.069)	
[97/123]	Time 0.052 (0.121)	Data 0.000 (0.068)	
[98/123]	Time 0.305 (0.123)	Data 0.260 (0.070)	
[99/123]	Time 0.069 (0.122)	Data 0.012 (0.069)	
[100/123]	Time 0.127 (0.122)	Data 0.021 (0.069)	
[101/123]	Time 0.045 (0.122)	Data 0.001 (0.068)	
[102/123]	Time 0.040 (0.121)	Data 0.004 (0.068)	
[103/123]	Time 0.036 (0.120)	Data 0.000 (0.067)	
[104/123]	Time 0.027 (0.119)	Data 0.001 (0.066)	
[105/123]	Time 0.022 (0.118)	Data 0.000 (0.066)	
[106/123]	Time 0.031 (0.117)	Data 0.000 (0.065)	
[107/123]	Time 0.186 (0.118)	Data 0.168 (0.066)	
[108/123]	Time 0.018 (0.117)	Data 0.000 (0.065)	
[109/123]	Time 0.018 (0.116)	Data 0.000 (0.065)	
[110/123]	Time 0.018 (0.115)	Data 0.000 (0.064)	
[111/123]	Time 0.018 (0.114)	Data 0.000 (0.064)	
[112/123]	Time 0.018 (0.114)	Data 0.000 (0.063)	
[113/123]	Time 0.018 (0.113)	Data 0.000 (0.062)	
[114/123]	Time 0.091 (0.112)	Data 0.075 (0.063)	
[115/123]	Time 0.016 (0.112)	Data 0.000 (0.062)	
[116/123]	Time 0.016 (0.111)	Data 0.000 (0.062)	
[117/123]	Time 0.057 (0.110)	Data 0.041 (0.061)	
[118/123]	Time 0.016 (0.110)	Data 0.000 (0.061)	
[119/123]	Time 0.016 (0.109)	Data 0.000 (0.060)	
[120/123]	Time 0.016 (0.108)	Data 0.000 (0.060)	
[121/123]	Time 0.030 (0.107)	Data 0.013 (0.059)	
[122/123]	Time 0.016 (0.107)	Data 0.000 (0.059)	
[123/123]	Time 0.059 (0.106)	Data 0.042 (0.059)	
end bs32
start bs64
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.1', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.1/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.379 (4.379)	Data 3.377 (3.377)	
[2/123]	Time 0.015 (2.197)	Data 0.001 (1.689)	
[3/123]	Time 0.013 (1.469)	Data 0.000 (1.126)	
[4/123]	Time 0.014 (1.105)	Data 0.000 (0.845)	
[5/123]	Time 0.014 (0.887)	Data 0.000 (0.676)	
[6/123]	Time 0.549 (0.831)	Data 0.535 (0.652)	
[7/123]	Time 0.014 (0.714)	Data 0.000 (0.559)	
[8/123]	Time 0.014 (0.626)	Data 0.000 (0.489)	
[9/123]	Time 0.014 (0.558)	Data 0.000 (0.435)	
[10/123]	Time 0.014 (0.504)	Data 0.000 (0.392)	
[11/123]	Time 0.015 (0.460)	Data 0.001 (0.356)	
[12/123]	Time 0.015 (0.422)	Data 0.000 (0.326)	
[13/123]	Time 0.015 (0.391)	Data 0.001 (0.301)	
[14/123]	Time 0.015 (0.364)	Data 0.001 (0.280)	
[15/123]	Time 0.015 (0.341)	Data 0.001 (0.261)	
[16/123]	Time 0.016 (0.321)	Data 0.001 (0.245)	
[17/123]	Time 0.057 (0.305)	Data 0.025 (0.232)	
[18/123]	Time 0.032 (0.290)	Data 0.001 (0.219)	
[19/123]	Time 0.015 (0.276)	Data 0.001 (0.208)	
[20/123]	Time 0.021 (0.263)	Data 0.001 (0.197)	
[21/123]	Time 0.045 (0.252)	Data 0.016 (0.189)	
[22/123]	Time 0.027 (0.242)	Data 0.001 (0.180)	
[23/123]	Time 0.028 (0.233)	Data 0.001 (0.172)	
[24/123]	Time 0.016 (0.224)	Data 0.001 (0.165)	
[25/123]	Time 0.032 (0.216)	Data 0.017 (0.159)	
[26/123]	Time 0.030 (0.209)	Data 0.017 (0.154)	
[27/123]	Time 0.031 (0.202)	Data 0.010 (0.148)	
[28/123]	Time 0.031 (0.196)	Data 0.001 (0.143)	
[29/123]	Time 0.025 (0.190)	Data 0.011 (0.139)	
[30/123]	Time 0.033 (0.185)	Data 0.007 (0.134)	
[31/123]	Time 0.030 (0.180)	Data 0.001 (0.130)	
[32/123]	Time 0.014 (0.175)	Data 0.001 (0.126)	
[33/123]	Time 0.027 (0.170)	Data 0.013 (0.123)	
[34/123]	Time 0.036 (0.167)	Data 0.022 (0.120)	
[35/123]	Time 0.030 (0.163)	Data 0.000 (0.116)	
[36/123]	Time 0.014 (0.158)	Data 0.001 (0.113)	
[37/123]	Time 0.040 (0.155)	Data 0.027 (0.111)	
[38/123]	Time 0.537 (0.165)	Data 0.517 (0.121)	
[39/123]	Time 0.425 (0.172)	Data 0.405 (0.129)	
[40/123]	Time 0.014 (0.168)	Data 0.001 (0.125)	
[41/123]	Time 0.037 (0.165)	Data 0.011 (0.123)	
[42/123]	Time 0.366 (0.170)	Data 0.350 (0.128)	
[43/123]	Time 0.069 (0.167)	Data 0.056 (0.126)	
[44/123]	Time 0.032 (0.164)	Data 0.001 (0.123)	
[45/123]	Time 0.014 (0.161)	Data 0.001 (0.121)	
[46/123]	Time 0.028 (0.158)	Data 0.014 (0.118)	
[47/123]	Time 0.043 (0.156)	Data 0.015 (0.116)	
[48/123]	Time 0.016 (0.153)	Data 0.001 (0.114)	
[49/123]	Time 0.029 (0.150)	Data 0.015 (0.112)	
[50/123]	Time 0.026 (0.148)	Data 0.006 (0.110)	
[51/123]	Time 0.030 (0.145)	Data 0.016 (0.108)	
[52/123]	Time 0.014 (0.143)	Data 0.001 (0.106)	
[53/123]	Time 0.015 (0.140)	Data 0.001 (0.104)	
[54/123]	Time 1.096 (0.158)	Data 1.081 (0.122)	
[55/123]	Time 0.042 (0.156)	Data 0.018 (0.120)	
[56/123]	Time 0.024 (0.154)	Data 0.001 (0.118)	
[57/123]	Time 0.018 (0.151)	Data 0.004 (0.116)	
[58/123]	Time 0.016 (0.149)	Data 0.001 (0.114)	
[59/123]	Time 0.032 (0.147)	Data 0.017 (0.112)	
[60/123]	Time 0.028 (0.145)	Data 0.013 (0.111)	
[61/123]	Time 0.016 (0.143)	Data 0.001 (0.109)	
[62/123]	Time 0.016 (0.141)	Data 0.002 (0.107)	
[63/123]	Time 0.029 (0.139)	Data 0.001 (0.105)	
[64/123]	Time 0.030 (0.137)	Data 0.015 (0.104)	
[65/123]	Time 0.027 (0.136)	Data 0.013 (0.103)	
[66/123]	Time 0.029 (0.134)	Data 0.015 (0.101)	
[67/123]	Time 0.020 (0.132)	Data 0.006 (0.100)	
[68/123]	Time 0.050 (0.131)	Data 0.022 (0.099)	
[69/123]	Time 0.028 (0.130)	Data 0.001 (0.097)	
[70/123]	Time 0.915 (0.141)	Data 0.899 (0.109)	
[71/123]	Time 0.127 (0.141)	Data 0.114 (0.109)	
[72/123]	Time 0.039 (0.139)	Data 0.011 (0.107)	
[73/123]	Time 0.042 (0.138)	Data 0.002 (0.106)	
[74/123]	Time 0.020 (0.136)	Data 0.001 (0.105)	
[75/123]	Time 0.014 (0.135)	Data 0.001 (0.103)	
[76/123]	Time 0.055 (0.134)	Data 0.042 (0.102)	
[77/123]	Time 0.032 (0.132)	Data 0.018 (0.101)	
[78/123]	Time 0.020 (0.131)	Data 0.007 (0.100)	
[79/123]	Time 0.054 (0.130)	Data 0.018 (0.099)	
[80/123]	Time 0.015 (0.128)	Data 0.001 (0.098)	
[81/123]	Time 0.029 (0.127)	Data 0.001 (0.097)	
[82/123]	Time 0.020 (0.126)	Data 0.006 (0.096)	
[83/123]	Time 0.033 (0.125)	Data 0.019 (0.095)	
[84/123]	Time 0.028 (0.124)	Data 0.014 (0.094)	
[85/123]	Time 0.215 (0.125)	Data 0.201 (0.095)	
[86/123]	Time 0.391 (0.128)	Data 0.360 (0.098)	
[87/123]	Time 0.211 (0.129)	Data 0.185 (0.099)	
[88/123]	Time 0.028 (0.128)	Data 0.012 (0.098)	
[89/123]	Time 0.033 (0.127)	Data 0.008 (0.097)	
[90/123]	Time 0.110 (0.126)	Data 0.092 (0.097)	
[91/123]	Time 0.041 (0.125)	Data 0.001 (0.096)	
[92/123]	Time 0.160 (0.126)	Data 0.145 (0.096)	
[93/123]	Time 0.030 (0.125)	Data 0.000 (0.095)	
[94/123]	Time 0.015 (0.124)	Data 0.000 (0.094)	
[95/123]	Time 0.031 (0.123)	Data 0.017 (0.094)	
[96/123]	Time 0.015 (0.122)	Data 0.001 (0.093)	
[97/123]	Time 0.017 (0.120)	Data 0.001 (0.092)	
[98/123]	Time 0.016 (0.119)	Data 0.001 (0.091)	
[99/123]	Time 0.017 (0.118)	Data 0.002 (0.090)	
[100/123]	Time 0.015 (0.117)	Data 0.001 (0.089)	
[101/123]	Time 0.033 (0.116)	Data 0.002 (0.088)	
[102/123]	Time 0.477 (0.120)	Data 0.464 (0.092)	
[103/123]	Time 0.186 (0.121)	Data 0.172 (0.093)	
[104/123]	Time 0.024 (0.120)	Data 0.001 (0.092)	
[105/123]	Time 0.015 (0.119)	Data 0.001 (0.091)	
[106/123]	Time 0.169 (0.119)	Data 0.155 (0.091)	
[107/123]	Time 0.014 (0.118)	Data 0.000 (0.091)	
[108/123]	Time 0.034 (0.117)	Data 0.021 (0.090)	
[109/123]	Time 0.013 (0.116)	Data 0.000 (0.089)	
[110/123]	Time 0.013 (0.116)	Data 0.000 (0.088)	
[111/123]	Time 0.013 (0.115)	Data 0.000 (0.087)	
[112/123]	Time 0.013 (0.114)	Data 0.000 (0.087)	
[113/123]	Time 0.013 (0.113)	Data 0.000 (0.086)	
[114/123]	Time 0.013 (0.112)	Data 0.000 (0.085)	
[115/123]	Time 0.013 (0.111)	Data 0.000 (0.084)	
[116/123]	Time 0.013 (0.110)	Data 0.000 (0.084)	
[117/123]	Time 0.028 (0.110)	Data 0.015 (0.083)	
[118/123]	Time 0.050 (0.109)	Data 0.037 (0.083)	
[119/123]	Time 0.173 (0.110)	Data 0.160 (0.083)	
[120/123]	Time 0.013 (0.109)	Data 0.000 (0.083)	
[121/123]	Time 0.012 (0.108)	Data 0.000 (0.082)	
[122/123]	Time 0.068 (0.108)	Data 0.056 (0.082)	
[123/123]	Time 0.012 (0.107)	Data 0.000 (0.081)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.1', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.1, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.1/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.656 (4.656)	Data 3.971 (3.971)	
[2/123]	Time 0.040 (2.348)	Data 0.012 (1.991)	
[3/123]	Time 0.018 (1.572)	Data 0.000 (1.328)	
[4/123]	Time 0.018 (1.183)	Data 0.000 (0.996)	
[5/123]	Time 0.019 (0.950)	Data 0.001 (0.797)	
[6/123]	Time 0.018 (0.795)	Data 0.000 (0.664)	
[7/123]	Time 0.018 (0.684)	Data 0.000 (0.569)	
[8/123]	Time 0.018 (0.601)	Data 0.001 (0.498)	
[9/123]	Time 0.018 (0.536)	Data 0.001 (0.443)	
[10/123]	Time 0.031 (0.485)	Data 0.003 (0.399)	
[11/123]	Time 0.022 (0.443)	Data 0.001 (0.363)	
[12/123]	Time 0.030 (0.409)	Data 0.001 (0.333)	
[13/123]	Time 0.065 (0.382)	Data 0.001 (0.307)	
[14/123]	Time 0.056 (0.359)	Data 0.016 (0.286)	
[15/123]	Time 0.072 (0.340)	Data 0.013 (0.268)	
[16/123]	Time 0.103 (0.325)	Data 0.027 (0.253)	
[17/123]	Time 0.054 (0.309)	Data 0.001 (0.238)	
[18/123]	Time 0.055 (0.295)	Data 0.013 (0.226)	
[19/123]	Time 0.031 (0.281)	Data 0.001 (0.214)	
[20/123]	Time 0.039 (0.269)	Data 0.016 (0.204)	
[21/123]	Time 0.026 (0.257)	Data 0.001 (0.194)	
[22/123]	Time 0.057 (0.248)	Data 0.015 (0.186)	
[23/123]	Time 0.036 (0.239)	Data 0.001 (0.178)	
[24/123]	Time 0.055 (0.231)	Data 0.014 (0.171)	
[25/123]	Time 0.048 (0.224)	Data 0.011 (0.165)	
[26/123]	Time 0.029 (0.217)	Data 0.001 (0.159)	
[27/123]	Time 0.024 (0.209)	Data 0.001 (0.153)	
[28/123]	Time 0.029 (0.203)	Data 0.001 (0.147)	
[29/123]	Time 0.037 (0.197)	Data 0.013 (0.143)	
[30/123]	Time 0.024 (0.192)	Data 0.001 (0.138)	
[31/123]	Time 0.024 (0.186)	Data 0.001 (0.134)	
[32/123]	Time 0.024 (0.181)	Data 0.001 (0.129)	
[33/123]	Time 0.045 (0.177)	Data 0.007 (0.126)	
[34/123]	Time 0.234 (0.179)	Data 0.189 (0.128)	
[35/123]	Time 0.350 (0.184)	Data 0.281 (0.132)	
[36/123]	Time 0.042 (0.180)	Data 0.001 (0.128)	
[37/123]	Time 0.066 (0.177)	Data 0.017 (0.125)	
[38/123]	Time 0.352 (0.181)	Data 0.311 (0.130)	
[39/123]	Time 0.041 (0.178)	Data 0.001 (0.127)	
[40/123]	Time 0.054 (0.174)	Data 0.011 (0.124)	
[41/123]	Time 0.032 (0.171)	Data 0.001 (0.121)	
[42/123]	Time 0.063 (0.168)	Data 0.004 (0.118)	
[43/123]	Time 0.038 (0.165)	Data 0.001 (0.115)	
[44/123]	Time 0.069 (0.163)	Data 0.017 (0.113)	
[45/123]	Time 0.052 (0.161)	Data 0.000 (0.111)	
[46/123]	Time 0.041 (0.158)	Data 0.001 (0.108)	
[47/123]	Time 0.033 (0.155)	Data 0.006 (0.106)	
[48/123]	Time 0.029 (0.153)	Data 0.001 (0.104)	
[49/123]	Time 0.055 (0.151)	Data 0.015 (0.102)	
[50/123]	Time 0.694 (0.162)	Data 0.654 (0.113)	
[51/123]	Time 0.039 (0.159)	Data 0.001 (0.111)	
[52/123]	Time 0.067 (0.158)	Data 0.014 (0.109)	
[53/123]	Time 0.025 (0.155)	Data 0.001 (0.107)	
[54/123]	Time 0.090 (0.154)	Data 0.037 (0.106)	
[55/123]	Time 0.064 (0.152)	Data 0.013 (0.104)	
[56/123]	Time 0.048 (0.150)	Data 0.012 (0.102)	
[57/123]	Time 0.072 (0.149)	Data 0.024 (0.101)	
[58/123]	Time 0.034 (0.147)	Data 0.012 (0.099)	
[59/123]	Time 0.027 (0.145)	Data 0.001 (0.098)	
[60/123]	Time 0.044 (0.143)	Data 0.014 (0.096)	
[61/123]	Time 0.071 (0.142)	Data 0.016 (0.095)	
[62/123]	Time 0.052 (0.141)	Data 0.011 (0.094)	
[63/123]	Time 0.045 (0.139)	Data 0.003 (0.092)	
[64/123]	Time 0.035 (0.137)	Data 0.001 (0.091)	
[65/123]	Time 0.053 (0.136)	Data 0.015 (0.090)	
[66/123]	Time 0.633 (0.144)	Data 0.592 (0.097)	
[67/123]	Time 0.051 (0.142)	Data 0.006 (0.096)	
[68/123]	Time 0.170 (0.143)	Data 0.133 (0.096)	
[69/123]	Time 0.075 (0.142)	Data 0.013 (0.095)	
[70/123]	Time 0.287 (0.144)	Data 0.234 (0.097)	
[71/123]	Time 0.052 (0.143)	Data 0.011 (0.096)	
[72/123]	Time 0.063 (0.141)	Data 0.009 (0.095)	
[73/123]	Time 0.043 (0.140)	Data 0.001 (0.094)	
[74/123]	Time 0.046 (0.139)	Data 0.001 (0.092)	
[75/123]	Time 0.054 (0.138)	Data 0.011 (0.091)	
[76/123]	Time 0.060 (0.137)	Data 0.019 (0.090)	
[77/123]	Time 0.027 (0.135)	Data 0.001 (0.089)	
[78/123]	Time 0.044 (0.134)	Data 0.001 (0.088)	
[79/123]	Time 0.054 (0.133)	Data 0.007 (0.087)	
[80/123]	Time 0.048 (0.132)	Data 0.013 (0.086)	
[81/123]	Time 0.057 (0.131)	Data 0.001 (0.085)	
[82/123]	Time 0.535 (0.136)	Data 0.489 (0.090)	
[83/123]	Time 0.068 (0.135)	Data 0.012 (0.089)	
[84/123]	Time 0.052 (0.134)	Data 0.000 (0.088)	
[85/123]	Time 0.042 (0.133)	Data 0.001 (0.087)	
[86/123]	Time 0.218 (0.134)	Data 0.176 (0.088)	
[87/123]	Time 0.044 (0.133)	Data 0.013 (0.087)	
[88/123]	Time 0.032 (0.132)	Data 0.009 (0.086)	
[89/123]	Time 0.026 (0.131)	Data 0.001 (0.085)	
[90/123]	Time 0.026 (0.130)	Data 0.001 (0.084)	
[91/123]	Time 0.046 (0.129)	Data 0.001 (0.083)	
[92/123]	Time 0.030 (0.128)	Data 0.000 (0.082)	
[93/123]	Time 0.039 (0.127)	Data 0.001 (0.082)	
[94/123]	Time 0.049 (0.126)	Data 0.000 (0.081)	
[95/123]	Time 0.043 (0.125)	Data 0.000 (0.080)	
[96/123]	Time 0.062 (0.124)	Data 0.000 (0.079)	
[97/123]	Time 0.052 (0.123)	Data 0.000 (0.078)	
[98/123]	Time 0.514 (0.127)	Data 0.472 (0.082)	
[99/123]	Time 0.028 (0.126)	Data 0.000 (0.081)	
[100/123]	Time 0.057 (0.126)	Data 0.000 (0.081)	
[101/123]	Time 0.037 (0.125)	Data 0.000 (0.080)	
[102/123]	Time 0.119 (0.125)	Data 0.094 (0.080)	
[103/123]	Time 0.021 (0.124)	Data 0.001 (0.079)	
[104/123]	Time 0.021 (0.123)	Data 0.000 (0.078)	
[105/123]	Time 0.019 (0.122)	Data 0.001 (0.078)	
[106/123]	Time 0.018 (0.121)	Data 0.001 (0.077)	
[107/123]	Time 0.021 (0.120)	Data 0.000 (0.076)	
[108/123]	Time 0.018 (0.119)	Data 0.000 (0.076)	
[109/123]	Time 0.022 (0.118)	Data 0.000 (0.075)	
[110/123]	Time 0.022 (0.117)	Data 0.000 (0.074)	
[111/123]	Time 0.026 (0.116)	Data 0.000 (0.074)	
[112/123]	Time 0.026 (0.116)	Data 0.000 (0.073)	
[113/123]	Time 0.020 (0.115)	Data 0.001 (0.072)	
[114/123]	Time 0.232 (0.116)	Data 0.216 (0.073)	
[115/123]	Time 0.016 (0.115)	Data 0.000 (0.073)	
[116/123]	Time 0.016 (0.114)	Data 0.000 (0.072)	
[117/123]	Time 0.016 (0.113)	Data 0.000 (0.072)	
[118/123]	Time 0.042 (0.113)	Data 0.025 (0.071)	
[119/123]	Time 0.016 (0.112)	Data 0.000 (0.071)	
[120/123]	Time 0.016 (0.111)	Data 0.000 (0.070)	
[121/123]	Time 0.016 (0.110)	Data 0.000 (0.069)	
[122/123]	Time 0.016 (0.109)	Data 0.000 (0.069)	
[123/123]	Time 0.016 (0.109)	Data 0.000 (0.068)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.01', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.01/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.811 (4.811)	Data 4.048 (4.048)	
[2/123]	Time 0.014 (2.413)	Data 0.000 (2.024)	
[3/123]	Time 0.013 (1.613)	Data 0.000 (1.350)	
[4/123]	Time 0.014 (1.213)	Data 0.000 (1.012)	
[5/123]	Time 0.014 (0.973)	Data 0.000 (0.810)	
[6/123]	Time 0.014 (0.813)	Data 0.001 (0.675)	
[7/123]	Time 0.014 (0.699)	Data 0.000 (0.579)	
[8/123]	Time 0.015 (0.614)	Data 0.001 (0.506)	
[9/123]	Time 0.015 (0.547)	Data 0.001 (0.450)	
[10/123]	Time 0.015 (0.494)	Data 0.001 (0.405)	
[11/123]	Time 0.015 (0.451)	Data 0.001 (0.368)	
[12/123]	Time 0.016 (0.414)	Data 0.001 (0.338)	
[13/123]	Time 0.016 (0.384)	Data 0.001 (0.312)	
[14/123]	Time 0.094 (0.363)	Data 0.080 (0.295)	
[15/123]	Time 0.015 (0.340)	Data 0.001 (0.276)	
[16/123]	Time 0.015 (0.319)	Data 0.001 (0.259)	
[17/123]	Time 0.014 (0.302)	Data 0.001 (0.243)	
[18/123]	Time 0.022 (0.286)	Data 0.001 (0.230)	
[19/123]	Time 0.027 (0.272)	Data 0.001 (0.218)	
[20/123]	Time 0.021 (0.260)	Data 0.001 (0.207)	
[21/123]	Time 0.022 (0.248)	Data 0.008 (0.198)	
[22/123]	Time 0.015 (0.238)	Data 0.001 (0.189)	
[23/123]	Time 0.033 (0.229)	Data 0.019 (0.181)	
[24/123]	Time 0.037 (0.221)	Data 0.012 (0.174)	
[25/123]	Time 0.015 (0.213)	Data 0.001 (0.167)	
[26/123]	Time 0.016 (0.205)	Data 0.001 (0.161)	
[27/123]	Time 0.016 (0.198)	Data 0.001 (0.155)	
[28/123]	Time 0.016 (0.192)	Data 0.001 (0.149)	
[29/123]	Time 0.014 (0.185)	Data 0.000 (0.144)	
[30/123]	Time 0.014 (0.180)	Data 0.001 (0.140)	
[31/123]	Time 0.016 (0.174)	Data 0.000 (0.135)	
[32/123]	Time 0.015 (0.169)	Data 0.001 (0.131)	
[33/123]	Time 0.017 (0.165)	Data 0.001 (0.127)	
[34/123]	Time 1.440 (0.202)	Data 1.426 (0.165)	
[35/123]	Time 0.029 (0.197)	Data 0.015 (0.161)	
[36/123]	Time 0.028 (0.193)	Data 0.015 (0.157)	
[37/123]	Time 0.028 (0.188)	Data 0.014 (0.153)	
[38/123]	Time 0.033 (0.184)	Data 0.005 (0.149)	
[39/123]	Time 0.041 (0.181)	Data 0.017 (0.146)	
[40/123]	Time 0.014 (0.176)	Data 0.000 (0.142)	
[41/123]	Time 0.019 (0.173)	Data 0.006 (0.139)	
[42/123]	Time 0.046 (0.170)	Data 0.017 (0.136)	
[43/123]	Time 0.072 (0.167)	Data 0.043 (0.134)	
[44/123]	Time 0.015 (0.164)	Data 0.001 (0.131)	
[45/123]	Time 0.023 (0.161)	Data 0.008 (0.128)	
[46/123]	Time 0.047 (0.158)	Data 0.016 (0.125)	
[47/123]	Time 0.048 (0.156)	Data 0.001 (0.123)	
[48/123]	Time 0.040 (0.153)	Data 0.011 (0.120)	
[49/123]	Time 0.015 (0.151)	Data 0.001 (0.118)	
[50/123]	Time 0.879 (0.165)	Data 0.864 (0.133)	
[51/123]	Time 0.025 (0.162)	Data 0.006 (0.130)	
[52/123]	Time 0.028 (0.160)	Data 0.014 (0.128)	
[53/123]	Time 0.021 (0.157)	Data 0.006 (0.126)	
[54/123]	Time 0.043 (0.155)	Data 0.029 (0.124)	
[55/123]	Time 0.039 (0.153)	Data 0.013 (0.122)	
[56/123]	Time 0.024 (0.151)	Data 0.001 (0.120)	
[57/123]	Time 0.026 (0.148)	Data 0.011 (0.118)	
[58/123]	Time 0.256 (0.150)	Data 0.241 (0.120)	
[59/123]	Time 0.036 (0.148)	Data 0.021 (0.118)	
[60/123]	Time 0.031 (0.146)	Data 0.014 (0.117)	
[61/123]	Time 0.025 (0.144)	Data 0.010 (0.115)	
[62/123]	Time 0.034 (0.143)	Data 0.004 (0.113)	
[63/123]	Time 0.024 (0.141)	Data 0.001 (0.111)	
[64/123]	Time 0.030 (0.139)	Data 0.015 (0.110)	
[65/123]	Time 0.033 (0.137)	Data 0.018 (0.109)	
[66/123]	Time 0.408 (0.141)	Data 0.394 (0.113)	
[67/123]	Time 0.049 (0.140)	Data 0.013 (0.111)	
[68/123]	Time 0.217 (0.141)	Data 0.203 (0.113)	
[69/123]	Time 0.021 (0.140)	Data 0.006 (0.111)	
[70/123]	Time 0.036 (0.138)	Data 0.022 (0.110)	
[71/123]	Time 0.049 (0.137)	Data 0.018 (0.109)	
[72/123]	Time 0.017 (0.135)	Data 0.001 (0.107)	
[73/123]	Time 0.028 (0.134)	Data 0.006 (0.106)	
[74/123]	Time 0.166 (0.134)	Data 0.136 (0.106)	
[75/123]	Time 0.016 (0.133)	Data 0.001 (0.105)	
[76/123]	Time 0.144 (0.133)	Data 0.130 (0.105)	
[77/123]	Time 0.048 (0.132)	Data 0.013 (0.104)	
[78/123]	Time 0.016 (0.130)	Data 0.001 (0.102)	
[79/123]	Time 0.025 (0.129)	Data 0.010 (0.101)	
[80/123]	Time 0.026 (0.127)	Data 0.001 (0.100)	
[81/123]	Time 0.033 (0.126)	Data 0.006 (0.099)	
[82/123]	Time 0.724 (0.134)	Data 0.710 (0.106)	
[83/123]	Time 0.031 (0.132)	Data 0.011 (0.105)	
[84/123]	Time 0.267 (0.134)	Data 0.253 (0.107)	
[85/123]	Time 0.024 (0.133)	Data 0.005 (0.106)	
[86/123]	Time 0.033 (0.132)	Data 0.005 (0.105)	
[87/123]	Time 0.025 (0.130)	Data 0.010 (0.104)	
[88/123]	Time 0.029 (0.129)	Data 0.015 (0.103)	
[89/123]	Time 0.028 (0.128)	Data 0.014 (0.102)	
[90/123]	Time 0.042 (0.127)	Data 0.012 (0.101)	
[91/123]	Time 0.024 (0.126)	Data 0.001 (0.099)	
[92/123]	Time 0.028 (0.125)	Data 0.014 (0.098)	
[93/123]	Time 0.015 (0.124)	Data 0.001 (0.097)	
[94/123]	Time 0.141 (0.124)	Data 0.126 (0.098)	
[95/123]	Time 0.022 (0.123)	Data 0.001 (0.097)	
[96/123]	Time 0.038 (0.122)	Data 0.006 (0.096)	
[97/123]	Time 0.027 (0.121)	Data 0.001 (0.095)	
[98/123]	Time 0.885 (0.129)	Data 0.862 (0.103)	
[99/123]	Time 0.030 (0.128)	Data 0.001 (0.102)	
[100/123]	Time 0.113 (0.128)	Data 0.099 (0.102)	
[101/123]	Time 0.023 (0.127)	Data 0.001 (0.101)	
[102/123]	Time 0.015 (0.125)	Data 0.001 (0.100)	
[103/123]	Time 0.016 (0.124)	Data 0.001 (0.099)	
[104/123]	Time 0.016 (0.123)	Data 0.001 (0.098)	
[105/123]	Time 0.015 (0.122)	Data 0.000 (0.097)	
[106/123]	Time 0.015 (0.121)	Data 0.000 (0.096)	
[107/123]	Time 0.014 (0.120)	Data 0.000 (0.095)	
[108/123]	Time 0.015 (0.119)	Data 0.001 (0.094)	
[109/123]	Time 0.015 (0.118)	Data 0.001 (0.093)	
[110/123]	Time 0.037 (0.118)	Data 0.023 (0.093)	
[111/123]	Time 0.015 (0.117)	Data 0.000 (0.092)	
[112/123]	Time 0.014 (0.116)	Data 0.000 (0.091)	
[113/123]	Time 0.014 (0.115)	Data 0.000 (0.090)	
[114/123]	Time 0.284 (0.116)	Data 0.271 (0.092)	
[115/123]	Time 0.012 (0.115)	Data 0.000 (0.091)	
[116/123]	Time 0.035 (0.115)	Data 0.022 (0.090)	
[117/123]	Time 0.012 (0.114)	Data 0.000 (0.090)	
[118/123]	Time 0.012 (0.113)	Data 0.000 (0.089)	
[119/123]	Time 0.012 (0.112)	Data 0.000 (0.088)	
[120/123]	Time 0.012 (0.111)	Data 0.000 (0.087)	
[121/123]	Time 0.012 (0.111)	Data 0.000 (0.087)	
[122/123]	Time 0.012 (0.110)	Data 0.000 (0.086)	
[123/123]	Time 0.012 (0.109)	Data 0.000 (0.085)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.01', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.01, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.01/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.355 (4.355)	Data 3.361 (3.361)	
[2/123]	Time 0.088 (2.222)	Data 0.071 (1.716)	
[3/123]	Time 0.017 (1.487)	Data 0.000 (1.144)	
[4/123]	Time 0.017 (1.119)	Data 0.000 (0.858)	
[5/123]	Time 0.017 (0.899)	Data 0.000 (0.687)	
[6/123]	Time 0.018 (0.752)	Data 0.000 (0.572)	
[7/123]	Time 0.018 (0.647)	Data 0.001 (0.491)	
[8/123]	Time 0.018 (0.569)	Data 0.001 (0.429)	
[9/123]	Time 0.018 (0.508)	Data 0.000 (0.382)	
[10/123]	Time 0.019 (0.459)	Data 0.001 (0.344)	
[11/123]	Time 0.027 (0.420)	Data 0.001 (0.312)	
[12/123]	Time 0.021 (0.386)	Data 0.000 (0.286)	
[13/123]	Time 0.033 (0.359)	Data 0.006 (0.265)	
[14/123]	Time 0.024 (0.335)	Data 0.001 (0.246)	
[15/123]	Time 0.065 (0.317)	Data 0.001 (0.230)	
[16/123]	Time 0.031 (0.299)	Data 0.011 (0.216)	
[17/123]	Time 0.059 (0.285)	Data 0.016 (0.204)	
[18/123]	Time 0.035 (0.271)	Data 0.012 (0.194)	
[19/123]	Time 0.036 (0.259)	Data 0.001 (0.183)	
[20/123]	Time 0.048 (0.248)	Data 0.026 (0.176)	
[21/123]	Time 0.042 (0.239)	Data 0.001 (0.167)	
[22/123]	Time 0.029 (0.229)	Data 0.002 (0.160)	
[23/123]	Time 0.039 (0.221)	Data 0.001 (0.153)	
[24/123]	Time 0.029 (0.213)	Data 0.001 (0.147)	
[25/123]	Time 0.052 (0.206)	Data 0.006 (0.141)	
[26/123]	Time 0.033 (0.200)	Data 0.003 (0.136)	
[27/123]	Time 0.019 (0.193)	Data 0.001 (0.131)	
[28/123]	Time 0.038 (0.187)	Data 0.006 (0.126)	
[29/123]	Time 0.064 (0.183)	Data 0.017 (0.122)	
[30/123]	Time 0.055 (0.179)	Data 0.013 (0.119)	
[31/123]	Time 0.026 (0.174)	Data 0.001 (0.115)	
[32/123]	Time 0.026 (0.169)	Data 0.001 (0.111)	
[33/123]	Time 0.023 (0.165)	Data 0.001 (0.108)	
[34/123]	Time 0.382 (0.171)	Data 0.339 (0.115)	
[35/123]	Time 0.046 (0.168)	Data 0.001 (0.112)	
[36/123]	Time 0.214 (0.169)	Data 0.164 (0.113)	
[37/123]	Time 0.058 (0.166)	Data 0.023 (0.111)	
[38/123]	Time 0.101 (0.164)	Data 0.056 (0.109)	
[39/123]	Time 0.081 (0.162)	Data 0.037 (0.107)	
[40/123]	Time 0.155 (0.162)	Data 0.053 (0.106)	
[41/123]	Time 0.056 (0.159)	Data 0.001 (0.103)	
[42/123]	Time 0.067 (0.157)	Data 0.001 (0.101)	
[43/123]	Time 0.090 (0.156)	Data 0.013 (0.099)	
[44/123]	Time 0.034 (0.153)	Data 0.001 (0.097)	
[45/123]	Time 0.077 (0.151)	Data 0.052 (0.096)	
[46/123]	Time 0.052 (0.149)	Data 0.025 (0.094)	
[47/123]	Time 0.057 (0.147)	Data 0.001 (0.092)	
[48/123]	Time 0.090 (0.146)	Data 0.001 (0.090)	
[49/123]	Time 0.040 (0.144)	Data 0.001 (0.088)	
[50/123]	Time 0.042 (0.142)	Data 0.001 (0.087)	
[51/123]	Time 0.088 (0.141)	Data 0.063 (0.086)	
[52/123]	Time 0.494 (0.147)	Data 0.468 (0.094)	
[53/123]	Time 0.060 (0.146)	Data 0.000 (0.092)	
[54/123]	Time 0.252 (0.148)	Data 0.186 (0.094)	
[55/123]	Time 0.065 (0.146)	Data 0.026 (0.092)	
[56/123]	Time 0.040 (0.144)	Data 0.001 (0.091)	
[57/123]	Time 0.050 (0.143)	Data 0.011 (0.089)	
[58/123]	Time 0.064 (0.141)	Data 0.024 (0.088)	
[59/123]	Time 0.040 (0.140)	Data 0.016 (0.087)	
[60/123]	Time 0.055 (0.138)	Data 0.016 (0.086)	
[61/123]	Time 0.043 (0.137)	Data 0.001 (0.084)	
[62/123]	Time 0.053 (0.135)	Data 0.013 (0.083)	
[63/123]	Time 0.024 (0.133)	Data 0.001 (0.082)	
[64/123]	Time 0.026 (0.132)	Data 0.001 (0.081)	
[65/123]	Time 0.044 (0.130)	Data 0.001 (0.079)	
[66/123]	Time 0.655 (0.138)	Data 0.591 (0.087)	
[67/123]	Time 0.179 (0.139)	Data 0.121 (0.088)	
[68/123]	Time 0.056 (0.138)	Data 0.020 (0.087)	
[69/123]	Time 0.047 (0.136)	Data 0.001 (0.085)	
[70/123]	Time 0.056 (0.135)	Data 0.011 (0.084)	
[71/123]	Time 0.041 (0.134)	Data 0.001 (0.083)	
[72/123]	Time 0.058 (0.133)	Data 0.005 (0.082)	
[73/123]	Time 0.040 (0.132)	Data 0.001 (0.081)	
[74/123]	Time 0.182 (0.132)	Data 0.145 (0.082)	
[75/123]	Time 0.064 (0.131)	Data 0.001 (0.081)	
[76/123]	Time 0.050 (0.130)	Data 0.001 (0.080)	
[77/123]	Time 0.045 (0.129)	Data 0.009 (0.079)	
[78/123]	Time 0.051 (0.128)	Data 0.032 (0.078)	
[79/123]	Time 0.024 (0.127)	Data 0.001 (0.077)	
[80/123]	Time 0.025 (0.126)	Data 0.001 (0.076)	
[81/123]	Time 0.027 (0.124)	Data 0.001 (0.075)	
[82/123]	Time 0.209 (0.125)	Data 0.158 (0.076)	
[83/123]	Time 0.234 (0.127)	Data 0.184 (0.078)	
[84/123]	Time 0.072 (0.126)	Data 0.028 (0.077)	
[85/123]	Time 0.357 (0.129)	Data 0.313 (0.080)	
[86/123]	Time 0.038 (0.128)	Data 0.014 (0.079)	
[87/123]	Time 0.069 (0.127)	Data 0.013 (0.078)	
[88/123]	Time 0.026 (0.126)	Data 0.001 (0.077)	
[89/123]	Time 0.050 (0.125)	Data 0.006 (0.077)	
[90/123]	Time 0.032 (0.124)	Data 0.006 (0.076)	
[91/123]	Time 0.090 (0.124)	Data 0.021 (0.075)	
[92/123]	Time 0.039 (0.123)	Data 0.001 (0.074)	
[93/123]	Time 0.057 (0.122)	Data 0.001 (0.074)	
[94/123]	Time 0.059 (0.121)	Data 0.000 (0.073)	
[95/123]	Time 0.060 (0.121)	Data 0.001 (0.072)	
[96/123]	Time 0.060 (0.120)	Data 0.016 (0.072)	
[97/123]	Time 0.048 (0.119)	Data 0.000 (0.071)	
[98/123]	Time 0.053 (0.119)	Data 0.010 (0.070)	
[99/123]	Time 0.233 (0.120)	Data 0.188 (0.071)	
[100/123]	Time 0.045 (0.119)	Data 0.000 (0.071)	
[101/123]	Time 0.091 (0.119)	Data 0.012 (0.070)	
[102/123]	Time 0.313 (0.121)	Data 0.271 (0.072)	
[103/123]	Time 0.039 (0.120)	Data 0.001 (0.071)	
[104/123]	Time 0.043 (0.119)	Data 0.000 (0.071)	
[105/123]	Time 0.023 (0.118)	Data 0.001 (0.070)	
[106/123]	Time 0.020 (0.117)	Data 0.001 (0.069)	
[107/123]	Time 0.023 (0.116)	Data 0.000 (0.069)	
[108/123]	Time 0.025 (0.116)	Data 0.000 (0.068)	
[109/123]	Time 0.021 (0.115)	Data 0.000 (0.067)	
[110/123]	Time 0.027 (0.114)	Data 0.000 (0.067)	
[111/123]	Time 0.024 (0.113)	Data 0.001 (0.066)	
[112/123]	Time 0.187 (0.114)	Data 0.170 (0.067)	
[113/123]	Time 0.023 (0.113)	Data 0.000 (0.067)	
[114/123]	Time 0.019 (0.112)	Data 0.001 (0.066)	
[115/123]	Time 0.018 (0.111)	Data 0.001 (0.065)	
[116/123]	Time 0.076 (0.111)	Data 0.059 (0.065)	
[117/123]	Time 0.064 (0.111)	Data 0.048 (0.065)	
[118/123]	Time 0.098 (0.111)	Data 0.081 (0.065)	
[119/123]	Time 0.016 (0.110)	Data 0.000 (0.065)	
[120/123]	Time 0.016 (0.109)	Data 0.000 (0.064)	
[121/123]	Time 0.016 (0.108)	Data 0.000 (0.064)	
[122/123]	Time 0.016 (0.107)	Data 0.000 (0.063)	
[123/123]	Time 0.016 (0.107)	Data 0.000 (0.063)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.001', store_name='ucf101_mobilenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='mobilenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='mobilenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  879486
DataParallel(
  (module): MobileNet(
    (features): Sequential(
      (0): Sequential(
        (0): Conv3d(3, 16, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
        (1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Block(
        (conv1): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=16, bias=False)
        (bn1): BatchNorm3d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(16, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): Block(
        (conv1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=32, bias=False)
        (bn1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): Block(
        (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=64, bias=False)
        (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (6): Block(
        (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=128, bias=False)
        (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (7): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (8): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (9): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (10): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (11): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (12): Block(
        (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=256, bias=False)
        (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (13): Block(
        (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=512, bias=False)
        (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(512, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
        (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=512, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/result_mobilenet_bs64_lr0.001/ucf101_mobilenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.301 (4.301)	Data 3.238 (3.238)	
[2/123]	Time 0.015 (2.158)	Data 0.001 (1.619)	
[3/123]	Time 0.014 (1.443)	Data 0.000 (1.080)	
[4/123]	Time 0.267 (1.149)	Data 0.253 (0.873)	
[5/123]	Time 0.014 (0.922)	Data 0.000 (0.698)	
[6/123]	Time 0.015 (0.771)	Data 0.001 (0.582)	
[7/123]	Time 0.015 (0.663)	Data 0.000 (0.499)	
[8/123]	Time 0.015 (0.582)	Data 0.001 (0.437)	
[9/123]	Time 0.015 (0.519)	Data 0.001 (0.388)	
[10/123]	Time 0.015 (0.469)	Data 0.000 (0.350)	
[11/123]	Time 0.016 (0.427)	Data 0.001 (0.318)	
[12/123]	Time 0.016 (0.393)	Data 0.001 (0.291)	
[13/123]	Time 0.041 (0.366)	Data 0.016 (0.270)	
[14/123]	Time 0.032 (0.342)	Data 0.001 (0.251)	
[15/123]	Time 0.024 (0.321)	Data 0.001 (0.234)	
[16/123]	Time 0.024 (0.302)	Data 0.001 (0.220)	
[17/123]	Time 0.042 (0.287)	Data 0.015 (0.208)	
[18/123]	Time 0.027 (0.273)	Data 0.014 (0.197)	
[19/123]	Time 0.029 (0.260)	Data 0.015 (0.187)	
[20/123]	Time 0.172 (0.255)	Data 0.159 (0.186)	
[21/123]	Time 0.020 (0.244)	Data 0.006 (0.177)	
[22/123]	Time 0.038 (0.235)	Data 0.014 (0.170)	
[23/123]	Time 0.027 (0.226)	Data 0.001 (0.163)	
[24/123]	Time 0.014 (0.217)	Data 0.001 (0.156)	
[25/123]	Time 0.030 (0.209)	Data 0.015 (0.150)	
[26/123]	Time 0.026 (0.202)	Data 0.012 (0.145)	
[27/123]	Time 0.028 (0.196)	Data 0.015 (0.140)	
[28/123]	Time 0.027 (0.190)	Data 0.001 (0.135)	
[29/123]	Time 0.015 (0.184)	Data 0.001 (0.130)	
[30/123]	Time 0.044 (0.179)	Data 0.015 (0.127)	
[31/123]	Time 0.015 (0.174)	Data 0.002 (0.123)	
[32/123]	Time 0.026 (0.169)	Data 0.013 (0.119)	
[33/123]	Time 0.028 (0.165)	Data 0.014 (0.116)	
[34/123]	Time 0.058 (0.162)	Data 0.037 (0.114)	
[35/123]	Time 0.025 (0.158)	Data 0.001 (0.110)	
[36/123]	Time 0.335 (0.163)	Data 0.322 (0.116)	
[37/123]	Time 0.049 (0.160)	Data 0.012 (0.113)	
[38/123]	Time 0.760 (0.176)	Data 0.746 (0.130)	
[39/123]	Time 0.029 (0.172)	Data 0.015 (0.127)	
[40/123]	Time 0.017 (0.168)	Data 0.003 (0.124)	
[41/123]	Time 0.031 (0.165)	Data 0.017 (0.121)	
[42/123]	Time 0.040 (0.162)	Data 0.027 (0.119)	
[43/123]	Time 0.032 (0.159)	Data 0.018 (0.117)	
[44/123]	Time 0.031 (0.156)	Data 0.004 (0.114)	
[45/123]	Time 0.018 (0.153)	Data 0.005 (0.112)	
[46/123]	Time 0.043 (0.150)	Data 0.018 (0.110)	
[47/123]	Time 0.028 (0.148)	Data 0.001 (0.108)	
[48/123]	Time 0.033 (0.145)	Data 0.002 (0.105)	
[49/123]	Time 0.014 (0.143)	Data 0.001 (0.103)	
[50/123]	Time 0.031 (0.140)	Data 0.017 (0.101)	
[51/123]	Time 0.048 (0.139)	Data 0.021 (0.100)	
[52/123]	Time 0.015 (0.136)	Data 0.001 (0.098)	
[53/123]	Time 0.415 (0.141)	Data 0.401 (0.104)	
[54/123]	Time 0.397 (0.146)	Data 0.382 (0.109)	
[55/123]	Time 0.108 (0.145)	Data 0.094 (0.109)	
[56/123]	Time 0.022 (0.143)	Data 0.008 (0.107)	
[57/123]	Time 0.025 (0.141)	Data 0.011 (0.105)	
[58/123]	Time 0.043 (0.140)	Data 0.029 (0.104)	
[59/123]	Time 0.022 (0.138)	Data 0.007 (0.102)	
[60/123]	Time 0.029 (0.136)	Data 0.015 (0.101)	
[61/123]	Time 0.232 (0.137)	Data 0.218 (0.103)	
[62/123]	Time 0.028 (0.136)	Data 0.014 (0.101)	
[63/123]	Time 0.032 (0.134)	Data 0.019 (0.100)	
[64/123]	Time 0.032 (0.132)	Data 0.019 (0.099)	
[65/123]	Time 0.040 (0.131)	Data 0.026 (0.098)	
[66/123]	Time 0.035 (0.129)	Data 0.001 (0.096)	
[67/123]	Time 0.032 (0.128)	Data 0.001 (0.095)	
[68/123]	Time 0.255 (0.130)	Data 0.236 (0.097)	
[69/123]	Time 0.027 (0.128)	Data 0.012 (0.095)	
[70/123]	Time 0.100 (0.128)	Data 0.086 (0.095)	
[71/123]	Time 0.199 (0.129)	Data 0.184 (0.097)	
[72/123]	Time 0.029 (0.128)	Data 0.015 (0.095)	
[73/123]	Time 0.020 (0.126)	Data 0.006 (0.094)	
[74/123]	Time 0.202 (0.127)	Data 0.183 (0.095)	
[75/123]	Time 0.029 (0.126)	Data 0.007 (0.094)	
[76/123]	Time 0.035 (0.125)	Data 0.014 (0.093)	
[77/123]	Time 0.223 (0.126)	Data 0.209 (0.095)	
[78/123]	Time 0.015 (0.124)	Data 0.001 (0.093)	
[79/123]	Time 0.015 (0.123)	Data 0.000 (0.092)	
[80/123]	Time 0.029 (0.122)	Data 0.014 (0.091)	
[81/123]	Time 0.028 (0.121)	Data 0.013 (0.090)	
[82/123]	Time 0.034 (0.120)	Data 0.006 (0.089)	
[83/123]	Time 0.185 (0.120)	Data 0.170 (0.090)	
[84/123]	Time 0.597 (0.126)	Data 0.582 (0.096)	
[85/123]	Time 0.028 (0.125)	Data 0.013 (0.095)	
[86/123]	Time 0.042 (0.124)	Data 0.011 (0.094)	
[87/123]	Time 0.110 (0.124)	Data 0.096 (0.094)	
[88/123]	Time 0.066 (0.123)	Data 0.010 (0.093)	
[89/123]	Time 0.034 (0.122)	Data 0.020 (0.092)	
[90/123]	Time 0.174 (0.123)	Data 0.146 (0.093)	
[91/123]	Time 0.037 (0.122)	Data 0.001 (0.092)	
[92/123]	Time 0.027 (0.121)	Data 0.000 (0.091)	
[93/123]	Time 0.208 (0.122)	Data 0.179 (0.092)	
[94/123]	Time 0.015 (0.121)	Data 0.001 (0.091)	
[95/123]	Time 0.023 (0.120)	Data 0.009 (0.090)	
[96/123]	Time 0.026 (0.119)	Data 0.000 (0.089)	
[97/123]	Time 0.021 (0.118)	Data 0.000 (0.088)	
[98/123]	Time 0.024 (0.117)	Data 0.000 (0.087)	
[99/123]	Time 0.396 (0.119)	Data 0.381 (0.090)	
[100/123]	Time 0.029 (0.119)	Data 0.001 (0.089)	
[101/123]	Time 0.092 (0.118)	Data 0.056 (0.089)	
[102/123]	Time 0.020 (0.117)	Data 0.000 (0.088)	
[103/123]	Time 0.030 (0.116)	Data 0.015 (0.088)	
[104/123]	Time 0.034 (0.116)	Data 0.001 (0.087)	
[105/123]	Time 0.183 (0.116)	Data 0.169 (0.087)	
[106/123]	Time 0.015 (0.115)	Data 0.001 (0.087)	
[107/123]	Time 0.016 (0.114)	Data 0.001 (0.086)	
[108/123]	Time 0.015 (0.114)	Data 0.001 (0.085)	
[109/123]	Time 0.141 (0.114)	Data 0.127 (0.085)	
[110/123]	Time 0.015 (0.113)	Data 0.001 (0.085)	
[111/123]	Time 0.016 (0.112)	Data 0.001 (0.084)	
[112/123]	Time 0.015 (0.111)	Data 0.001 (0.083)	
[113/123]	Time 0.015 (0.110)	Data 0.001 (0.082)	
[114/123]	Time 0.015 (0.109)	Data 0.001 (0.082)	
[115/123]	Time 0.153 (0.110)	Data 0.139 (0.082)	
[116/123]	Time 0.139 (0.110)	Data 0.126 (0.083)	
[117/123]	Time 0.013 (0.109)	Data 0.000 (0.082)	
[118/123]	Time 0.013 (0.108)	Data 0.000 (0.081)	
[119/123]	Time 0.013 (0.108)	Data 0.000 (0.081)	
[120/123]	Time 0.014 (0.107)	Data 0.000 (0.080)	
[121/123]	Time 0.041 (0.106)	Data 0.027 (0.079)	
[122/123]	Time 0.013 (0.106)	Data 0.000 (0.079)	
[123/123]	Time 0.013 (0.105)	Data 0.000 (0.078)	
Namespace(root_path='/home/matthew/', video_path='/home/matthew/Thesis/FSL105_jpg_30', annotation_path='/home/matthew/Thesis/FSL105_anno_30/ucf101_01.json', result_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.001', store_name='ucf101_shufflenet_0.5x_RGB_16', modality='RGB', dataset='ucf101', n_classes=30, n_finetune_classes=400, sample_size=112, sample_duration=16, downsample=2, initial_scale=1.0, n_scales=5, scale_step=0.84089641525, train_crop='center', learning_rate=0.001, lr_steps=[40, 55, 65, 70, 200, 250], momentum=0.9, dampening=0.9, weight_decay=0.001, mean_dataset='activitynet', no_mean_norm=False, std_norm=False, nesterov=False, optimizer='sgd', lr_patience=10, batch_size=64, n_epochs=100, begin_epoch=1, n_val_samples=1, resume_path='/home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth', pretrain_path='', ft_portion='complete', no_train=True, no_val=True, test=True, test_subset='val', scale_in_test=1.0, crop_position_in_test='c', no_softmax_in_test=False, no_cuda=False, n_threads=16, checkpoint=1, no_hflip=False, norm_value=1, model='shufflenet', version=1.1, model_depth=18, resnet_shortcut='B', wide_resnet_k=2, resnext_cardinality=32, groups=3, width_mult=0.5, manual_seed=1, scales=[1.0, 0.84089641525, 0.7071067811803005, 0.5946035574934808, 0.4999999999911653], arch='shufflenet', mean=[114.7748, 107.7354, 99.475], std=[38.7568578, 37.88248729, 40.02898126])
Total number of trainable parameters:  271602
DataParallel(
  (module): ShuffleNet(
    (conv1): Sequential(
      (0): Conv3d(3, 12, kernel_size=(3, 3, 3), stride=(1, 2, 2), padding=(1, 1, 1), bias=False)
      (1): BatchNorm3d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(12, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 108, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(120, 30, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(30, 30, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=30, bias=False)
        (bn2): BatchNorm3d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(30, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(120, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv3d(240, 60, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(60, 60, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=60, bias=False)
        (bn2): BatchNorm3d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(60, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv3d(240, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 240, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (shortcut): AvgPool3d(kernel_size=(2, 3, 3), stride=2, padding=(0, 1, 1))
      )
      (1): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv3d(480, 120, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn1): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv3d(120, 120, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), groups=120, bias=False)
        (bn2): BatchNorm3d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv3d(120, 480, kernel_size=(1, 1, 1), stride=(1, 1, 1), groups=3, bias=False)
        (bn3): BatchNorm3d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (classifier): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(in_features=480, out_features=30, bias=True)
    )
  )
)
loading checkpoint /home/matthew/Efficient-3DCNNs/results_shufflenet_bs64_lr0.001/ucf101_shufflenet_0.5x_RGB_16_best.pth
run
dataset loading [0/136]
/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: '/home/matthew/anaconda3/lib/python3.11/site-packages/torchvision/image.so: undefined symbol: _ZN3c1017RegisterOperatorsD1Ev'If you don't plan on using image functionality from `torchvision.io`, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have `libjpeg` or `libpng` installed before building `torchvision` from source?
  warn(
/home/matthew/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:558: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 12, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
test
[1/123]	Time 4.961 (4.961)	Data 4.290 (4.290)	
[2/123]	Time 0.020 (2.491)	Data 0.000 (2.145)	
[3/123]	Time 0.017 (1.666)	Data 0.000 (1.430)	
[4/123]	Time 0.017 (1.254)	Data 0.000 (1.073)	
[5/123]	Time 0.018 (1.007)	Data 0.000 (0.858)	
[6/123]	Time 0.018 (0.842)	Data 0.000 (0.715)	
[7/123]	Time 0.018 (0.724)	Data 0.001 (0.613)	
[8/123]	Time 0.019 (0.636)	Data 0.001 (0.537)	
[9/123]	Time 0.018 (0.567)	Data 0.000 (0.477)	
[10/123]	Time 0.017 (0.512)	Data 0.001 (0.429)	
[11/123]	Time 0.029 (0.468)	Data 0.001 (0.390)	
[12/123]	Time 0.034 (0.432)	Data 0.001 (0.358)	
[13/123]	Time 0.057 (0.403)	Data 0.015 (0.332)	
[14/123]	Time 0.038 (0.377)	Data 0.001 (0.308)	
[15/123]	Time 0.037 (0.355)	Data 0.015 (0.289)	
[16/123]	Time 0.064 (0.336)	Data 0.014 (0.271)	
[17/123]	Time 0.060 (0.320)	Data 0.014 (0.256)	
[18/123]	Time 0.052 (0.305)	Data 0.012 (0.243)	
[19/123]	Time 0.032 (0.291)	Data 0.006 (0.230)	
[20/123]	Time 0.038 (0.278)	Data 0.001 (0.219)	
[21/123]	Time 0.055 (0.268)	Data 0.016 (0.209)	
[22/123]	Time 0.039 (0.257)	Data 0.001 (0.200)	
[23/123]	Time 0.054 (0.248)	Data 0.015 (0.192)	
[24/123]	Time 0.028 (0.239)	Data 0.001 (0.184)	
[25/123]	Time 0.049 (0.232)	Data 0.013 (0.177)	
[26/123]	Time 0.040 (0.224)	Data 0.001 (0.170)	
[27/123]	Time 0.058 (0.218)	Data 0.016 (0.164)	
[28/123]	Time 0.033 (0.211)	Data 0.001 (0.159)	
[29/123]	Time 0.038 (0.205)	Data 0.013 (0.153)	
[30/123]	Time 0.049 (0.200)	Data 0.010 (0.149)	
[31/123]	Time 0.058 (0.196)	Data 0.014 (0.144)	
[32/123]	Time 0.027 (0.190)	Data 0.001 (0.140)	
[33/123]	Time 0.045 (0.186)	Data 0.013 (0.136)	
[34/123]	Time 0.070 (0.183)	Data 0.020 (0.133)	
[35/123]	Time 0.085 (0.180)	Data 0.040 (0.130)	
[36/123]	Time 0.165 (0.179)	Data 0.117 (0.130)	
[37/123]	Time 0.055 (0.176)	Data 0.014 (0.126)	
[38/123]	Time 0.345 (0.180)	Data 0.290 (0.131)	
[39/123]	Time 0.083 (0.178)	Data 0.018 (0.128)	
[40/123]	Time 0.055 (0.175)	Data 0.001 (0.125)	
[41/123]	Time 0.039 (0.172)	Data 0.001 (0.122)	
[42/123]	Time 0.043 (0.168)	Data 0.008 (0.119)	
[43/123]	Time 0.138 (0.168)	Data 0.102 (0.119)	
[44/123]	Time 0.037 (0.165)	Data 0.006 (0.116)	
[45/123]	Time 0.129 (0.164)	Data 0.087 (0.115)	
[46/123]	Time 0.053 (0.162)	Data 0.001 (0.113)	
[47/123]	Time 0.049 (0.159)	Data 0.000 (0.111)	
[48/123]	Time 0.055 (0.157)	Data 0.015 (0.109)	
[49/123]	Time 0.049 (0.155)	Data 0.001 (0.106)	
[50/123]	Time 0.297 (0.158)	Data 0.251 (0.109)	
[51/123]	Time 0.043 (0.155)	Data 0.000 (0.107)	
[52/123]	Time 0.066 (0.154)	Data 0.008 (0.105)	
[53/123]	Time 0.037 (0.151)	Data 0.014 (0.103)	
[54/123]	Time 0.384 (0.156)	Data 0.341 (0.108)	
[55/123]	Time 0.076 (0.154)	Data 0.012 (0.106)	
[56/123]	Time 0.056 (0.153)	Data 0.001 (0.104)	
[57/123]	Time 0.054 (0.151)	Data 0.002 (0.102)	
[58/123]	Time 0.058 (0.149)	Data 0.001 (0.101)	
[59/123]	Time 0.439 (0.154)	Data 0.396 (0.106)	
[60/123]	Time 0.035 (0.152)	Data 0.001 (0.104)	
[61/123]	Time 0.367 (0.156)	Data 0.288 (0.107)	
[62/123]	Time 0.061 (0.154)	Data 0.014 (0.105)	
[63/123]	Time 0.051 (0.153)	Data 0.017 (0.104)	
[64/123]	Time 0.048 (0.151)	Data 0.006 (0.103)	
[65/123]	Time 0.087 (0.150)	Data 0.010 (0.101)	
[66/123]	Time 0.022 (0.148)	Data 0.001 (0.100)	
[67/123]	Time 0.065 (0.147)	Data 0.017 (0.098)	
[68/123]	Time 0.058 (0.145)	Data 0.016 (0.097)	
[69/123]	Time 0.053 (0.144)	Data 0.014 (0.096)	
[70/123]	Time 0.048 (0.143)	Data 0.009 (0.095)	
[71/123]	Time 0.056 (0.142)	Data 0.013 (0.094)	
[72/123]	Time 0.134 (0.141)	Data 0.091 (0.094)	
[73/123]	Time 0.047 (0.140)	Data 0.007 (0.092)	
[74/123]	Time 0.054 (0.139)	Data 0.024 (0.091)	
[75/123]	Time 0.179 (0.139)	Data 0.108 (0.092)	
[76/123]	Time 0.061 (0.138)	Data 0.015 (0.091)	
[77/123]	Time 0.188 (0.139)	Data 0.134 (0.091)	
[78/123]	Time 0.054 (0.138)	Data 0.014 (0.090)	
[79/123]	Time 0.046 (0.137)	Data 0.016 (0.089)	
[80/123]	Time 0.056 (0.136)	Data 0.014 (0.088)	
[81/123]	Time 0.058 (0.135)	Data 0.015 (0.087)	
[82/123]	Time 0.081 (0.134)	Data 0.006 (0.086)	
[83/123]	Time 0.059 (0.133)	Data 0.015 (0.086)	
[84/123]	Time 0.041 (0.132)	Data 0.001 (0.085)	
[85/123]	Time 0.042 (0.131)	Data 0.001 (0.084)	
[86/123]	Time 0.054 (0.130)	Data 0.022 (0.083)	
[87/123]	Time 0.069 (0.130)	Data 0.017 (0.082)	
[88/123]	Time 0.487 (0.134)	Data 0.451 (0.086)	
[89/123]	Time 0.054 (0.133)	Data 0.013 (0.085)	
[90/123]	Time 0.059 (0.132)	Data 0.001 (0.085)	
[91/123]	Time 0.401 (0.135)	Data 0.325 (0.087)	
[92/123]	Time 0.064 (0.134)	Data 0.001 (0.086)	
[93/123]	Time 0.043 (0.133)	Data 0.000 (0.085)	
[94/123]	Time 0.051 (0.132)	Data 0.001 (0.084)	
[95/123]	Time 0.030 (0.131)	Data 0.000 (0.084)	
[96/123]	Time 0.025 (0.130)	Data 0.001 (0.083)	
[97/123]	Time 0.028 (0.129)	Data 0.001 (0.082)	
[98/123]	Time 0.055 (0.128)	Data 0.001 (0.081)	
[99/123]	Time 0.028 (0.127)	Data 0.001 (0.080)	
[100/123]	Time 0.030 (0.126)	Data 0.000 (0.079)	
[101/123]	Time 0.043 (0.125)	Data 0.000 (0.079)	
[102/123]	Time 0.037 (0.125)	Data 0.003 (0.078)	
[103/123]	Time 0.024 (0.124)	Data 0.001 (0.077)	
[104/123]	Time 0.202 (0.124)	Data 0.172 (0.078)	
[105/123]	Time 0.026 (0.123)	Data 0.000 (0.077)	
[106/123]	Time 0.025 (0.122)	Data 0.000 (0.077)	
[107/123]	Time 0.305 (0.124)	Data 0.288 (0.079)	
[108/123]	Time 0.017 (0.123)	Data 0.000 (0.078)	
[109/123]	Time 0.017 (0.122)	Data 0.000 (0.077)	
[110/123]	Time 0.017 (0.121)	Data 0.000 (0.076)	
[111/123]	Time 0.017 (0.120)	Data 0.000 (0.076)	
[112/123]	Time 0.017 (0.119)	Data 0.000 (0.075)	
[113/123]	Time 0.017 (0.119)	Data 0.000 (0.074)	
[114/123]	Time 0.017 (0.118)	Data 0.000 (0.074)	
[115/123]	Time 0.017 (0.117)	Data 0.000 (0.073)	
[116/123]	Time 0.017 (0.116)	Data 0.000 (0.072)	
[117/123]	Time 0.017 (0.115)	Data 0.000 (0.072)	
[118/123]	Time 0.017 (0.114)	Data 0.000 (0.071)	
[119/123]	Time 0.017 (0.113)	Data 0.000 (0.071)	
[120/123]	Time 0.016 (0.113)	Data 0.000 (0.070)	
[121/123]	Time 0.016 (0.112)	Data 0.000 (0.069)	
[122/123]	Time 0.016 (0.111)	Data 0.000 (0.069)	
[123/123]	Time 0.158 (0.111)	Data 0.142 (0.070)	
end bs64
end all test

